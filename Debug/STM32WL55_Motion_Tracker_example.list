
STM32WL55_Motion_Tracker_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da84  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800dbc4  0800dbc4  0001dbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df28  0800df28  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df28  0800df28  0001df28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df30  0800df30  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df30  0800df30  0001df30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df34  0800df34  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800df38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000256c  2000007c  0800dfb4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025e8  0800dfb4  000225e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039bd5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065cd  00000000  00000000  00059c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a30  00000000  00000000  00060248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  00062c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c64  00000000  00000000  00065478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd3c  00000000  00000000  0008a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d86fd  00000000  00000000  000b6e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b764  00000000  00000000  0018f568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dbac 	.word	0x0800dbac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800dbac 	.word	0x0800dbac

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001d2:	2afd      	cmp	r2, #253	; 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	; 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000da0:	f000 b96c 	b.w	800107c <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	468e      	mov	lr, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f040 8082 	bne.w	8000ed2 <__udivmoddi4+0x116>
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	4617      	mov	r7, r2
 8000dd2:	d946      	bls.n	8000e62 <__udivmoddi4+0xa6>
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	b14a      	cbz	r2, 8000dee <__udivmoddi4+0x32>
 8000dda:	f1c2 0120 	rsb	r1, r2, #32
 8000dde:	fa05 f302 	lsl.w	r3, r5, r2
 8000de2:	fa20 f101 	lsr.w	r1, r0, r1
 8000de6:	4097      	lsls	r7, r2
 8000de8:	ea41 0e03 	orr.w	lr, r1, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df2:	0c23      	lsrs	r3, r4, #16
 8000df4:	fbbe fcf8 	udiv	ip, lr, r8
 8000df8:	b2b9      	uxth	r1, r7
 8000dfa:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000dfe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e02:	fb0c f001 	mul.w	r0, ip, r1
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d90a      	bls.n	8000e20 <__udivmoddi4+0x64>
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000e10:	f080 8116 	bcs.w	8001040 <__udivmoddi4+0x284>
 8000e14:	4298      	cmp	r0, r3
 8000e16:	f240 8113 	bls.w	8001040 <__udivmoddi4+0x284>
 8000e1a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1e:	443b      	add	r3, r7
 8000e20:	1a1b      	subs	r3, r3, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3310 	mls	r3, r8, r0, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb00 f101 	mul.w	r1, r0, r1
 8000e34:	42a1      	cmp	r1, r4
 8000e36:	d909      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3e:	f080 8101 	bcs.w	8001044 <__udivmoddi4+0x288>
 8000e42:	42a1      	cmp	r1, r4
 8000e44:	f240 80fe 	bls.w	8001044 <__udivmoddi4+0x288>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	443c      	add	r4, r7
 8000e4c:	1a64      	subs	r4, r4, r1
 8000e4e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40d4      	lsrs	r4, r2
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	b902      	cbnz	r2, 8000e66 <__udivmoddi4+0xaa>
 8000e64:	deff      	udf	#255	; 0xff
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d14f      	bne.n	8000f0e <__udivmoddi4+0x152>
 8000e6e:	1bcb      	subs	r3, r1, r7
 8000e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e7e:	0c25      	lsrs	r5, r4, #16
 8000e80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e88:	fb08 f30c 	mul.w	r3, r8, ip
 8000e8c:	42ab      	cmp	r3, r5
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0xe4>
 8000e90:	197d      	adds	r5, r7, r5
 8000e92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0xe2>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	f200 80e7 	bhi.w	800106c <__udivmoddi4+0x2b0>
 8000e9e:	4684      	mov	ip, r0
 8000ea0:	1aed      	subs	r5, r5, r3
 8000ea2:	b2a3      	uxth	r3, r4
 8000ea4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ea8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000eac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000eb0:	fb08 f800 	mul.w	r8, r8, r0
 8000eb4:	45a0      	cmp	r8, r4
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x10c>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x10a>
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	f200 80d7 	bhi.w	8001074 <__udivmoddi4+0x2b8>
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	eba4 0408 	sub.w	r4, r4, r8
 8000ecc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ed0:	e7c0      	b.n	8000e54 <__udivmoddi4+0x98>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x12c>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f000 80af 	beq.w	800103a <__udivmoddi4+0x27e>
 8000edc:	2100      	movs	r1, #0
 8000ede:	e9c6 0500 	strd	r0, r5, [r6]
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	fab3 f183 	clz	r1, r3
 8000eec:	2900      	cmp	r1, #0
 8000eee:	d14b      	bne.n	8000f88 <__udivmoddi4+0x1cc>
 8000ef0:	42ab      	cmp	r3, r5
 8000ef2:	d302      	bcc.n	8000efa <__udivmoddi4+0x13e>
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	f200 80b7 	bhi.w	8001068 <__udivmoddi4+0x2ac>
 8000efa:	1a84      	subs	r4, r0, r2
 8000efc:	eb65 0303 	sbc.w	r3, r5, r3
 8000f00:	2001      	movs	r0, #1
 8000f02:	469e      	mov	lr, r3
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d0aa      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000f08:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f0c:	e7a7      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000f0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000f12:	fa01 f302 	lsl.w	r3, r1, r2
 8000f16:	4097      	lsls	r7, r2
 8000f18:	fa20 f00c 	lsr.w	r0, r0, ip
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000f24:	4318      	orrs	r0, r3
 8000f26:	fbbc f1fe 	udiv	r1, ip, lr
 8000f2a:	0c05      	lsrs	r5, r0, #16
 8000f2c:	fb0e cc11 	mls	ip, lr, r1, ip
 8000f30:	fa1f f887 	uxth.w	r8, r7
 8000f34:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000f38:	fb01 f308 	mul.w	r3, r1, r8
 8000f3c:	42ab      	cmp	r3, r5
 8000f3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f42:	d909      	bls.n	8000f58 <__udivmoddi4+0x19c>
 8000f44:	197d      	adds	r5, r7, r5
 8000f46:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000f4a:	f080 808b 	bcs.w	8001064 <__udivmoddi4+0x2a8>
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	f240 8088 	bls.w	8001064 <__udivmoddi4+0x2a8>
 8000f54:	3902      	subs	r1, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	1aeb      	subs	r3, r5, r3
 8000f5a:	b285      	uxth	r5, r0
 8000f5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f64:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f68:	fb00 f308 	mul.w	r3, r0, r8
 8000f6c:	42ab      	cmp	r3, r5
 8000f6e:	d907      	bls.n	8000f80 <__udivmoddi4+0x1c4>
 8000f70:	197d      	adds	r5, r7, r5
 8000f72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f76:	d271      	bcs.n	800105c <__udivmoddi4+0x2a0>
 8000f78:	42ab      	cmp	r3, r5
 8000f7a:	d96f      	bls.n	800105c <__udivmoddi4+0x2a0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	443d      	add	r5, r7
 8000f80:	1aeb      	subs	r3, r5, r3
 8000f82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f86:	e778      	b.n	8000e7a <__udivmoddi4+0xbe>
 8000f88:	f1c1 0c20 	rsb	ip, r1, #32
 8000f8c:	408b      	lsls	r3, r1
 8000f8e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000f92:	431f      	orrs	r7, r3
 8000f94:	fa20 f40c 	lsr.w	r4, r0, ip
 8000f98:	fa05 f301 	lsl.w	r3, r5, r1
 8000f9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa0:	fa25 f50c 	lsr.w	r5, r5, ip
 8000fa4:	431c      	orrs	r4, r3
 8000fa6:	0c23      	lsrs	r3, r4, #16
 8000fa8:	fbb5 f9fe 	udiv	r9, r5, lr
 8000fac:	fa1f f887 	uxth.w	r8, r7
 8000fb0:	fb0e 5519 	mls	r5, lr, r9, r5
 8000fb4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000fb8:	fb09 fa08 	mul.w	sl, r9, r8
 8000fbc:	45aa      	cmp	sl, r5
 8000fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000fc2:	fa00 f301 	lsl.w	r3, r0, r1
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x21e>
 8000fc8:	197d      	adds	r5, r7, r5
 8000fca:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fce:	d247      	bcs.n	8001060 <__udivmoddi4+0x2a4>
 8000fd0:	45aa      	cmp	sl, r5
 8000fd2:	d945      	bls.n	8001060 <__udivmoddi4+0x2a4>
 8000fd4:	f1a9 0902 	sub.w	r9, r9, #2
 8000fd8:	443d      	add	r5, r7
 8000fda:	eba5 050a 	sub.w	r5, r5, sl
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000fe4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000fe8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fec:	fb00 f808 	mul.w	r8, r0, r8
 8000ff0:	45a0      	cmp	r8, r4
 8000ff2:	d907      	bls.n	8001004 <__udivmoddi4+0x248>
 8000ff4:	193c      	adds	r4, r7, r4
 8000ff6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ffa:	d22d      	bcs.n	8001058 <__udivmoddi4+0x29c>
 8000ffc:	45a0      	cmp	r8, r4
 8000ffe:	d92b      	bls.n	8001058 <__udivmoddi4+0x29c>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001008:	eba4 0408 	sub.w	r4, r4, r8
 800100c:	fba0 8902 	umull	r8, r9, r0, r2
 8001010:	454c      	cmp	r4, r9
 8001012:	46c6      	mov	lr, r8
 8001014:	464d      	mov	r5, r9
 8001016:	d319      	bcc.n	800104c <__udivmoddi4+0x290>
 8001018:	d016      	beq.n	8001048 <__udivmoddi4+0x28c>
 800101a:	b15e      	cbz	r6, 8001034 <__udivmoddi4+0x278>
 800101c:	ebb3 020e 	subs.w	r2, r3, lr
 8001020:	eb64 0405 	sbc.w	r4, r4, r5
 8001024:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001028:	40ca      	lsrs	r2, r1
 800102a:	ea4c 0202 	orr.w	r2, ip, r2
 800102e:	40cc      	lsrs	r4, r1
 8001030:	e9c6 2400 	strd	r2, r4, [r6]
 8001034:	2100      	movs	r1, #0
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	4631      	mov	r1, r6
 800103c:	4630      	mov	r0, r6
 800103e:	e70e      	b.n	8000e5e <__udivmoddi4+0xa2>
 8001040:	46ac      	mov	ip, r5
 8001042:	e6ed      	b.n	8000e20 <__udivmoddi4+0x64>
 8001044:	4618      	mov	r0, r3
 8001046:	e701      	b.n	8000e4c <__udivmoddi4+0x90>
 8001048:	4543      	cmp	r3, r8
 800104a:	d2e6      	bcs.n	800101a <__udivmoddi4+0x25e>
 800104c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001050:	eb69 0507 	sbc.w	r5, r9, r7
 8001054:	3801      	subs	r0, #1
 8001056:	e7e0      	b.n	800101a <__udivmoddi4+0x25e>
 8001058:	4628      	mov	r0, r5
 800105a:	e7d3      	b.n	8001004 <__udivmoddi4+0x248>
 800105c:	4660      	mov	r0, ip
 800105e:	e78f      	b.n	8000f80 <__udivmoddi4+0x1c4>
 8001060:	4681      	mov	r9, r0
 8001062:	e7ba      	b.n	8000fda <__udivmoddi4+0x21e>
 8001064:	4661      	mov	r1, ip
 8001066:	e777      	b.n	8000f58 <__udivmoddi4+0x19c>
 8001068:	4608      	mov	r0, r1
 800106a:	e74b      	b.n	8000f04 <__udivmoddi4+0x148>
 800106c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001070:	443d      	add	r5, r7
 8001072:	e715      	b.n	8000ea0 <__udivmoddi4+0xe4>
 8001074:	3802      	subs	r0, #2
 8001076:	443c      	add	r4, r7
 8001078:	e726      	b.n	8000ec8 <__udivmoddi4+0x10c>
 800107a:	bf00      	nop

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010d8:	f001 f804 	bl	80020e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010dc:	f000 f838 	bl	8001150 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010e0:	f000 f972 	bl	80013c8 <MX_GPIO_Init>
	MX_SUBGHZ_Init();
 80010e4:	f000 f95e 	bl	80013a4 <MX_SUBGHZ_Init>
	MX_ADC_Init();
 80010e8:	f000 f882 	bl	80011f0 <MX_ADC_Init>
	MX_I2C1_Init();
 80010ec:	f000 f8ce 	bl	800128c <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 80010f0:	f000 f90c 	bl	800130c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80010f4:	f005 fb26 	bl	8006744 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of radioBinarySem */
	radioBinarySemHandle = osSemaphoreNew(1, 1, &radioBinarySem_attributes);
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <main+0x5c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f005 fc5d 	bl	80069bc <osSemaphoreNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <main+0x60>)
 8001106:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of radioTask */
	radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <main+0x64>)
 800110a:	2100      	movs	r1, #0
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <main+0x68>)
 800110e:	f005 fb81 	bl	8006814 <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <main+0x6c>)
 8001116:	6013      	str	r3, [r2, #0]

	/* creation of mainTask */
	mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <main+0x70>)
 800111a:	2100      	movs	r1, #0
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <main+0x74>)
 800111e:	f005 fb79 	bl	8006814 <osThreadNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <main+0x78>)
 8001126:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001128:	f005 fb3e 	bl	80067a8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800112c:	e7fe      	b.n	800112c <main+0x58>
 800112e:	bf00      	nop
 8001130:	0800dc8c 	.word	0x0800dc8c
 8001134:	20001ee4 	.word	0x20001ee4
 8001138:	0800dc44 	.word	0x0800dc44
 800113c:	0800195d 	.word	0x0800195d
 8001140:	20001e00 	.word	0x20001e00
 8001144:	0800dc68 	.word	0x0800dc68
 8001148:	080019fd 	.word	0x080019fd
 800114c:	20001da4 	.word	0x20001da4

08001150 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b09a      	sub	sp, #104	; 0x68
 8001154:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2248      	movs	r2, #72	; 0x48
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f00c fc58 	bl	800da14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <SystemClock_Config+0x9c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <SystemClock_Config+0x9c>)
 8001180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <SystemClock_Config+0x9c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001192:	2301      	movs	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fd79 	bl	8003ca0 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x68>
		Error_Handler();
 80011b4:	f000 fcc8 	bl	8001b48 <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 80011b8:	234f      	movs	r3, #79	; 0x4f
 80011ba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f8fd 	bl	80043d4 <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x94>
		Error_Handler();
 80011e0:	f000 fcb2 	bl	8001b48 <Error_Handler>
	}
}
 80011e4:	bf00      	nop
 80011e6:	3768      	adds	r7, #104	; 0x68
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58000400 	.word	0x58000400

080011f0 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_ADC_Init+0x94>)
 80011f6:	4a24      	ldr	r2, [pc, #144]	; (8001288 <MX_ADC_Init+0x98>)
 80011f8:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_ADC_Init+0x94>)
 80011fc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001200:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_ADC_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ADC_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ADC_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_ADC_Init+0x94>)
 8001216:	2204      	movs	r2, #4
 8001218:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_ADC_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_ADC_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_ADC_Init+0x94>)
 800122e:	2201      	movs	r2, #1
 8001230:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_ADC_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_ADC_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_ADC_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_ADC_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_ADC_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_ADC_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_ADC_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_ADC_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_ADC_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_ADC_Init+0x94>)
 8001270:	f001 f800 	bl	8002274 <HAL_ADC_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC_Init+0x8e>
		Error_Handler();
 800127a:	f000 fc65 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20002260 	.word	0x20002260
 8001288:	40012400 	.word	0x40012400

0800128c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_I2C1_Init+0x74>)
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_I2C1_Init+0x78>)
 8001294:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_I2C1_Init+0x74>)
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <MX_I2C1_Init+0x7c>)
 800129a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_I2C1_Init+0x74>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_I2C1_Init+0x74>)
 80012c8:	f001 fc08 	bl	8002adc <HAL_I2C_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80012d2:	f000 fc39 	bl	8001b48 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <MX_I2C1_Init+0x74>)
 80012da:	f002 f96d 	bl	80035b8 <HAL_I2CEx_ConfigAnalogFilter>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80012e4:	f000 fc30 	bl	8001b48 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80012e8:	2100      	movs	r1, #0
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_I2C1_Init+0x74>)
 80012ec:	f002 f9ae 	bl	800364c <HAL_I2CEx_ConfigDigitalFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x6e>
		Error_Handler();
 80012f6:	f000 fc27 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20001db4 	.word	0x20001db4
 8001304:	40005400 	.word	0x40005400
 8001308:	00300f38 	.word	0x00300f38

0800130c <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <MX_LPUART1_UART_Init+0x94>)
 8001314:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001356:	f004 fc9b 	bl	8005c90 <HAL_UART_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 8001360:	f000 fbf2 	bl	8001b48 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8001364:	2100      	movs	r1, #0
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 8001368:	f005 f91e 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001372:	f000 fbe9 	bl	8001b48 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8001376:	2100      	movs	r1, #0
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 800137a:	f005 f953 	bl	8006624 <HAL_UARTEx_SetRxFifoThreshold>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001384:	f000 fbe0 	bl	8001b48 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_LPUART1_UART_Init+0x90>)
 800138a:	f005 f8d5 	bl	8006538 <HAL_UARTEx_DisableFifoMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 8001394:	f000 fbd8 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20001e54 	.word	0x20001e54
 80013a0:	40008000 	.word	0x40008000

080013a4 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SUBGHZ_Init+0x20>)
 80013aa:	2210      	movs	r2, #16
 80013ac:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_SUBGHZ_Init+0x20>)
 80013b0:	f003 fdc6 	bl	8004f40 <HAL_SUBGHZ_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 80013ba:	f000 fbc5 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001da8 	.word	0x20001da8

080013c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff fe61 	bl	80010a4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe5e 	bl	80010a4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	2004      	movs	r0, #4
 80013ea:	f7ff fe5b 	bl	80010a4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAT_EN_GPIO_Pin | RF_SWITCH_CTRL_Pin,
 80013ee:	2200      	movs	r2, #0
 80013f0:	2114      	movs	r1, #20
 80013f2:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_GPIO_Init+0x98>)
 80013f4:	f001 fb42 	bl	8002a7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RF_SWITCH_VDD_Pin | LED1_GPIO_Pin | LED0_GPIO_Pin,
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f001 fb3b 	bl	8002a7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : BAT_EN_GPIO_Pin RF_SWITCH_CTRL_Pin */
	GPIO_InitStruct.Pin = BAT_EN_GPIO_Pin | RF_SWITCH_CTRL_Pin;
 8001406:	2314      	movs	r3, #20
 8001408:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_GPIO_Init+0x98>)
 800141c:	f001 f9ce 	bl	80027bc <HAL_GPIO_Init>

	/*Configure GPIO pin : HAL_INPUT_GPIO_Pin */
	GPIO_InitStruct.Pin = HAL_INPUT_GPIO_Pin;
 8001420:	2301      	movs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(HAL_INPUT_GPIO_GPIO_Port, &GPIO_InitStruct);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 f9c2 	bl	80027bc <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_SWITCH_VDD_Pin LED1_GPIO_Pin LED0_GPIO_Pin */
	GPIO_InitStruct.Pin = RF_SWITCH_VDD_Pin | LED1_GPIO_Pin | LED0_GPIO_Pin;
 8001438:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800143c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f001 f9b3 	bl	80027bc <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	48000400 	.word	0x48000400

08001464 <sensor_error>:

/* USER CODE BEGIN 4 */

static void sensor_error() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < 4; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e012      	b.n	8001496 <sensor_error+0x32>

		HAL_GPIO_TogglePin(LED0_GPIO_GPIO_Port, LED0_GPIO_Pin);
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f001 fb17 	bl	8002aaa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_GPIO_Port, LED1_GPIO_Pin);
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f001 fb11 	bl	8002aaa <HAL_GPIO_TogglePin>

		osDelay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f005 fa68 	bl	8006960 <osDelay>
	for (uint8_t i = 0; i < 4; i++) {
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	3301      	adds	r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d9e9      	bls.n	8001470 <sensor_error+0xc>

	}

	HAL_GPIO_WritePin(LED0_GPIO_GPIO_Port, LED0_GPIO_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f001 fae9 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_GPIO_Port, LED1_GPIO_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f001 fae2 	bl	8002a7c <HAL_GPIO_WritePin>

}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <i2c_bus_scan>:

static uint8_t i2c_bus_scan() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

	uint8_t count = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;

	for (uint8_t i = 1; i < 128; i++) {
 80014ca:	2301      	movs	r3, #1
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	e013      	b.n	80014f8 <i2c_bus_scan+0x38>

		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	b299      	uxth	r1, r3
 80014d8:	2302      	movs	r3, #2
 80014da:	2202      	movs	r2, #2
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <i2c_bus_scan+0x4c>)
 80014de:	f001 fd77 	bl	8002fd0 <HAL_I2C_IsDeviceReady>
 80014e2:	4603      	mov	r3, r0
 80014e4:	717b      	strb	r3, [r7, #5]

		if (result == HAL_OK) {
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <i2c_bus_scan+0x32>

			count++;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3301      	adds	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 1; i < 128; i++) {
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	3301      	adds	r3, #1
 80014f6:	71bb      	strb	r3, [r7, #6]
 80014f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dae7      	bge.n	80014d0 <i2c_bus_scan+0x10>

		}

	}

	return count;
 8001500:	79fb      	ldrb	r3, [r7, #7]

}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20001db4 	.word	0x20001db4

08001510 <init_lsm6dslm>:

static uint8_t init_lsm6dslm() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8

	uint8_t i2c_tx_buffer[2];

	i2c_tx_buffer[0] = 0x01;
 8001516:	2301      	movs	r3, #1
 8001518:	713b      	strb	r3, [r7, #4]

	HAL_StatusTypeDef i2c_state = HAL_I2C_Master_Transmit(&hi2c1,
 800151a:	1d3a      	adds	r2, r7, #4
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	21d4      	movs	r1, #212	; 0xd4
 8001524:	4860      	ldr	r0, [pc, #384]	; (80016a8 <init_lsm6dslm+0x198>)
 8001526:	f001 fb69 	bl	8002bfc <HAL_I2C_Master_Transmit>
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	LSM6DSL_ADDRESS, i2c_tx_buffer, 1, 100);

	if (i2c_state != HAL_OK) {
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <init_lsm6dslm+0x28>

		return 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	e0b2      	b.n	800169e <init_lsm6dslm+0x18e>

	}

//SW Reset
	i2c_tx_buffer[0] = 0x12;
 8001538:	2312      	movs	r3, #18
 800153a:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x01;
 800153c:	2301      	movs	r3, #1
 800153e:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 8001540:	1d3a      	adds	r2, r7, #4
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2302      	movs	r3, #2
 8001548:	21d4      	movs	r1, #212	; 0xd4
 800154a:	4857      	ldr	r0, [pc, #348]	; (80016a8 <init_lsm6dslm+0x198>)
 800154c:	f001 fb56 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <init_lsm6dslm+0x4e>

		return 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	e09f      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//Sleep 500ms
	osDelay(500);
 800155e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001562:	f005 f9fd 	bl	8006960 <osDelay>

	//CTRLS3_C BDU Enable & IF_INS Enable Setting
	i2c_tx_buffer[0] = 0x12;
 8001566:	2312      	movs	r3, #18
 8001568:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x44;
 800156a:	2344      	movs	r3, #68	; 0x44
 800156c:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 800156e:	1d3a      	adds	r2, r7, #4
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	21d4      	movs	r1, #212	; 0xd4
 8001578:	484b      	ldr	r0, [pc, #300]	; (80016a8 <init_lsm6dslm+0x198>)
 800157a:	f001 fb3f 	bl	8002bfc <HAL_I2C_Master_Transmit>
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <init_lsm6dslm+0x7c>

		return 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	e088      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//FIFO_CTRL5 FIFO Disable Setting
	i2c_tx_buffer[0] = 0x0A;
 800158c:	230a      	movs	r3, #10
 800158e:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 8001594:	1d3a      	adds	r2, r7, #4
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	21d4      	movs	r1, #212	; 0xd4
 800159e:	4842      	ldr	r0, [pc, #264]	; (80016a8 <init_lsm6dslm+0x198>)
 80015a0:	f001 fb2c 	bl	8002bfc <HAL_I2C_Master_Transmit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <init_lsm6dslm+0xa2>

		return 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e075      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//CTRL_6 Disable XL_HM_MODE Setting
	i2c_tx_buffer[0] = 0x15;
 80015b2:	2315      	movs	r3, #21
 80015b4:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0b00010000;
 80015b6:	2310      	movs	r3, #16
 80015b8:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	2364      	movs	r3, #100	; 0x64
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2302      	movs	r3, #2
 80015c2:	21d4      	movs	r1, #212	; 0xd4
 80015c4:	4838      	ldr	r0, [pc, #224]	; (80016a8 <init_lsm6dslm+0x198>)
 80015c6:	f001 fb19 	bl	8002bfc <HAL_I2C_Master_Transmit>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <init_lsm6dslm+0xc8>

		return 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e062      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//CTRL8_XL
	i2c_tx_buffer[0] = 0x17;
 80015d8:	2317      	movs	r3, #23
 80015da:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 80015e0:	1d3a      	adds	r2, r7, #4
 80015e2:	2364      	movs	r3, #100	; 0x64
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2302      	movs	r3, #2
 80015e8:	21d4      	movs	r1, #212	; 0xd4
 80015ea:	482f      	ldr	r0, [pc, #188]	; (80016a8 <init_lsm6dslm+0x198>)
 80015ec:	f001 fb06 	bl	8002bfc <HAL_I2C_Master_Transmit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <init_lsm6dslm+0xee>

		return 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e04f      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//CTRL4_C
	i2c_tx_buffer[0] = 0x13;
 80015fe:	2313      	movs	r3, #19
 8001600:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 8001606:	1d3a      	adds	r2, r7, #4
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	21d4      	movs	r1, #212	; 0xd4
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <init_lsm6dslm+0x198>)
 8001612:	f001 faf3 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <init_lsm6dslm+0x114>

		return 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	e03c      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//CTRL1_XL Accel ODR Setting 12.5Hz & 2G
	i2c_tx_buffer[0] = 0x10;
 8001624:	2310      	movs	r3, #16
 8001626:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0b00010000;
 8001628:	2310      	movs	r3, #16
 800162a:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 800162c:	1d3a      	adds	r2, r7, #4
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2302      	movs	r3, #2
 8001634:	21d4      	movs	r1, #212	; 0xd4
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <init_lsm6dslm+0x198>)
 8001638:	f001 fae0 	bl	8002bfc <HAL_I2C_Master_Transmit>
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <init_lsm6dslm+0x13a>

		return 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	e029      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//CTRL7_G Gyro HM_MODE Disable Setting
	i2c_tx_buffer[0] = 0x16;
 800164a:	2316      	movs	r3, #22
 800164c:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0b10000000;
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 8001652:	1d3a      	adds	r2, r7, #4
 8001654:	2364      	movs	r3, #100	; 0x64
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	21d4      	movs	r1, #212	; 0xd4
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <init_lsm6dslm+0x198>)
 800165e:	f001 facd 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <init_lsm6dslm+0x160>

		return 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	e016      	b.n	800169e <init_lsm6dslm+0x18e>

	}
	//CTRL2_G Gyro ODR Setting 12.5Hz * 250dps
	i2c_tx_buffer[0] = 0x11;
 8001670:	2311      	movs	r3, #17
 8001672:	713b      	strb	r3, [r7, #4]
	i2c_tx_buffer[1] = 0x00; // 0x10
 8001674:	2300      	movs	r3, #0
 8001676:	717b      	strb	r3, [r7, #5]

	i2c_state = HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDRESS, i2c_tx_buffer,
 8001678:	1d3a      	adds	r2, r7, #4
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2302      	movs	r3, #2
 8001680:	21d4      	movs	r1, #212	; 0xd4
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <init_lsm6dslm+0x198>)
 8001684:	f001 faba 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
			2, 100);

	if (i2c_state != HAL_OK) {
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <init_lsm6dslm+0x186>

		return 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	e003      	b.n	800169e <init_lsm6dslm+0x18e>

	}

	//Sensor Init Wait Time
	osDelay(200);
 8001696:	20c8      	movs	r0, #200	; 0xc8
 8001698:	f005 f962 	bl	8006960 <osDelay>

	return 0x01;
 800169c:	2301      	movs	r3, #1

}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20001db4 	.word	0x20001db4

080016ac <get_lsm6dslm>:

static uint8_t get_lsm6dslm(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]

	uint8_t i2c_tx_buffer = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t i2c_rx_buffer[12] = { 0x00 };
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]

	if (lsm6dsl_gyro_start_state) {
 80016ce:	4b50      	ldr	r3, [pc, #320]	; (8001810 <get_lsm6dslm+0x164>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <get_lsm6dslm+0x34>

		i2c_tx_buffer = 0x22;
 80016d8:	2322      	movs	r3, #34	; 0x22
 80016da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016de:	e002      	b.n	80016e6 <get_lsm6dslm+0x3a>

	} else {

		i2c_tx_buffer = 0x28;
 80016e0:	2328      	movs	r3, #40	; 0x28
 80016e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	}

	HAL_StatusTypeDef i2c_state = HAL_I2C_Master_Transmit(&hi2c1,
 80016e6:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	21d4      	movs	r1, #212	; 0xd4
 80016f2:	4848      	ldr	r0, [pc, #288]	; (8001814 <get_lsm6dslm+0x168>)
 80016f4:	f001 fa82 	bl	8002bfc <HAL_I2C_Master_Transmit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	LSM6DSL_ADDRESS, &i2c_tx_buffer, 1, 100);

	if (i2c_state != HAL_OK) {
 80016fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <get_lsm6dslm+0x5e>

		return 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	e07e      	b.n	8001808 <get_lsm6dslm+0x15c>

	}

	if (lsm6dsl_gyro_start_state) {
 800170a:	4b41      	ldr	r3, [pc, #260]	; (8001810 <get_lsm6dslm+0x164>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d048      	beq.n	80017a6 <get_lsm6dslm+0xfa>

		i2c_state = HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDRESS,
 8001714:	f107 0214 	add.w	r2, r7, #20
 8001718:	2364      	movs	r3, #100	; 0x64
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	230c      	movs	r3, #12
 800171e:	21d4      	movs	r1, #212	; 0xd4
 8001720:	483c      	ldr	r0, [pc, #240]	; (8001814 <get_lsm6dslm+0x168>)
 8001722:	f001 fb5f 	bl	8002de4 <HAL_I2C_Master_Receive>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				i2c_rx_buffer, 12, 100);

		int16_t value = i2c_rx_buffer[0] | (i2c_rx_buffer[1] << 8);
 800172c:	7d3b      	ldrb	r3, [r7, #20]
 800172e:	b21a      	sxth	r2, r3
 8001730:	7d7b      	ldrb	r3, [r7, #21]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	847b      	strh	r3, [r7, #34]	; 0x22
		*gx = value;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800173e:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[2] | (i2c_rx_buffer[3] << 8);
 8001740:	7dbb      	ldrb	r3, [r7, #22]
 8001742:	b21a      	sxth	r2, r3
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	847b      	strh	r3, [r7, #34]	; 0x22
		*gy = value;
 800174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001750:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001752:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[4] | (i2c_rx_buffer[5] << 8);
 8001754:	7e3b      	ldrb	r3, [r7, #24]
 8001756:	b21a      	sxth	r2, r3
 8001758:	7e7b      	ldrb	r3, [r7, #25]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	847b      	strh	r3, [r7, #34]	; 0x22
		*gz = value;
 8001762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001764:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001766:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[6] | (i2c_rx_buffer[7] << 8);
 8001768:	7ebb      	ldrb	r3, [r7, #26]
 800176a:	b21a      	sxth	r2, r3
 800176c:	7efb      	ldrb	r3, [r7, #27]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	847b      	strh	r3, [r7, #34]	; 0x22
		*ax = value;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800177a:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[8] | (i2c_rx_buffer[9] << 8);
 800177c:	7f3b      	ldrb	r3, [r7, #28]
 800177e:	b21a      	sxth	r2, r3
 8001780:	7f7b      	ldrb	r3, [r7, #29]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	847b      	strh	r3, [r7, #34]	; 0x22
		*ay = value;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800178e:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[10] | (i2c_rx_buffer[11] << 8);
 8001790:	7fbb      	ldrb	r3, [r7, #30]
 8001792:	b21a      	sxth	r2, r3
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21b      	sxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	847b      	strh	r3, [r7, #34]	; 0x22
		*az = value;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	e029      	b.n	80017fa <get_lsm6dslm+0x14e>

	} else {

		i2c_state = HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDRESS,
 80017a6:	f107 0214 	add.w	r2, r7, #20
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2306      	movs	r3, #6
 80017b0:	21d4      	movs	r1, #212	; 0xd4
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <get_lsm6dslm+0x168>)
 80017b4:	f001 fb16 	bl	8002de4 <HAL_I2C_Master_Receive>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				i2c_rx_buffer, 6, 100);

		int16_t value = i2c_rx_buffer[0] | (i2c_rx_buffer[1] << 8);
 80017be:	7d3b      	ldrb	r3, [r7, #20]
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	7d7b      	ldrb	r3, [r7, #21]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		*ax = value;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017d0:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[2] | (i2c_rx_buffer[3] << 8);
 80017d2:	7dbb      	ldrb	r3, [r7, #22]
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	84bb      	strh	r3, [r7, #36]	; 0x24
		*ay = value;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e4:	801a      	strh	r2, [r3, #0]

		value = i2c_rx_buffer[4] | (i2c_rx_buffer[5] << 8);
 80017e6:	7e3b      	ldrb	r3, [r7, #24]
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7e7b      	ldrb	r3, [r7, #25]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		*az = value;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017f8:	801a      	strh	r2, [r3, #0]

	}

	if (i2c_state != HAL_OK) {
 80017fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <get_lsm6dslm+0x15a>

		return 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <get_lsm6dslm+0x15c>

	}

	return 0x01;
 8001806:	2301      	movs	r3, #1

}
 8001808:	4618      	mov	r0, r3
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000098 	.word	0x20000098
 8001814:	20001db4 	.word	0x20001db4

08001818 <si7051_init>:

static uint8_t si7051_init() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8

	uint8_t i2c_tx_buffer[2];

	i2c_tx_buffer[0] = 0xFE;
 800181e:	23fe      	movs	r3, #254	; 0xfe
 8001820:	713b      	strb	r3, [r7, #4]

	HAL_StatusTypeDef i2c_state = HAL_I2C_Master_Transmit(&hi2c1,
 8001822:	1d3a      	adds	r2, r7, #4
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <si7051_init+0x38>)
 800182e:	f001 f9e5 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	SI7051_ADDRESS, i2c_tx_buffer, 1, 100);

	if (i2c_state != HAL_OK) {
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <si7051_init+0x28>

		return 0x00;
 800183c:	2300      	movs	r3, #0
 800183e:	e003      	b.n	8001848 <si7051_init+0x30>

	}

	//Sensor Init Wait Time
	osDelay(200);
 8001840:	20c8      	movs	r0, #200	; 0xc8
 8001842:	f005 f88d 	bl	8006960 <osDelay>

	return 0x01;
 8001846:	2301      	movs	r3, #1

}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20001db4 	.word	0x20001db4

08001854 <set_conversion_si7051>:

static uint8_t set_conversion_si7051() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af02      	add	r7, sp, #8

	uint8_t i2c_tx_buffer = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	71bb      	strb	r3, [r7, #6]

	i2c_tx_buffer = 0xF3;
 800185e:	23f3      	movs	r3, #243	; 0xf3
 8001860:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef i2c_state = HAL_I2C_Master_Transmit(&hi2c1,
 8001862:	1dba      	adds	r2, r7, #6
 8001864:	2364      	movs	r3, #100	; 0x64
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <set_conversion_si7051+0x38>)
 800186e:	f001 f9c5 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	SI7051_ADDRESS, &i2c_tx_buffer, 1, 100);

	if (i2c_state != HAL_OK) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <set_conversion_si7051+0x2c>

		return 0x00;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <set_conversion_si7051+0x2e>

	}

	return 0x01;
 8001880:	2301      	movs	r3, #1

}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20001db4 	.word	0x20001db4

08001890 <get_si7051>:

static uint8_t get_si7051(int16_t *temperature) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]

	uint8_t i2c_rx_buffer[2] = { 0x00 };
 8001898:	2300      	movs	r3, #0
 800189a:	81bb      	strh	r3, [r7, #12]

	HAL_StatusTypeDef i2c_state = HAL_I2C_Master_Receive(&hi2c1, SI7051_ADDRESS,
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2302      	movs	r3, #2
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4829      	ldr	r0, [pc, #164]	; (8001950 <get_si7051+0xc0>)
 80018aa:	f001 fa9b 	bl	8002de4 <HAL_I2C_Master_Receive>
 80018ae:	4603      	mov	r3, r0
 80018b0:	75fb      	strb	r3, [r7, #23]
			i2c_rx_buffer, 2, 100);

	if (i2c_state != HAL_OK) {
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <get_si7051+0x2c>

		return 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e03b      	b.n	8001934 <get_si7051+0xa4>

	}

	uint16_t value = (i2c_rx_buffer[0] << 8) | i2c_rx_buffer[1];
 80018bc:	7b3b      	ldrb	r3, [r7, #12]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	7b7b      	ldrb	r3, [r7, #13]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	82bb      	strh	r3, [r7, #20]

	float temperature_si7051 = ((((float) value * 175.72) / 65536) - 46.85);
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9de 	bl	8000c90 <__aeabi_ui2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe6a 	bl	80005b0 <__aeabi_f2d>
 80018dc:	a318      	add	r3, pc, #96	; (adr r3, 8001940 <get_si7051+0xb0>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe febd 	bl	8000660 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <get_si7051+0xc4>)
 80018f4:	f7fe ffde 	bl	80008b4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	a311      	add	r3, pc, #68	; (adr r3, 8001948 <get_si7051+0xb8>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fcf3 	bl	80002f0 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f8b7 	bl	8000a84 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	613b      	str	r3, [r7, #16]
	*temperature = (int16_t) (temperature_si7051 * 10);
 800191a:	490f      	ldr	r1, [pc, #60]	; (8001958 <get_si7051+0xc8>)
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fc2f 	bl	8000180 <__aeabi_fmul>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fa0b 	bl	8000d40 <__aeabi_f2iz>
 800192a:	4603      	mov	r3, r0
 800192c:	b21a      	sxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	801a      	strh	r2, [r3, #0]

	return 0x01;
 8001932:	2301      	movs	r3, #1

}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	f3af 8000 	nop.w
 8001940:	3d70a3d7 	.word	0x3d70a3d7
 8001944:	4065f70a 	.word	0x4065f70a
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	40476ccc 	.word	0x40476ccc
 8001950:	20001db4 	.word	0x20001db4
 8001954:	40f00000 	.word	0x40f00000
 8001958:	41200000 	.word	0x41200000

0800195c <StartRadioTask>:
 * @brief  Function implementing the radioTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRadioTask */
void StartRadioTask(void *argument) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	/* init code for SubGHz_Phy */
	MX_SubGHz_Phy_Init();
 8001964:	f00b fb96 	bl	800d094 <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 5 */

	radio_state = RADIO_SLEEP;
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <StartRadioTask+0x84>)
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]

	MX_SubGhz_Phy_Radio_Sleep();
 800196e:	f00b fbeb 	bl	800d148 <MX_SubGhz_Phy_Radio_Sleep>

	/* Infinite loop */
	for (;;) {

		osSemaphoreAcquire(radioBinarySemHandle, osWaitForever);
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <StartRadioTask+0x88>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800197a:	4618      	mov	r0, r3
 800197c:	f005 f8ba 	bl	8006af4 <osSemaphoreAcquire>

		radio_state = RADIO_TX_START;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <StartRadioTask+0x84>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
		MX_SubGhz_Phy_SendPacket(radio_tx_buffer, sizeof(radio_tx_buffer));
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	4817      	ldr	r0, [pc, #92]	; (80019e8 <StartRadioTask+0x8c>)
 800198a:	f00b fbe3 	bl	800d154 <MX_SubGhz_Phy_SendPacket>

		osSemaphoreAcquire(radioBinarySemHandle, RADIO_TX_TIMEOUT_COUNT);
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <StartRadioTask+0x88>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001996:	4618      	mov	r0, r3
 8001998:	f005 f8ac 	bl	8006af4 <osSemaphoreAcquire>

		if (MX_SubGhz_Phy_Get_SendPacket_State() == 0x01) {
 800199c:	f00b fbee 	bl	800d17c <MX_SubGhz_Phy_Get_SendPacket_State>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d116      	bne.n	80019d4 <StartRadioTask+0x78>

			radio_state = RADIO_RX_START;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <StartRadioTask+0x84>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
			MX_SubGhz_Phy_RecvicePacket();
 80019ac:	f00b fbf0 	bl	800d190 <MX_SubGhz_Phy_RecvicePacket>

			osSemaphoreAcquire(radioBinarySemHandle, RADIO_RX_TIMEOUT_COUNT);
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <StartRadioTask+0x88>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 f89b 	bl	8006af4 <osSemaphoreAcquire>

			if (MX_SubGhz_Phy_Get_RecvicePacket_State() == 0x01) {
 80019be:	f00b fbf3 	bl	800d1a8 <MX_SubGhz_Phy_Get_RecvicePacket_State>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <StartRadioTask+0x78>

				MX_SubGhz_Phy_Get_RecvicePacket(&radio_rx_rssi, &radio_rx_snr,
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <StartRadioTask+0x90>)
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <StartRadioTask+0x94>)
 80019cc:	4909      	ldr	r1, [pc, #36]	; (80019f4 <StartRadioTask+0x98>)
 80019ce:	480a      	ldr	r0, [pc, #40]	; (80019f8 <StartRadioTask+0x9c>)
 80019d0:	f00b fbf4 	bl	800d1bc <MX_SubGhz_Phy_Get_RecvicePacket>

			}

		}

		radio_state = RADIO_SLEEP;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <StartRadioTask+0x84>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]

		MX_SubGhz_Phy_Radio_Sleep();
 80019da:	f00b fbb5 	bl	800d148 <MX_SubGhz_Phy_Radio_Sleep>
		osSemaphoreAcquire(radioBinarySemHandle, osWaitForever);
 80019de:	e7c8      	b.n	8001972 <StartRadioTask+0x16>
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20001ee4 	.word	0x20001ee4
 80019e8:	200000ac 	.word	0x200000ac
 80019ec:	200000ef 	.word	0x200000ef
 80019f0:	200000f0 	.word	0x200000f0
 80019f4:	200000ee 	.word	0x200000ee
 80019f8:	200000ec 	.word	0x200000ec

080019fc <StartMainTask>:
 * @brief Function implementing the mainTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMainTask */
	/* Infinite loop */
	uint32_t timer_count = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_Port, RF_SWITCH_VDD_Pin,
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f001 f834 	bl	8002a7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_vdd_pin(RF_SWITCH_VDD_GPIO_Port,
 8001a14:	2120      	movs	r1, #32
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f000 f89b 	bl	8001b54 <set_radio_pin_manager_rf_switch_vdd_pin>
	RF_SWITCH_VDD_Pin);

	HAL_GPIO_WritePin(RF_SWITCH_CTRL_GPIO_Port, RF_SWITCH_CTRL_Pin,
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2104      	movs	r1, #4
 8001a22:	4836      	ldr	r0, [pc, #216]	; (8001afc <StartMainTask+0x100>)
 8001a24:	f001 f82a 	bl	8002a7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_pin(RF_SWITCH_CTRL_GPIO_Port,
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4834      	ldr	r0, [pc, #208]	; (8001afc <StartMainTask+0x100>)
 8001a2c:	f000 f8a8 	bl	8001b80 <set_radio_pin_manager_rf_switch_pin>
	RF_SWITCH_CTRL_Pin);

	HAL_GPIO_WritePin(LED0_GPIO_GPIO_Port, LED0_GPIO_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f001 f81f 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_GPIO_Port, LED1_GPIO_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f001 f818 	bl	8002a7c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BAT_EN_GPIO_GPIO_Port, BAT_EN_GPIO_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2110      	movs	r1, #16
 8001a50:	482a      	ldr	r0, [pc, #168]	; (8001afc <StartMainTask+0x100>)
 8001a52:	f001 f813 	bl	8002a7c <HAL_GPIO_WritePin>

	osDelay(100);
 8001a56:	2064      	movs	r0, #100	; 0x64
 8001a58:	f004 ff82 	bl	8006960 <osDelay>

	i2c_bus_scan();
 8001a5c:	f7ff fd30 	bl	80014c0 <i2c_bus_scan>

	if (!init_lsm6dslm()) {
 8001a60:	f7ff fd56 	bl	8001510 <init_lsm6dslm>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <StartMainTask+0x72>

		sensor_error();
 8001a6a:	f7ff fcfb 	bl	8001464 <sensor_error>

	}

	if (!si7051_init()) {
 8001a6e:	f7ff fed3 	bl	8001818 <si7051_init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <StartMainTask+0x80>

		sensor_error();
 8001a78:	f7ff fcf4 	bl	8001464 <sensor_error>

	}

	HAL_GPIO_WritePin(LED0_GPIO_GPIO_Port, LED0_GPIO_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f000 fff9 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_GPIO_Port, LED1_GPIO_Pin, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a94:	f000 fff2 	bl	8002a7c <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {

		get_lsm6dslm(&ax, &ay, &az, &gx, &gy, &gz);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <StartMainTask+0x104>)
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <StartMainTask+0x108>)
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <StartMainTask+0x10c>)
 8001aa2:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <StartMainTask+0x110>)
 8001aa4:	491a      	ldr	r1, [pc, #104]	; (8001b10 <StartMainTask+0x114>)
 8001aa6:	481b      	ldr	r0, [pc, #108]	; (8001b14 <StartMainTask+0x118>)
 8001aa8:	f7ff fe00 	bl	80016ac <get_lsm6dslm>

		timer_count++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]

		//10 minute
		if (timer_count >= 6000) {
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f241 726f 	movw	r2, #5999	; 0x176f
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d91a      	bls.n	8001af2 <StartMainTask+0xf6>

			if (si7051_conversion_state == 0x00) {
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <StartMainTask+0x11c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <StartMainTask+0xd4>

				set_conversion_si7051();
 8001ac4:	f7ff fec6 	bl	8001854 <set_conversion_si7051>
				si7051_conversion_state = 0x01;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <StartMainTask+0x11c>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e010      	b.n	8001af2 <StartMainTask+0xf6>

			} else if (si7051_conversion_state == 0x01) {
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <StartMainTask+0x11c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10c      	bne.n	8001af2 <StartMainTask+0xf6>

				get_si7051(&temperature);
 8001ad8:	4810      	ldr	r0, [pc, #64]	; (8001b1c <StartMainTask+0x120>)
 8001ada:	f7ff fed9 	bl	8001890 <get_si7051>
				si7051_conversion_state = 0x00;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <StartMainTask+0x11c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

				timer_count = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

				osSemaphoreRelease(radioBinarySemHandle);
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <StartMainTask+0x124>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 f867 	bl	8006bc0 <osSemaphoreRelease>

			}

		}

		osDelay(100);
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	f004 ff34 	bl	8006960 <osDelay>
		get_lsm6dslm(&ax, &ay, &az, &gx, &gy, &gz);
 8001af8:	e7ce      	b.n	8001a98 <StartMainTask+0x9c>
 8001afa:	bf00      	nop
 8001afc:	48000400 	.word	0x48000400
 8001b00:	200000a4 	.word	0x200000a4
 8001b04:	200000a2 	.word	0x200000a2
 8001b08:	200000a0 	.word	0x200000a0
 8001b0c:	2000009e 	.word	0x2000009e
 8001b10:	2000009c 	.word	0x2000009c
 8001b14:	2000009a 	.word	0x2000009a
 8001b18:	200000a6 	.word	0x200000a6
 8001b1c:	200000a8 	.word	0x200000a8
 8001b20:	20001ee4 	.word	0x20001ee4

08001b24 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b36:	f000 faf5 	bl	8002124 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40014800 	.word	0x40014800

08001b48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <set_radio_pin_manager_rf_switch_vdd_pin>:
static uint16_t RF_SWITCH_VDD_GPIO_PIN;

static GPIO_TypeDef *RF_SWITCH_GPIO_PORT;
static uint16_t RF_SWITCH_GPIO_PIN;

void set_radio_pin_manager_rf_switch_vdd_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_VDD_GPIO_PORT = port;
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <set_radio_pin_manager_rf_switch_vdd_pin+0x24>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
	RF_SWITCH_VDD_GPIO_PIN = pin;
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <set_radio_pin_manager_rf_switch_vdd_pin+0x28>)
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	8013      	strh	r3, [r2, #0]

}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000170 	.word	0x20000170
 8001b7c:	20000174 	.word	0x20000174

08001b80 <set_radio_pin_manager_rf_switch_pin>:
	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_PORT, RF_SWITCH_VDD_GPIO_PIN,
			GPIO_PIN_RESET);

}

void set_radio_pin_manager_rf_switch_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_GPIO_PORT = port;
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <set_radio_pin_manager_rf_switch_pin+0x24>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
	RF_SWITCH_GPIO_PIN = pin;
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <set_radio_pin_manager_rf_switch_pin+0x28>)
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	8013      	strh	r3, [r2, #0]

}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000178 	.word	0x20000178
 8001ba8:	2000017c 	.word	0x2000017c

08001bac <LL_AHB2_GRP1_EnableClock>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f06f 0001 	mvn.w	r0, #1
 8001ca8:	f000 fd5f 	bl	800276a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_ADC_MspInit+0x50>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d112      	bne.n	8001cf8 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd6:	f7ff ffb1 	bl	8001c3c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7ff ff66 	bl	8001bac <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = BAT_ADC_INPUT_Pin;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BAT_ADC_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <HAL_ADC_MspInit+0x54>)
 8001cf4:	f000 fd62 	bl	80027bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40012400 	.word	0x40012400
 8001d04:	48000400 	.word	0x48000400

08001d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2238      	movs	r2, #56	; 0x38
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00b fe73 	bl	800da14 <memset>
  if(hi2c->Instance==I2C1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_I2C_MspInit+0x88>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d126      	bne.n	8001d86 <HAL_I2C_MspInit+0x7e>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d38:	2340      	movs	r3, #64	; 0x40
 8001d3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d3c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d40:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 ff46 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d52:	f7ff fef9 	bl	8001b48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff ff28 	bl	8001bac <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d62:	2312      	movs	r3, #18
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d76:	4619      	mov	r1, r3
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <HAL_I2C_MspInit+0x8c>)
 8001d7a:	f000 fd1f 	bl	80027bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d82:	f7ff ff2b 	bl	8001bdc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3758      	adds	r7, #88	; 0x58
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005400 	.word	0x40005400
 8001d94:	48000400 	.word	0x48000400

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b096      	sub	sp, #88	; 0x58
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2238      	movs	r2, #56	; 0x38
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00b fe2b 	bl	800da14 <memset>
  if(huart->Instance==LPUART1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_UART_MspInit+0x84>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d124      	bne.n	8001e12 <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 feff 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de0:	f7ff feb2 	bl	8001b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff ff11 	bl	8001c0c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff fede 	bl	8001bac <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001df0:	230c      	movs	r3, #12
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e00:	2308      	movs	r3, #8
 8001e02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f000 fcd5 	bl	80027bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3758      	adds	r7, #88	; 0x58
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40008000 	.word	0x40008000

08001e20 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff ff1f 	bl	8001c6c <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2105      	movs	r1, #5
 8001e32:	2032      	movs	r0, #50	; 0x32
 8001e34:	f000 fc99 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f000 fcb0 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <LL_APB2_GRP1_EnableClock>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e8e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e92:	f7ff ffd8 	bl	8001e46 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	f107 0310 	add.w	r3, r7, #16
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fcb1 	bl	8004808 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ea6:	f002 fc9d 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8001eaa:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_InitTick+0xbc>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	0c9b      	lsrs	r3, r3, #18
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_InitTick+0xc0>)
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_InitTick+0xc4>)
 8001ebe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_InitTick+0xc0>)
 8001ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_InitTick+0xc0>)
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_InitTick+0xc0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_InitTick+0xc0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001eda:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_InitTick+0xc0>)
 8001edc:	f003 fc4a 	bl	8005774 <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11b      	bne.n	8001f26 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_InitTick+0xc0>)
 8001ef0:	f003 fca0 	bl	8005834 <HAL_TIM_Base_Start_IT>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001efa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001f02:	201d      	movs	r0, #29
 8001f04:	f000 fc4b 	bl	800279e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	d808      	bhi.n	8001f20 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	201d      	movs	r0, #29
 8001f14:	f000 fc29 	bl	800276a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_InitTick+0xc8>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e002      	b.n	8001f26 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
 /* Return function status */
  return status;
 8001f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3738      	adds	r7, #56	; 0x38
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	431bde83 	.word	0x431bde83
 8001f38:	200024c4 	.word	0x200024c4
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	20000008 	.word	0x20000008

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM17_IRQHandler+0x10>)
 8001f76:	f003 fca9 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200024c4 	.word	0x200024c4

08001f84 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001f8a:	f003 fa55 	bl	8005438 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20001da8 	.word	0x20001da8

08001f98 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <TIMER_IF_SetTimerContext+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000180 	.word	0x20000180

08002008 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <TIMER_IF_GetTimerContext+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000180 	.word	0x20000180

0800201c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 800203c:	687b      	ldr	r3, [r7, #4]
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002092:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002094:	f7ff ff86 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x6>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopForever+0xe>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopForever+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020be:	f00b fc75 	bl	800d9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c2:	f7ff f807 	bl	80010d4 <main>

080020c6 <LoopForever>:

LoopForever:
    b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
  ldr   r0, =_estack
 80020c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80020d4:	0800df38 	.word	0x0800df38
  ldr r2, =_sbss
 80020d8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80020dc:	200025e8 	.word	0x200025e8

080020e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f000 fb30 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020f4:	f002 fb50 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_Init+0x3c>)
 80020fc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff feba 	bl	8001e78 <HAL_InitTick>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e001      	b.n	8002114 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002110:	f7ff fdc4 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002114:	79fb      	ldrb	r3, [r7, #7]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20002510 	.word	0x20002510

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20002510 	.word	0x20002510

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fff0 	bl	8002148 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffe0 	bl	8002148 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2107      	movs	r1, #7
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021f0:	f023 0317 	bic.w	r3, r3, #23
 80021f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800221a:	d101      	bne.n	8002220 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <LL_ADC_IsEnabled+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_ADC_IsEnabled+0x1a>
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d101      	bne.n	8002268 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1ae      	b.n	80025f4 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fd03 	bl	8001cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ffa2 	bl	8002206 <LL_ADC_IsInternalRegulatorEnabled>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d115      	bne.n	80022f4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff87 	bl	80021e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d2:	4b9b      	ldr	r3, [pc, #620]	; (8002540 <HAL_ADC_Init+0x2cc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	4a9a      	ldr	r2, [pc, #616]	; (8002544 <HAL_ADC_Init+0x2d0>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	3301      	adds	r3, #1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e6:	e002      	b.n	80022ee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff84 	bl	8002206 <LL_ADC_IsInternalRegulatorEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10d      	bne.n	8002320 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff93 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 800232a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8154 	bne.w	80025e2 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 8150 	bne.w	80025e2 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff68 	bl	800222c <LL_ADC_IsEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d14f      	bne.n	8002402 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f023 0118 	bic.w	r1, r3, #24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002384:	4313      	orrs	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d111      	bne.n	80023ba <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023a2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80023a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80023ae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	4b61      	ldr	r3, [pc, #388]	; (8002548 <HAL_ADC_Init+0x2d4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	6979      	ldr	r1, [r7, #20]
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80023d6:	d014      	beq.n	8002402 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d00f      	beq.n	8002402 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ea:	d00a      	beq.n	8002402 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_ADC_Init+0x2d8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023fc:	4953      	ldr	r1, [pc, #332]	; (800254c <HAL_ADC_Init+0x2d8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7e1b      	ldrb	r3, [r3, #24]
 8002406:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e5b      	ldrb	r3, [r3, #25]
 800240c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800240e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e9b      	ldrb	r3, [r3, #26]
 8002414:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002416:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800241c:	2a00      	cmp	r2, #0
 800241e:	d002      	beq.n	8002426 <HAL_ADC_Init+0x1b2>
 8002420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002424:	e000      	b.n	8002428 <HAL_ADC_Init+0x1b4>
 8002426:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002428:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800242e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da04      	bge.n	8002442 <HAL_ADC_Init+0x1ce>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002440:	e001      	b.n	8002446 <HAL_ADC_Init+0x1d2>
 8002442:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002446:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800244e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002450:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d114      	bne.n	800248c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7e9b      	ldrb	r3, [r3, #26]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e00b      	b.n	800248c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80024b2:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	430b      	orrs	r3, r1
 80024be:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_ADC_Init+0x2dc>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6979      	ldr	r1, [r7, #20]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	461a      	mov	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	f7ff fe60 	bl	80021a4 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	461a      	mov	r2, r3
 80024ee:	4919      	ldr	r1, [pc, #100]	; (8002554 <HAL_ADC_Init+0x2e0>)
 80024f0:	f7ff fe58 	bl	80021a4 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f062 020f 	orn	r2, r2, #15
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
 800250c:	e044      	b.n	8002598 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002516:	d13f      	bne.n	8002598 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e00c      	b.n	8002538 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d012      	beq.n	8002558 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	3301      	adds	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b07      	cmp	r3, #7
 800253c:	d9ef      	bls.n	800251e <HAL_ADC_Init+0x2aa>
 800253e:	e00c      	b.n	800255a <HAL_ADC_Init+0x2e6>
 8002540:	20000004 	.word	0x20000004
 8002544:	053e2d63 	.word	0x053e2d63
 8002548:	1ffffc02 	.word	0x1ffffc02
 800254c:	40012708 	.word	0x40012708
 8002550:	dffffc02 	.word	0xdffffc02
 8002554:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002558:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f062 020f 	orn	r2, r2, #15
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
 8002570:	e012      	b.n	8002598 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	3b01      	subs	r3, #1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 031c 	and.w	r3, r3, #28
 8002584:	f06f 020f 	mvn.w	r2, #15
 8002588:	fa02 f103 	lsl.w	r1, r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_ADC_Init+0x388>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025be:	e018      	b.n	80025f2 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f023 0312 	bic.w	r3, r3, #18
 80025c8:	f043 0210 	orr.w	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025e0:	e007      	b.n	80025f2 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	833fffe7 	.word	0x833fffe7

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4906      	ldr	r1, [pc, #24]	; (8002698 <__NVIC_EnableIRQ+0x34>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff4f 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff66 	bl	8002648 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ffb4 	bl	80026f0 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff83 	bl	800269c <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff59 	bl	8002664 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ca:	e140      	b.n	8002a4e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8132 	beq.w	8002a48 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d005      	beq.n	80027fc <HAL_GPIO_Init+0x40>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002832:	2201      	movs	r2, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d017      	beq.n	800289a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d123      	bne.n	80028ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 808c 	beq.w	8002a48 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002930:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_GPIO_Init+0x2b0>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	2207      	movs	r2, #7
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800295a:	d00d      	beq.n	8002978 <HAL_GPIO_Init+0x1bc>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a44      	ldr	r2, [pc, #272]	; (8002a70 <HAL_GPIO_Init+0x2b4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <HAL_GPIO_Init+0x1b8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_GPIO_Init+0x2b8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_GPIO_Init+0x1b4>
 800296c:	2302      	movs	r3, #2
 800296e:	e004      	b.n	800297a <HAL_GPIO_Init+0x1be>
 8002970:	2307      	movs	r3, #7
 8002972:	e002      	b.n	800297a <HAL_GPIO_Init+0x1be>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_GPIO_Init+0x1be>
 8002978:	2300      	movs	r3, #0
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	f002 0203 	and.w	r2, r2, #3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4093      	lsls	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800298a:	4938      	ldr	r1, [pc, #224]	; (8002a6c <HAL_GPIO_Init+0x2b0>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 80029c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029cc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_GPIO_Init+0x2bc>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f aeb7 	bne.w	80027cc <HAL_GPIO_Init+0x10>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	48000400 	.word	0x48000400
 8002a74:	48000800 	.word	0x48000800
 8002a78:	58000800 	.word	0x58000800

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	041a      	lsls	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	400b      	ands	r3, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e081      	b.n	8002bf2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff f900 	bl	8001d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e006      	b.n	8002b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d104      	bne.n	8002b76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80da 	bne.w	8002dd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x30>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0d3      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c34:	f7ff fa88 	bl	8002148 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 faec 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0be      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2bff      	cmp	r3, #255	; 0xff
 8002c86:	d90e      	bls.n	8002ca6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_I2C_Master_Transmit+0x1e0>)
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fc5e 	bl	8003560 <I2C_TransferConfig>
 8002ca4:	e06c      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	4b48      	ldr	r3, [pc, #288]	; (8002ddc <HAL_I2C_Master_Transmit+0x1e0>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fc4d 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cc6:	e05b      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6a39      	ldr	r1, [r7, #32]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fae9 	bl	80032a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e07b      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d034      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x184>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d130      	bne.n	8002d80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa7b 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e04d      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d90e      	bls.n	8002d60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fc01 	bl	8003560 <I2C_TransferConfig>
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbf0 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d19e      	bne.n	8002cc8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fac8 	bl	8003324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01a      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2220      	movs	r2, #32
 8002da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	80002000 	.word	0x80002000
 8002de0:	fe00e800 	.word	0xfe00e800

08002de4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	817b      	strh	r3, [r7, #10]
 8002df4:	4613      	mov	r3, r2
 8002df6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	f040 80db 	bne.w	8002fbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2C_Master_Receive+0x30>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0d4      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e1c:	f7ff f994 	bl	8002148 <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2319      	movs	r3, #25
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f9f8 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0bf      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2222      	movs	r2, #34	; 0x22
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	893a      	ldrh	r2, [r7, #8]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2bff      	cmp	r3, #255	; 0xff
 8002e6e:	d90e      	bls.n	8002e8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fb6a 	bl	8003560 <I2C_TransferConfig>
 8002e8c:	e06d      	b.n	8002f6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fb59 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002eae:	e05c      	b.n	8002f6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	6a39      	ldr	r1, [r7, #32]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fa71 	bl	800339c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e07c      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d034      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x186>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d130      	bne.n	8002f6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f986 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e04d      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2bff      	cmp	r3, #255	; 0xff
 8002f2a:	d90e      	bls.n	8002f4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fb0c 	bl	8003560 <I2C_TransferConfig>
 8002f48:	e00f      	b.n	8002f6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fafb 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d19d      	bne.n	8002eb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f9d3 	bl	8003324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01a      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_I2C_Master_Receive+0x1e8>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	80002400 	.word	0x80002400
 8002fcc:	fe00e800 	.word	0xfe00e800

08002fd0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	f040 80f1 	bne.w	80031d4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003000:	d101      	bne.n	8003006 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x44>
 8003010:	2302      	movs	r3, #2
 8003012:	e0e0      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_I2C_IsDeviceReady+0x72>
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003040:	e004      	b.n	800304c <HAL_I2C_IsDeviceReady+0x7c>
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003052:	f7ff f879 	bl	8002148 <HAL_GetTick>
 8003056:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b20      	cmp	r3, #32
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003084:	e034      	b.n	80030f0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d01a      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7ff f85b 	bl	8002148 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <HAL_I2C_IsDeviceReady+0xd4>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e088      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_I2C_IsDeviceReady+0x12c>
 80030f6:	7fbb      	ldrb	r3, [r7, #30]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0c4      	beq.n	8003086 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d01a      	beq.n	8003140 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	2120      	movs	r1, #32
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f885 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e058      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2220      	movs	r2, #32
 800312a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e04a      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	2120      	movs	r1, #32
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f86a 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e03d      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2220      	movs	r2, #32
 8003168:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d118      	bne.n	80031a4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003180:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	2120      	movs	r1, #32
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f849 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e01c      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2220      	movs	r2, #32
 80031a2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	f63f af3b 	bhi.w	800302a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d103      	bne.n	80031fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d007      	beq.n	800321a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	619a      	str	r2, [r3, #24]
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003234:	e022      	b.n	800327c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d01e      	beq.n	800327c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe ff83 	bl	8002148 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d113      	bne.n	800327c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e00f      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	d0cd      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b0:	e02c      	b.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f8dc 	bl	8003474 <I2C_IsAcknowledgeFailed>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e02a      	b.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032cc:	d01e      	beq.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fe ff3b 	bl	8002148 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d1cb      	bne.n	80032b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	e028      	b.n	8003384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f89c 	bl	8003474 <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e026      	b.n	8003394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe feff 	bl	8002148 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e007      	b.n	8003394 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d1cf      	bne.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a8:	e055      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f860 	bl	8003474 <I2C_IsAcknowledgeFailed>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e053      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d129      	bne.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d105      	bne.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e03f      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e022      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe fe92 	bl	8002148 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d1a2      	bne.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	fe00e800 	.word	0xfe00e800

08003474 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d161      	bne.n	8003552 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800349c:	d02b      	beq.n	80034f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ac:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ae:	e022      	b.n	80034f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d01e      	beq.n	80034f6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fe46 	bl	8002148 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <I2C_IsAcknowledgeFailed+0x5a>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02e      	b.n	8003554 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d1d5      	bne.n	80034b0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2210      	movs	r2, #16
 800350a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2220      	movs	r2, #32
 8003512:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fe62 	bl	80031de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <I2C_IsAcknowledgeFailed+0xe8>)
 8003526:	400b      	ands	r3, r1
 8003528:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	4613      	mov	r3, r2
 8003570:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	0d5b      	lsrs	r3, r3, #21
 800357c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <I2C_TransferConfig+0x54>)
 8003582:	430b      	orrs	r3, r1
 8003584:	43db      	mvns	r3, r3
 8003586:	ea02 0103 	and.w	r1, r2, r3
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003590:	7a7b      	ldrb	r3, [r7, #9]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	431a      	orrs	r2, r3
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	03ff63ff 	.word	0x03ff63ff

080035b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d138      	bne.n	8003640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d8:	2302      	movs	r3, #2
 80035da:	e032      	b.n	8003642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	d139      	bne.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800366c:	2302      	movs	r3, #2
 800366e:	e033      	b.n	80036d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	; 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	58000400 	.word	0x58000400

08003700 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_PWREx_GetVoltageRange+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	58000400 	.word	0x58000400

08003718 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003728:	d101      	bne.n	800372e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	58000400 	.word	0x58000400

0800373c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d101      	bne.n	800378c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e0:	d101      	bne.n	80037e6 <LL_RCC_HSE_IsReady+0x18>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <LL_RCC_HSE_IsReady+0x1a>
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d101      	bne.n	8003840 <LL_RCC_HSI_IsReady+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_RCC_HSI_IsReady+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d101      	bne.n	800388a <LL_RCC_LSE_IsReady+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_RCC_LSE_IsReady+0x1a>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d101      	bne.n	80038ec <LL_RCC_LSI_IsReady+0x18>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <LL_RCC_LSI_IsReady+0x1a>
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d101      	bne.n	8003944 <LL_RCC_MSI_IsReady+0x16>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <LL_RCC_MSI_IsReady+0x18>
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d101      	bne.n	8003964 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003990:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a60:	f023 020f 	bic.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b86:	d101      	bne.n	8003b8c <LL_RCC_PLL_IsReady+0x18>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <LL_RCC_PLL_IsReady+0x1a>
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0303 	and.w	r3, r3, #3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d101      	bne.n	8003c08 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c26:	d101      	bne.n	8003c2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d101      	bne.n	8003c50 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c6c:	d101      	bne.n	8003c72 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8e:	d101      	bne.n	8003c94 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e38a      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	f7ff fe9a 	bl	80039ea <LL_RCC_GetSysClkSource>
 8003cb6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb8:	f7ff ff8f 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8003cbc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80c9 	beq.w	8003e5e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x3e>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d17b      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d178      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	f7ff fe26 	bl	800392e <LL_RCC_MSI_IsReady>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x54>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e369      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x72>
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d10:	e006      	b.n	8003d20 <HAL_RCC_OscConfig+0x80>
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d222      	bcs.n	8003d6a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fdab 	bl	8004884 <RCC_SetFlashLatencyFromMSIRange>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e347      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d42:	f043 0308 	orr.w	r3, r3, #8
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fe1a 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>
 8003d68:	e021      	b.n	8003dae <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe01 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fd70 	bl	8004884 <RCC_SetFlashLatencyFromMSIRange>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e30c      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003dae:	f000 fcf3 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4ab4      	ldr	r2, [pc, #720]	; (8004088 <HAL_RCC_OscConfig+0x3e8>)
 8003db6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003db8:	4bb4      	ldr	r3, [pc, #720]	; (800408c <HAL_RCC_OscConfig+0x3ec>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe f85b 	bl	8001e78 <HAL_InitTick>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d047      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	e2fb      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dd8:	f7ff fd8d 	bl	80038f6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f9b4 	bl	8002148 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de4:	f7fe f9b0 	bl	8002148 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e2e8      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003df6:	f7ff fd9a 	bl	800392e <LL_RCC_MSI_IsReady>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f1      	beq.n	8003de4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fdb6 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>
 8003e30:	e015      	b.n	8003e5e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e32:	f7ff fd6e 	bl	8003912 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e36:	f7fe f987 	bl	8002148 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e3e:	f7fe f983 	bl	8002148 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e2bb      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e50:	f7ff fd6d 	bl	800392e <LL_RCC_MSI_IsReady>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f1      	bne.n	8003e3e <HAL_RCC_OscConfig+0x19e>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e5c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d05f      	beq.n	8003f2a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_OscConfig+0x1dc>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	f7ff fca7 	bl	80037ce <LL_RCC_HSE_IsReady>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d050      	beq.n	8003f28 <HAL_RCC_OscConfig+0x288>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d14c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e29a      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x218>
 8003eb2:	f7ff fc70 	bl	8003796 <LL_RCC_HSE_Enable>
 8003eb6:	e00d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x234>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003ec0:	d104      	bne.n	8003ecc <HAL_RCC_OscConfig+0x22c>
 8003ec2:	f7ff fc3b 	bl	800373c <LL_RCC_HSE_EnableTcxo>
 8003ec6:	f7ff fc66 	bl	8003796 <LL_RCC_HSE_Enable>
 8003eca:	e003      	b.n	8003ed4 <HAL_RCC_OscConfig+0x234>
 8003ecc:	f7ff fc71 	bl	80037b2 <LL_RCC_HSE_Disable>
 8003ed0:	f7ff fc42 	bl	8003758 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe f934 	bl	8002148 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f930 	bl	8002148 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e268      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ef6:	f7ff fc6a 	bl	80037ce <LL_RCC_HSE_IsReady>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f1      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x244>
 8003f00:	e013      	b.n	8003f2a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f02:	f7fe f921 	bl	8002148 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0a:	f7fe f91d 	bl	8002148 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e255      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f1c:	f7ff fc57 	bl	80037ce <LL_RCC_HSE_IsReady>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f1      	bne.n	8003f0a <HAL_RCC_OscConfig+0x26a>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d04b      	beq.n	8003fce <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2a8>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d113      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d110      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	f7ff fc6e 	bl	8003828 <LL_RCC_HSI_IsReady>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2be>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e234      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fc71 	bl	800384a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	e031      	b.n	8003fce <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d019      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f72:	f7ff fc3d 	bl	80037f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe f8e7 	bl	8002148 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f8e3 	bl	8002148 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e21b      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f90:	f7ff fc4a 	bl	8003828 <LL_RCC_HSI_IsReady>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f1      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fc53 	bl	800384a <LL_RCC_HSI_SetCalibTrimming>
 8003fa4:	e013      	b.n	8003fce <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa6:	f7ff fc31 	bl	800380c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fe f8cd 	bl	8002148 <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f8c9 	bl	8002148 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e201      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fc4:	f7ff fc30 	bl	8003828 <LL_RCC_HSI_IsReady>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f1      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d06e      	beq.n	80040b8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d056      	beq.n	8004090 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fea:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d031      	beq.n	800405e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1da      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800401c:	f7ff fc4a 	bl	80038b4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fe f892 	bl	8002148 <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004028:	f7fe f88e 	bl	8002148 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b11      	cmp	r3, #17
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1c6      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800403a:	f7ff fc4b 	bl	80038d4 <LL_RCC_LSI_IsReady>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f1      	bne.n	8004028 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	f023 0210 	bic.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405e:	f7ff fc19 	bl	8003894 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fe f871 	bl	8002148 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406a:	f7fe f86d 	bl	8002148 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b11      	cmp	r3, #17
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1a5      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800407c:	f7ff fc2a 	bl	80038d4 <LL_RCC_LSI_IsReady>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f1      	beq.n	800406a <HAL_RCC_OscConfig+0x3ca>
 8004086:	e017      	b.n	80040b8 <HAL_RCC_OscConfig+0x418>
 8004088:	20000004 	.word	0x20000004
 800408c:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	f7ff fc10 	bl	80038b4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fe f858 	bl	8002148 <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fe f854 	bl	8002148 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b11      	cmp	r3, #17
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e18c      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80040ae:	f7ff fc11 	bl	80038d4 <LL_RCC_LSI_IsReady>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f1      	bne.n	800409c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80d8 	beq.w	8004276 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040c6:	f7ff fb27 	bl	8003718 <LL_PWR_IsEnabledBkUpAccess>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d113      	bne.n	80040f8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040d0:	f7ff fb08 	bl	80036e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d4:	f7fe f838 	bl	8002148 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fe f834 	bl	8002148 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e16c      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040ee:	f7ff fb13 	bl	8003718 <LL_PWR_IsEnabledBkUpAccess>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f1      	beq.n	80040dc <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d07b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b85      	cmp	r3, #133	; 0x85
 8004106:	d003      	beq.n	8004110 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b05      	cmp	r3, #5
 800410e:	d109      	bne.n	8004124 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fe f810 	bl	8002148 <HAL_GetTick>
 8004128:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe f802 	bl	8002148 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e138      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004156:	f7ff fb8c 	bl	8003872 <LL_RCC_LSE_IsReady>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b81      	cmp	r3, #129	; 0x81
 8004166:	d003      	beq.n	8004170 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b85      	cmp	r3, #133	; 0x85
 800416e:	d121      	bne.n	80041b4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd ffea 	bl	8002148 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fd ffdc 	bl	8002148 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e112      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ec      	beq.n	800418c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80041b2:	e060      	b.n	8004276 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd ffc8 	bl	8002148 <HAL_GetTick>
 80041b8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd ffba 	bl	8002148 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0f0      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ec      	bne.n	80041d0 <HAL_RCC_OscConfig+0x530>
 80041f6:	e03e      	b.n	8004276 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd ffa6 	bl	8002148 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7fd ff98 	bl	8002148 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0ce      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ec      	bne.n	8004214 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fd ff85 	bl	8002148 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd ff77 	bl	8002148 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0ad      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800426c:	f7ff fb01 	bl	8003872 <LL_RCC_LSE_IsReady>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ef      	bne.n	8004256 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80a3 	beq.w	80043c6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d076      	beq.n	8004374 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	2b02      	cmp	r3, #2
 800428c:	d14b      	bne.n	8004326 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	f7ff fc63 	bl	8003b58 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd ff59 	bl	8002148 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429a:	f7fd ff55 	bl	8002148 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b0a      	cmp	r3, #10
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e08d      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80042ac:	f7ff fc62 	bl	8003b74 <LL_RCC_PLL_IsReady>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f1      	bne.n	800429a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_RCC_OscConfig+0x730>)
 80042be:	4013      	ands	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c8:	4311      	orrs	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042ce:	0212      	lsls	r2, r2, #8
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042e2:	430a      	orrs	r2, r1
 80042e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ec:	f7ff fc26 	bl	8003b3c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd ff22 	bl	8002148 <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fd ff1e 	bl	8002148 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b0a      	cmp	r3, #10
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e056      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800431a:	f7ff fc2b 	bl	8003b74 <LL_RCC_PLL_IsReady>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f1      	beq.n	8004308 <HAL_RCC_OscConfig+0x668>
 8004324:	e04f      	b.n	80043c6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	f7ff fc17 	bl	8003b58 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004334:	f023 0303 	bic.w	r3, r3, #3
 8004338:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004344:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd fefb 	bl	8002148 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004356:	f7fd fef7 	bl	8002148 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b0a      	cmp	r3, #10
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e02f      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004368:	f7ff fc04 	bl	8003b74 <LL_RCC_PLL_IsReady>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f1      	bne.n	8004356 <HAL_RCC_OscConfig+0x6b6>
 8004372:	e028      	b.n	80043c6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e023      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	429a      	cmp	r2, r3
 8004394:	d115      	bne.n	80043c2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d10e      	bne.n	80043c2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	11c1808c 	.word	0x11c1808c

080043d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e12c      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b98      	ldr	r3, [pc, #608]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d91b      	bls.n	800442e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b95      	ldr	r3, [pc, #596]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4993      	ldr	r1, [pc, #588]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fd fe9f 	bl	8002148 <HAL_GetTick>
 800440a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440c:	e008      	b.n	8004420 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800440e:	f7fd fe9b 	bl	8002148 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e110      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004420:	4b8a      	ldr	r3, [pc, #552]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d1ef      	bne.n	800440e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fade 	bl	8003a00 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004444:	f7fd fe80 	bl	8002148 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800444c:	f7fd fe7c 	bl	8002148 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0f1      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800445e:	f7ff fbc7 	bl	8003bf0 <LL_RCC_IsActiveFlag_HPRE>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f1      	beq.n	800444c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d016      	beq.n	80044a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fad4 	bl	8003a26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800447e:	f7fd fe63 	bl	8002148 <HAL_GetTick>
 8004482:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004486:	f7fd fe5f 	bl	8002148 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0d4      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004498:	f7ff fbbb 	bl	8003c12 <LL_RCC_IsActiveFlag_C2HPRE>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f1      	beq.n	8004486 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff facc 	bl	8003a50 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044b8:	f7fd fe46 	bl	8002148 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044c0:	f7fd fe42 	bl	8002148 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0b7      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044d2:	f7ff fbb0 	bl	8003c36 <LL_RCC_IsActiveFlag_SHDHPRE>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f1      	beq.n	80044c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fac5 	bl	8003a7c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044f2:	f7fd fe29 	bl	8002148 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044fa:	f7fd fe25 	bl	8002148 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e09a      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800450c:	f7ff fba5 	bl	8003c5a <LL_RCC_IsActiveFlag_PPRE1>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f1      	beq.n	80044fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff faba 	bl	8003aa2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800452e:	f7fd fe0b 	bl	8002148 <HAL_GetTick>
 8004532:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004536:	f7fd fe07 	bl	8002148 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e07c      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004548:	f7ff fb98 	bl	8003c7c <LL_RCC_IsActiveFlag_PPRE2>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f1      	beq.n	8004536 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d043      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d106      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004566:	f7ff f932 	bl	80037ce <LL_RCC_HSE_IsReady>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11e      	bne.n	80045ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e066      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d106      	bne.n	800458a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800457c:	f7ff fafa 	bl	8003b74 <LL_RCC_PLL_IsReady>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d113      	bne.n	80045ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e05b      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004592:	f7ff f9cc 	bl	800392e <LL_RCC_MSI_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e050      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045a0:	f7ff f942 	bl	8003828 <LL_RCC_HSI_IsReady>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e049      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa06 	bl	80039c4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fd fdc6 	bl	8002148 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fd fdc2 	bl	8002148 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e035      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	f7ff fa08 	bl	80039ea <LL_RCC_GetSysClkSource>
 80045da:	4602      	mov	r2, r0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d1ec      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d21b      	bcs.n	800462c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 0207 	bic.w	r2, r3, #7
 80045fc:	4913      	ldr	r1, [pc, #76]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fd fda0 	bl	8002148 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	e008      	b.n	800461e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800460c:	f7fd fd9c 	bl	8002148 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e011      	b.n	8004642 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x278>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ef      	bne.n	800460c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800462c:	f000 f8b4 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 8004630:	4603      	mov	r3, r0
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <HAL_RCC_ClockConfig+0x27c>)
 8004634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_RCC_ClockConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd fc1c 	bl	8001e78 <HAL_InitTick>
 8004640:	4603      	mov	r3, r0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	58004000 	.word	0x58004000
 8004650:	20000004 	.word	0x20000004
 8004654:	20000008 	.word	0x20000008

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004666:	f7ff f9c0 	bl	80039ea <LL_RCC_GetSysClkSource>
 800466a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466c:	f7ff fab5 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8004670:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d139      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d136      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004684:	f7ff f963 	bl	800394e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d115      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0x62>
 800468e:	f7ff f95e 	bl	800394e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d106      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8004698:	f7ff f969 	bl	800396e <LL_RCC_MSI_GetRange>
 800469c:	4603      	mov	r3, r0
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	e005      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80046a6:	f7ff f96d 	bl	8003984 <LL_RCC_MSI_GetRangeAfterStandby>
 80046aa:	4603      	mov	r3, r0
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	4a36      	ldr	r2, [pc, #216]	; (800478c <HAL_RCC_GetSysClockFreq+0x134>)
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	e014      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80046ba:	f7ff f948 	bl	800394e <LL_RCC_MSI_IsEnabledRangeSelect>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80046c4:	f7ff f953 	bl	800396e <LL_RCC_MSI_GetRange>
 80046c8:	4603      	mov	r3, r0
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	e005      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x86>
 80046d2:	f7ff f957 	bl	8003984 <LL_RCC_MSI_GetRangeAfterStandby>
 80046d6:	4603      	mov	r3, r0
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <HAL_RCC_GetSysClockFreq+0x134>)
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d115      	bne.n	8004718 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046f0:	e012      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d102      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_RCC_GetSysClockFreq+0x138>)
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e00c      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d109      	bne.n	8004718 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004704:	f7ff f836 	bl	8003774 <LL_RCC_HSE_IsEnabledDiv2>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_RCC_GetSysClockFreq+0x138>)
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e001      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004716:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004718:	f7ff f967 	bl	80039ea <LL_RCC_GetSysClkSource>
 800471c:	4603      	mov	r3, r0
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d12f      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004722:	f7ff fa5a 	bl	8003bda <LL_RCC_PLL_GetMainSource>
 8004726:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0xde>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d003      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xe4>
 8004734:	e00d      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_RCC_GetSysClockFreq+0x138>)
 8004738:	60fb      	str	r3, [r7, #12]
        break;
 800473a:	e00d      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800473c:	f7ff f81a 	bl	8003774 <LL_RCC_HSE_IsEnabledDiv2>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d102      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCC_GetSysClockFreq+0x138>)
 8004748:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_RCC_GetSysClockFreq+0x13c>)
 800474e:	60fb      	str	r3, [r7, #12]
        break;
 8004750:	e002      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	60fb      	str	r3, [r7, #12]
        break;
 8004756:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004758:	f7ff fa1d 	bl	8003b96 <LL_RCC_PLL_GetN>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	fb03 f402 	mul.w	r4, r3, r2
 8004764:	f7ff fa2e 	bl	8003bc4 <LL_RCC_PLL_GetDivider>
 8004768:	4603      	mov	r3, r0
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	3301      	adds	r3, #1
 800476e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004772:	f7ff fa1c 	bl	8003bae <LL_RCC_PLL_GetR>
 8004776:	4603      	mov	r3, r0
 8004778:	0f5b      	lsrs	r3, r3, #29
 800477a:	3301      	adds	r3, #1
 800477c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004780:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004782:	697b      	ldr	r3, [r7, #20]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}
 800478c:	0800dcfc 	.word	0x0800dcfc
 8004790:	00f42400 	.word	0x00f42400
 8004794:	01e84800 	.word	0x01e84800

08004798 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b598      	push	{r3, r4, r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800479c:	f7ff ff5c 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 80047a0:	4604      	mov	r4, r0
 80047a2:	f7ff f991 	bl	8003ac8 <LL_RCC_GetAHBPrescaler>
 80047a6:	4603      	mov	r3, r0
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	4a03      	ldr	r2, [pc, #12]	; (80047bc <HAL_RCC_GetHCLKFreq+0x24>)
 80047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd98      	pop	{r3, r4, r7, pc}
 80047bc:	0800dc9c 	.word	0x0800dc9c

080047c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b598      	push	{r3, r4, r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047c4:	f7ff ffe8 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047c8:	4604      	mov	r4, r0
 80047ca:	f7ff f9a1 	bl	8003b10 <LL_RCC_GetAPB1Prescaler>
 80047ce:	4603      	mov	r3, r0
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd98      	pop	{r3, r4, r7, pc}
 80047e0:	0800dcdc 	.word	0x0800dcdc

080047e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b598      	push	{r3, r4, r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80047e8:	f7ff ffd6 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047ec:	4604      	mov	r4, r0
 80047ee:	f7ff f99a 	bl	8003b26 <LL_RCC_GetAPB2Prescaler>
 80047f2:	4603      	mov	r3, r0
 80047f4:	0adb      	lsrs	r3, r3, #11
 80047f6:	4a03      	ldr	r2, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd98      	pop	{r3, r4, r7, pc}
 8004804:	0800dcdc 	.word	0x0800dcdc

08004808 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02f      	beq.n	8004878 <HAL_RCC_GetClockConfig+0x70>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02c      	beq.n	8004878 <HAL_RCC_GetClockConfig+0x70>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	224f      	movs	r2, #79	; 0x4f
 8004822:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004830:	f7ff f8db 	bl	80039ea <LL_RCC_GetSysClkSource>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800483a:	f7ff f945 	bl	8003ac8 <LL_RCC_GetAHBPrescaler>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004844:	f7ff f964 	bl	8003b10 <LL_RCC_GetAPB1Prescaler>
 8004848:	4602      	mov	r2, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800484e:	f7ff f96a 	bl	8003b26 <LL_RCC_GetAPB2Prescaler>
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004858:	f7ff f941 	bl	8003ade <LL_C2_RCC_GetAHBPrescaler>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 8004862:	f7ff f948 	bl	8003af6 <LL_RCC_GetAHB3Prescaler>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_RCC_GetClockConfig+0x78>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0207 	and.w	r2, r3, #7
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	601a      	str	r2, [r3, #0]
  }
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	58004000 	.word	0x58004000

08004884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800489c:	f7ff f92b 	bl	8003af6 <LL_RCC_GetAHB3Prescaler>
 80048a0:	4603      	mov	r3, r0
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0c9c      	lsrs	r4, r3, #18
 80048c0:	f7fe ff1e 	bl	8003700 <HAL_PWREx_GetVoltageRange>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4619      	mov	r1, r3
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 f80b 	bl	80048e4 <RCC_SetFlashLatency>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}
 80048d8:	0800dcfc 	.word	0x0800dcfc
 80048dc:	0800dc9c 	.word	0x0800dc9c
 80048e0:	431bde83 	.word	0x431bde83

080048e4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	; 0x38
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80048ee:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <RCC_SetFlashLatency+0xfc>)
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f8:	6018      	str	r0, [r3, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80048fe:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <RCC_SetFlashLatency+0x100>)
 8004900:	f107 0318 	add.w	r3, r7, #24
 8004904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	3304      	adds	r3, #4
 800490c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800490e:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <RCC_SetFlashLatency+0x104>)
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	ca07      	ldmia	r2, {r0, r1, r2}
 8004916:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800491a:	2300      	movs	r3, #0
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d11d      	bne.n	8004962 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004926:	2300      	movs	r3, #0
 8004928:	633b      	str	r3, [r7, #48]	; 0x30
 800492a:	e016      	b.n	800495a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004934:	4413      	add	r3, r2
 8004936:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4293      	cmp	r3, r2
 8004940:	d808      	bhi.n	8004954 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800494a:	4413      	add	r3, r2
 800494c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004952:	e023      	b.n	800499c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	3301      	adds	r3, #1
 8004958:	633b      	str	r3, [r7, #48]	; 0x30
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b02      	cmp	r3, #2
 800495e:	d9e5      	bls.n	800492c <RCC_SetFlashLatency+0x48>
 8004960:	e01c      	b.n	800499c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004962:	2300      	movs	r3, #0
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	e016      	b.n	8004996 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004970:	4413      	add	r3, r2
 8004972:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4293      	cmp	r3, r2
 800497c:	d808      	bhi.n	8004990 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004986:	4413      	add	r3, r2
 8004988:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800498e:	e005      	b.n	800499c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	3301      	adds	r3, #1
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b02      	cmp	r3, #2
 800499a:	d9e5      	bls.n	8004968 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <RCC_SetFlashLatency+0x108>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 0207 	bic.w	r2, r3, #7
 80049a4:	4911      	ldr	r1, [pc, #68]	; (80049ec <RCC_SetFlashLatency+0x108>)
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049ac:	f7fd fbcc 	bl	8002148 <HAL_GetTick>
 80049b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049b2:	e008      	b.n	80049c6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049b4:	f7fd fbc8 	bl	8002148 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e007      	b.n	80049d6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <RCC_SetFlashLatency+0x108>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1ef      	bne.n	80049b4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3738      	adds	r7, #56	; 0x38
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	0800dbec 	.word	0x0800dbec
 80049e4:	0800dbf4 	.word	0x0800dbf4
 80049e8:	0800dbfc 	.word	0x0800dbfc
 80049ec:	58004000 	.word	0x58004000

080049f0 <LL_RCC_LSE_IsReady>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d101      	bne.n	8004a08 <LL_RCC_LSE_IsReady+0x18>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <LL_RCC_LSE_IsReady+0x1a>
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_SetUSARTClockSource>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	43db      	mvns	r3, r3
 8004a28:	401a      	ands	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_SetI2SClockSource>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_SetLPUARTClockSource>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <LL_RCC_SetI2CClockSource>:
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_SetLPTIMClockSource>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_SetRNGClockSource>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <LL_RCC_SetADCClockSource>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <LL_RCC_SetRTCClockSource>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <LL_RCC_GetRTCClockSource>:
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <LL_RCC_ForceBackupDomainReset>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d058      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004bf8:	f7fe fd74 	bl	80036e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bfc:	f7fd faa4 	bl	8002148 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004c02:	e009      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd faa0 	bl	8002148 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d902      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	74fb      	strb	r3, [r7, #19]
        break;
 8004c16:	e006      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004c18:	4b7b      	ldr	r3, [pc, #492]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d1ee      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d13c      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004c2c:	f7ff ffa7 	bl	8004b7e <LL_RCC_GetRTCClockSource>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d00f      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c48:	f7ff ffa5 	bl	8004b96 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4c:	f7ff ffb3 	bl	8004bb6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d014      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fd fa70 	bl	8002148 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fa6c 	bl	8002148 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d902      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	74fb      	strb	r3, [r7, #19]
            break;
 8004c82:	e004      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c84:	f7ff feb4 	bl	80049f0 <LL_RCC_LSE_IsReady>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d1ee      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff5b 	bl	8004b54 <LL_RCC_SetRTCClockSource>
 8004c9e:	e004      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	74bb      	strb	r3, [r7, #18]
 8004ca4:	e001      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fea9 	bl	8004a12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fe9e 	bl	8004a12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fec0 	bl	8004a6c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fee6 	bl	8004ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fedb 	bl	8004ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fed0 	bl	8004ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fea9 	bl	8004a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fe9e 	bl	8004a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fe93 	bl	8004a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fe5e 	bl	8004a42 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fea5 	bl	8004b00 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dcc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d011      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fea3 	bl	8004b2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dec:	d107      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004dfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	58000400 	.word	0x58000400

08004e0c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e1c:	4904      	ldr	r1, [pc, #16]	; (8004e30 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	58000400 	.word	0x58000400

08004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	58000400 	.word	0x58000400

08004e54 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	58000400 	.word	0x58000400

08004e74 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7e:	619a      	str	r2, [r3, #24]
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	58000400 	.word	0x58000400

08004e8c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d101      	bne.n	8004ea0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	58000400 	.word	0x58000400

08004eb0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d101      	bne.n	8004ec4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	58000400 	.word	0x58000400

08004ed4 <LL_RCC_RF_DisableReset>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_IsRFUnderReset>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f08:	d101      	bne.n	8004f0e <LL_RCC_IsRFUnderReset+0x1a>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <LL_RCC_IsRFUnderReset+0x1c>
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <LL_EXTI_EnableIT_32_63+0x24>)
 8004f22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004f26:	4905      	ldr	r1, [pc, #20]	; (8004f3c <LL_EXTI_EnableIT_32_63+0x24>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	58000800 	.word	0x58000800

08004f40 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
    return status;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	e04b      	b.n	8004fee <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	799b      	ldrb	r3, [r3, #6]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc ff58 	bl	8001e20 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004f76:	f7ff ffad 	bl	8004ed4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <HAL_SUBGHZ_Init+0xb8>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	0cdb      	lsrs	r3, r3, #19
 8004f88:	2264      	movs	r2, #100	; 0x64
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	609a      	str	r2, [r3, #8]
      break;
 8004fa0:	e007      	b.n	8004fb2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004fa8:	f7ff ffa4 	bl	8004ef4 <LL_RCC_IsRFUnderReset>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8004fb2:	f7ff ff3f 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004fb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fba:	f7ff ffad 	bl	8004f18 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004fbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fc2:	f7ff ff23 	bl	8004e0c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004fc6:	f7ff ff55 	bl	8004e74 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 faad 	bl	8005534 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	719a      	strb	r2, [r3, #6]

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000004 	.word	0x20000004

08004ffc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	799b      	ldrb	r3, [r3, #6]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d14a      	bne.n	80050b0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005022:	2302      	movs	r3, #2
 8005024:	e045      	b.n	80050b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2202      	movs	r2, #2
 8005030:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fb4c 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005038:	f7ff ff0c 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800503c:	210d      	movs	r1, #13
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa98 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	4619      	mov	r1, r3
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa90 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005054:	897b      	ldrh	r3, [r7, #10]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa8a 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	82bb      	strh	r3, [r7, #20]
 8005064:	e00a      	b.n	800507c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005066:	8abb      	ldrh	r3, [r7, #20]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fa7f 	bl	8005574 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005076:	8abb      	ldrh	r3, [r7, #20]
 8005078:	3301      	adds	r3, #1
 800507a:	82bb      	strh	r3, [r7, #20]
 800507c:	8aba      	ldrh	r2, [r7, #20]
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3f0      	bcc.n	8005066 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005084:	f7ff fed6 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fb45 	bl	8005718 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
 800509a:	e001      	b.n	80050a0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	715a      	strb	r2, [r3, #5]

    return status;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	e000      	b.n	80050b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b088      	sub	sp, #32
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	461a      	mov	r2, r3
 80050c6:	460b      	mov	r3, r1
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	4613      	mov	r3, r2
 80050cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	799b      	ldrb	r3, [r3, #6]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d14a      	bne.n	8005172 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	795b      	ldrb	r3, [r3, #5]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e045      	b.n	8005174 <HAL_SUBGHZ_ReadRegisters+0xba>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 faee 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80050f4:	f7ff feae 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80050f8:	211d      	movs	r1, #29
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fa3a 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005100:	897b      	ldrh	r3, [r7, #10]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4619      	mov	r1, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa32 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005110:	897b      	ldrh	r3, [r7, #10]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fa2c 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800511c:	2100      	movs	r1, #0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa28 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	82fb      	strh	r3, [r7, #22]
 8005128:	e009      	b.n	800513e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa77 	bl	8005620 <SUBGHZSPI_Receive>
      pData++;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3301      	adds	r3, #1
 8005136:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	3301      	adds	r3, #1
 800513c:	82fb      	strh	r3, [r7, #22]
 800513e:	8afa      	ldrh	r2, [r7, #22]
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3f1      	bcc.n	800512a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005146:	f7ff fe75 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fae4 	bl	8005718 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e001      	b.n	8005162 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	715a      	strb	r2, [r3, #5]

    return status;
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	e000      	b.n	8005174 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	461a      	mov	r2, r3
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
 800518c:	4613      	mov	r3, r2
 800518e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	799b      	ldrb	r3, [r3, #6]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d14a      	bne.n	8005230 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	795b      	ldrb	r3, [r3, #5]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e045      	b.n	8005232 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa8f 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	2b84      	cmp	r3, #132	; 0x84
 80051b6:	d002      	beq.n	80051be <HAL_SUBGHZ_ExecSetCmd+0x42>
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	2b94      	cmp	r3, #148	; 0x94
 80051bc:	d103      	bne.n	80051c6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	711a      	strb	r2, [r3, #4]
 80051c4:	e002      	b.n	80051cc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80051cc:	f7ff fe42 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f9cd 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	82bb      	strh	r3, [r7, #20]
 80051de:	e00a      	b.n	80051f6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80051e0:	8abb      	ldrh	r3, [r7, #20]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f9c2 	bl	8005574 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80051f0:	8abb      	ldrh	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	82bb      	strh	r3, [r7, #20]
 80051f6:	8aba      	ldrh	r2, [r7, #20]
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3f0      	bcc.n	80051e0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80051fe:	f7ff fe19 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	2b84      	cmp	r3, #132	; 0x84
 8005206:	d002      	beq.n	800520e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fa85 	bl	8005718 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
 800521a:	e001      	b.n	8005220 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	715a      	strb	r2, [r3, #5]

    return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	e000      	b.n	8005232 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	461a      	mov	r2, r3
 8005246:	460b      	mov	r3, r1
 8005248:	72fb      	strb	r3, [r7, #11]
 800524a:	4613      	mov	r3, r2
 800524c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	799b      	ldrb	r3, [r3, #6]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d13d      	bne.n	80052d8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	795b      	ldrb	r3, [r3, #5]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005264:	2302      	movs	r3, #2
 8005266:	e038      	b.n	80052da <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fa2e 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005274:	f7ff fdee 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005278:	7afb      	ldrb	r3, [r7, #11]
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f979 	bl	8005574 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005282:	2100      	movs	r1, #0
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f975 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	82fb      	strh	r3, [r7, #22]
 800528e:	e009      	b.n	80052a4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f9c4 	bl	8005620 <SUBGHZSPI_Receive>
      pData++;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	3301      	adds	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	3301      	adds	r3, #1
 80052a2:	82fb      	strh	r3, [r7, #22]
 80052a4:	8afa      	ldrh	r2, [r7, #22]
 80052a6:	893b      	ldrh	r3, [r7, #8]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3f1      	bcc.n	8005290 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80052ac:	f7ff fdc2 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa31 	bl	8005718 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e001      	b.n	80052c8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	715a      	strb	r2, [r3, #5]

    return status;
 80052d4:	7ffb      	ldrb	r3, [r7, #31]
 80052d6:	e000      	b.n	80052da <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	72fb      	strb	r3, [r7, #11]
 80052f2:	4613      	mov	r3, r2
 80052f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	799b      	ldrb	r3, [r3, #6]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d13e      	bne.n	800537e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	795b      	ldrb	r3, [r3, #5]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005308:	2302      	movs	r3, #2
 800530a:	e039      	b.n	8005380 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9dc 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005318:	f7ff fd9c 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800531c:	210e      	movs	r1, #14
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f928 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f923 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	82bb      	strh	r3, [r7, #20]
 8005332:	e00a      	b.n	800534a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005334:	8abb      	ldrh	r3, [r7, #20]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f918 	bl	8005574 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005344:	8abb      	ldrh	r3, [r7, #20]
 8005346:	3301      	adds	r3, #1
 8005348:	82bb      	strh	r3, [r7, #20]
 800534a:	8aba      	ldrh	r2, [r7, #20]
 800534c:	893b      	ldrh	r3, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3f0      	bcc.n	8005334 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005352:	f7ff fd6f 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f9de 	bl	8005718 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
 8005368:	e001      	b.n	800536e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	715a      	strb	r2, [r3, #5]

    return status;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	e000      	b.n	8005380 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	460b      	mov	r3, r1
 8005396:	72fb      	strb	r3, [r7, #11]
 8005398:	4613      	mov	r3, r2
 800539a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	799b      	ldrb	r3, [r3, #6]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d141      	bne.n	800542e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	795b      	ldrb	r3, [r3, #5]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e03c      	b.n	8005430 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f987 	bl	80056d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80053c2:	f7ff fd47 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80053c6:	211e      	movs	r1, #30
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f8d3 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f8ce 	bl	8005574 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80053d8:	2100      	movs	r1, #0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f8ca 	bl	8005574 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	82fb      	strh	r3, [r7, #22]
 80053e4:	e009      	b.n	80053fa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f919 	bl	8005620 <SUBGHZSPI_Receive>
      pData++;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	3301      	adds	r3, #1
 80053f2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80053f4:	8afb      	ldrh	r3, [r7, #22]
 80053f6:	3301      	adds	r3, #1
 80053f8:	82fb      	strh	r3, [r7, #22]
 80053fa:	8afa      	ldrh	r2, [r7, #22]
 80053fc:	893b      	ldrh	r3, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3f1      	bcc.n	80053e6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005402:	f7ff fd17 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f986 	bl	8005718 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e001      	b.n	800541e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	715a      	strb	r2, [r3, #5]

    return status;
 800542a:	7ffb      	ldrb	r3, [r7, #31]
 800542c:	e000      	b.n	8005430 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8005440:	2300      	movs	r3, #0
 8005442:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8005444:	f107 020c 	add.w	r2, r7, #12
 8005448:	2302      	movs	r3, #2
 800544a:	2112      	movs	r1, #18
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fef4 	bl	800523a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8005452:	7b3b      	ldrb	r3, [r7, #12]
 8005454:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	b21a      	sxth	r2, r3
 800545c:	7b7b      	ldrb	r3, [r7, #13]
 800545e:	b21b      	sxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b21b      	sxth	r3, r3
 8005464:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f007 fc41 	bl	800ccf8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f007 fc46 	bl	800cd14 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f007 fc95 	bl	800cdc4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800549a:	89fb      	ldrh	r3, [r7, #14]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f007 fc9a 	bl	800cde0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80054ac:	89fb      	ldrh	r3, [r7, #14]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f007 fc9f 	bl	800cdfc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f007 fc6c 	bl	800cda8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	099b      	lsrs	r3, r3, #6
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f007 fc27 	bl	800cd30 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80054e2:	89fb      	ldrh	r3, [r7, #14]
 80054e4:	09db      	lsrs	r3, r3, #7
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80054fa:	2101      	movs	r1, #1
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f007 fc25 	bl	800cd4c <HAL_SUBGHZ_CADStatusCallback>
 8005502:	e003      	b.n	800550c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005504:	2100      	movs	r1, #0
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f007 fc20 	bl	800cd4c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	0a5b      	lsrs	r3, r3, #9
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f007 fc35 	bl	800cd88 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800551e:	f107 020c 	add.w	r2, r7, #12
 8005522:	2302      	movs	r3, #2
 8005524:	2102      	movs	r1, #2
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff fe28 	bl	800517c <HAL_SUBGHZ_ExecSetCmd>
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0b      	ldr	r2, [pc, #44]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005550:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 8005554:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005558:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a04      	ldr	r2, [pc, #16]	; (8005570 <SUBGHZSPI_Init+0x3c>)
 8005560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005564:	6013      	str	r3, [r2, #0]
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	58010000 	.word	0x58010000

08005574 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005584:	4b23      	ldr	r3, [pc, #140]	; (8005614 <SUBGHZSPI_Transmit+0xa0>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	0cdb      	lsrs	r3, r3, #19
 8005592:	2264      	movs	r2, #100	; 0x64
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	609a      	str	r2, [r3, #8]
      break;
 80055aa:	e008      	b.n	80055be <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80055b2:	4b19      	ldr	r3, [pc, #100]	; (8005618 <SUBGHZSPI_Transmit+0xa4>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d1ed      	bne.n	800559a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <SUBGHZSPI_Transmit+0xa8>)
 80055c0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <SUBGHZSPI_Transmit+0xa0>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	0cdb      	lsrs	r3, r3, #19
 80055d6:	2264      	movs	r2, #100	; 0x64
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	609a      	str	r2, [r3, #8]
      break;
 80055ee:	e008      	b.n	8005602 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <SUBGHZSPI_Transmit+0xa4>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d1ed      	bne.n	80055de <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SUBGHZSPI_Transmit+0xa4>)
 8005604:	68db      	ldr	r3, [r3, #12]

  return status;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000004 	.word	0x20000004
 8005618:	58010000 	.word	0x58010000
 800561c:	5801000c 	.word	0x5801000c

08005620 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800562e:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <SUBGHZSPI_Receive+0xa4>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	0cdb      	lsrs	r3, r3, #19
 800563c:	2264      	movs	r2, #100	; 0x64
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d105      	bne.n	8005656 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	609a      	str	r2, [r3, #8]
      break;
 8005654:	e008      	b.n	8005668 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b01      	subs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <SUBGHZSPI_Receive+0xa8>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d1ed      	bne.n	8005644 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005668:	4b18      	ldr	r3, [pc, #96]	; (80056cc <SUBGHZSPI_Receive+0xac>)
 800566a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	22ff      	movs	r2, #255	; 0xff
 8005670:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <SUBGHZSPI_Receive+0xa4>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	0cdb      	lsrs	r3, r3, #19
 8005680:	2264      	movs	r2, #100	; 0x64
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	609a      	str	r2, [r3, #8]
      break;
 8005698:	e008      	b.n	80056ac <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3b01      	subs	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <SUBGHZSPI_Receive+0xa8>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d1ed      	bne.n	8005688 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <SUBGHZSPI_Receive+0xa8>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	701a      	strb	r2, [r3, #0]

  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000004 	.word	0x20000004
 80056c8:	58010000 	.word	0x58010000
 80056cc:	5801000c 	.word	0x5801000c

080056d0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d111      	bne.n	8005704 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <SUBGHZ_CheckDeviceReady+0x44>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80056f0:	f7ff fbb0 	bl	8004e54 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f9      	bne.n	80056f4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005700:	f7ff fb98 	bl	8004e34 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f807 	bl	8005718 <SUBGHZ_WaitOnBusy>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000004 	.word	0x20000004

08005718 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <SUBGHZ_WaitOnBusy+0x58>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	0d1b      	lsrs	r3, r3, #20
 8005732:	2264      	movs	r2, #100	; 0x64
 8005734:	fb02 f303 	mul.w	r3, r2, r3
 8005738:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800573a:	f7ff fbb9 	bl	8004eb0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800573e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d105      	bne.n	8005752 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	609a      	str	r2, [r3, #8]
      break;
 8005750:	e009      	b.n	8005766 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b01      	subs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005758:	f7ff fb98 	bl	8004e8c <LL_PWR_IsActiveFlag_RFBUSYS>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	2b01      	cmp	r3, #1
 8005764:	d0e9      	beq.n	800573a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005766:	7dfb      	ldrb	r3, [r7, #23]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000004 	.word	0x20000004

08005774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e049      	b.n	800581a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f841 	bl	8005822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 f9ce 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d001      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e036      	b.n	80058ba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <HAL_TIM_Base_Start_IT+0x90>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x44>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d115      	bne.n	80058a4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <HAL_TIM_Base_Start_IT+0x94>)
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d015      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x82>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d011      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e008      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	00010007 	.word	0x00010007

080058cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0202 	mvn.w	r2, #2
 80058f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f904 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8f7 	bl	8005b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f906 	bl	8005b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b04      	cmp	r3, #4
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0204 	mvn.w	r2, #4
 800594c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8da 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8cd 	bl	8005b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8dc 	bl	8005b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b08      	cmp	r3, #8
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0208 	mvn.w	r2, #8
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8b0 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8a3 	bl	8005b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8b2 	bl	8005b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0210 	mvn.w	r2, #16
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2208      	movs	r2, #8
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f886 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f879 	bl	8005b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f888 	bl	8005b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0201 	mvn.w	r2, #1
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fc f86a 	bl	8001b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8d7 	bl	8005c2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d10e      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b80      	cmp	r3, #128	; 0x80
 8005a98:	d107      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8c9 	bl	8005c3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d107      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f835 	bl	8005b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d10e      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d107      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0220 	mvn.w	r2, #32
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f88b 	bl	8005c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
	...

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0x20>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d108      	bne.n	8005b86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0x52>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0x52>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <TIM_Base_SetConfig+0xbc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0x52>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <TIM_Base_SetConfig+0xc0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0b      	ldr	r2, [pc, #44]	; (8005c0c <TIM_Base_SetConfig+0xb8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_Base_SetConfig+0xa0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <TIM_Base_SetConfig+0xbc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0xa0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <TIM_Base_SetConfig+0xc0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	615a      	str	r2, [r3, #20]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800

08005c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <LL_RCC_GetUSARTClockSource>:
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	401a      	ands	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4313      	orrs	r3, r2
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_GetLPUARTClockSource>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4013      	ands	r3, r2
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e042      	b.n	8005d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fc f86f 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2224      	movs	r2, #36	; 0x24
 8005cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f82c 	bl	8005d30 <UART_SetConfig>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e022      	b.n	8005d28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa70 	bl	80061d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 faf6 	bl	8006312 <UART_CheckIdleState>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d30:	b5b0      	push	{r4, r5, r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4bab      	ldr	r3, [pc, #684]	; (8006008 <UART_SetConfig+0x2d8>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	69f9      	ldr	r1, [r7, #28]
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4aa0      	ldr	r2, [pc, #640]	; (800600c <UART_SetConfig+0x2dc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005da2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	69f9      	ldr	r1, [r7, #28]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f023 010f 	bic.w	r1, r3, #15
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a91      	ldr	r2, [pc, #580]	; (8006010 <UART_SetConfig+0x2e0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d122      	bne.n	8005e16 <UART_SetConfig+0xe6>
 8005dd0:	2003      	movs	r0, #3
 8005dd2:	f7ff ff3c 	bl	8005c4e <LL_RCC_GetUSARTClockSource>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d817      	bhi.n	8005e10 <UART_SetConfig+0xe0>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0xb8>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005dff 	.word	0x08005dff
 8005df4:	08005e0b 	.word	0x08005e0b
 8005df8:	2301      	movs	r3, #1
 8005dfa:	76fb      	strb	r3, [r7, #27]
 8005dfc:	e072      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	76fb      	strb	r3, [r7, #27]
 8005e02:	e06f      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e04:	2304      	movs	r3, #4
 8005e06:	76fb      	strb	r3, [r7, #27]
 8005e08:	e06c      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	76fb      	strb	r3, [r7, #27]
 8005e0e:	e069      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e10:	2310      	movs	r3, #16
 8005e12:	76fb      	strb	r3, [r7, #27]
 8005e14:	e066      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7e      	ldr	r2, [pc, #504]	; (8006014 <UART_SetConfig+0x2e4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d134      	bne.n	8005e8a <UART_SetConfig+0x15a>
 8005e20:	200c      	movs	r0, #12
 8005e22:	f7ff ff14 	bl	8005c4e <LL_RCC_GetUSARTClockSource>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	d829      	bhi.n	8005e84 <UART_SetConfig+0x154>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x108>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e6d 	.word	0x08005e6d
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e85 	.word	0x08005e85
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005e85 	.word	0x08005e85
 8005e54:	08005e85 	.word	0x08005e85
 8005e58:	08005e73 	.word	0x08005e73
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e85 	.word	0x08005e85
 8005e68:	08005e7f 	.word	0x08005e7f
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	76fb      	strb	r3, [r7, #27]
 8005e70:	e038      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e72:	2302      	movs	r3, #2
 8005e74:	76fb      	strb	r3, [r7, #27]
 8005e76:	e035      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	76fb      	strb	r3, [r7, #27]
 8005e7c:	e032      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	76fb      	strb	r3, [r7, #27]
 8005e82:	e02f      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e84:	2310      	movs	r3, #16
 8005e86:	76fb      	strb	r3, [r7, #27]
 8005e88:	e02c      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a5f      	ldr	r2, [pc, #380]	; (800600c <UART_SetConfig+0x2dc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d125      	bne.n	8005ee0 <UART_SetConfig+0x1b0>
 8005e94:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005e98:	f7ff feeb 	bl	8005c72 <LL_RCC_GetLPUARTClockSource>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea2:	d017      	beq.n	8005ed4 <UART_SetConfig+0x1a4>
 8005ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea8:	d817      	bhi.n	8005eda <UART_SetConfig+0x1aa>
 8005eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eae:	d00b      	beq.n	8005ec8 <UART_SetConfig+0x198>
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb4:	d811      	bhi.n	8005eda <UART_SetConfig+0x1aa>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <UART_SetConfig+0x192>
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d006      	beq.n	8005ece <UART_SetConfig+0x19e>
 8005ec0:	e00b      	b.n	8005eda <UART_SetConfig+0x1aa>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	76fb      	strb	r3, [r7, #27]
 8005ec6:	e00d      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	76fb      	strb	r3, [r7, #27]
 8005ecc:	e00a      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	76fb      	strb	r3, [r7, #27]
 8005ed2:	e007      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	76fb      	strb	r3, [r7, #27]
 8005ed8:	e004      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005eda:	2310      	movs	r3, #16
 8005edc:	76fb      	strb	r3, [r7, #27]
 8005ede:	e001      	b.n	8005ee4 <UART_SetConfig+0x1b4>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a48      	ldr	r2, [pc, #288]	; (800600c <UART_SetConfig+0x2dc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f040 8098 	bne.w	8006020 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef0:	7efb      	ldrb	r3, [r7, #27]
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d823      	bhi.n	8005f3e <UART_SetConfig+0x20e>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x1cc>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f2f 	.word	0x08005f2f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f3f 	.word	0x08005f3f
 8005f18:	08005f3f 	.word	0x08005f3f
 8005f1c:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7fe fc4e 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8005f24:	6178      	str	r0, [r7, #20]
        break;
 8005f26:	e00f      	b.n	8005f48 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <UART_SetConfig+0x2e8>)
 8005f2a:	617b      	str	r3, [r7, #20]
        break;
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe fb93 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8005f32:	6178      	str	r0, [r7, #20]
        break;
 8005f34:	e008      	b.n	8005f48 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	617b      	str	r3, [r7, #20]
        break;
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	76bb      	strb	r3, [r7, #26]
        break;
 8005f46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8128 	beq.w	80061a0 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	4a31      	ldr	r2, [pc, #196]	; (800601c <UART_SetConfig+0x2ec>)
 8005f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d305      	bcc.n	8005f80 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d902      	bls.n	8005f86 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	76bb      	strb	r3, [r7, #26]
 8005f84:	e10c      	b.n	80061a0 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	4a22      	ldr	r2, [pc, #136]	; (800601c <UART_SetConfig+0x2ec>)
 8005f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	f7fa fef5 	bl	8000d8c <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	020b      	lsls	r3, r1, #8
 8005fb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb8:	0202      	lsls	r2, r0, #8
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	6849      	ldr	r1, [r1, #4]
 8005fbe:	0849      	lsrs	r1, r1, #1
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	f04f 0100 	mov.w	r1, #0
 8005fc6:	1814      	adds	r4, r2, r0
 8005fc8:	eb43 0501 	adc.w	r5, r3, r1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fed7 	bl	8000d8c <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fec:	d308      	bcc.n	8006000 <UART_SetConfig+0x2d0>
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff4:	d204      	bcs.n	8006000 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	e0cf      	b.n	80061a0 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	76bb      	strb	r3, [r7, #26]
 8006004:	e0cc      	b.n	80061a0 <UART_SetConfig+0x470>
 8006006:	bf00      	nop
 8006008:	cfff69f3 	.word	0xcfff69f3
 800600c:	40008000 	.word	0x40008000
 8006010:	40013800 	.word	0x40013800
 8006014:	40004400 	.word	0x40004400
 8006018:	00f42400 	.word	0x00f42400
 800601c:	0800dd68 	.word	0x0800dd68
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d165      	bne.n	80060f6 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800602a:	7efb      	ldrb	r3, [r7, #27]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d828      	bhi.n	8006082 <UART_SetConfig+0x352>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x308>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	0800605d 	.word	0x0800605d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006083 	.word	0x08006083
 8006048:	08006073 	.word	0x08006073
 800604c:	08006083 	.word	0x08006083
 8006050:	08006083 	.word	0x08006083
 8006054:	08006083 	.word	0x08006083
 8006058:	0800607b 	.word	0x0800607b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe fbb0 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8006060:	6178      	str	r0, [r7, #20]
        break;
 8006062:	e013      	b.n	800608c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe fbbe 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8006068:	6178      	str	r0, [r7, #20]
        break;
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <UART_SetConfig+0x498>)
 800606e:	617b      	str	r3, [r7, #20]
        break;
 8006070:	e00c      	b.n	800608c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006072:	f7fe faf1 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8006076:	6178      	str	r0, [r7, #20]
        break;
 8006078:	e008      	b.n	800608c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	617b      	str	r3, [r7, #20]
        break;
 8006080:	e004      	b.n	800608c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	76bb      	strb	r3, [r7, #26]
        break;
 800608a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8086 	beq.w	80061a0 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	4a4c      	ldr	r2, [pc, #304]	; (80061cc <UART_SetConfig+0x49c>)
 800609a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609e:	461a      	mov	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a6:	005a      	lsls	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	441a      	add	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d916      	bls.n	80060f0 <UART_SetConfig+0x3c0>
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c8:	d212      	bcs.n	80060f0 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	b29a      	uxth	r2, r3
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	89fa      	ldrh	r2, [r7, #14]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e057      	b.n	80061a0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	76bb      	strb	r3, [r7, #26]
 80060f4:	e054      	b.n	80061a0 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f6:	7efb      	ldrb	r3, [r7, #27]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d828      	bhi.n	800614e <UART_SetConfig+0x41e>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x3d4>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe fb4a 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 800612c:	6178      	str	r0, [r7, #20]
        break;
 800612e:	e013      	b.n	8006158 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe fb58 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8006134:	6178      	str	r0, [r7, #20]
        break;
 8006136:	e00f      	b.n	8006158 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b23      	ldr	r3, [pc, #140]	; (80061c8 <UART_SetConfig+0x498>)
 800613a:	617b      	str	r3, [r7, #20]
        break;
 800613c:	e00c      	b.n	8006158 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe fa8b 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8006142:	6178      	str	r0, [r7, #20]
        break;
 8006144:	e008      	b.n	8006158 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	617b      	str	r3, [r7, #20]
        break;
 800614c:	e004      	b.n	8006158 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	76bb      	strb	r3, [r7, #26]
        break;
 8006156:	bf00      	nop
    }

    if (pclk != 0U)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d020      	beq.n	80061a0 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <UART_SetConfig+0x49c>)
 8006164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006168:	461a      	mov	r2, r3
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	441a      	add	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d908      	bls.n	800619c <UART_SetConfig+0x46c>
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d204      	bcs.n	800619c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e001      	b.n	80061a0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bdb0      	pop	{r4, r5, r7, pc}
 80061c6:	bf00      	nop
 80061c8:	00f42400 	.word	0x00f42400
 80061cc:	0800dd68 	.word	0x0800dd68

080061d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d10a      	bne.n	80062e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af02      	add	r7, sp, #8
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006322:	f7fb ff11 	bl	8002148 <HAL_GetTick>
 8006326:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b08      	cmp	r3, #8
 8006334:	d10e      	bne.n	8006354 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f82f 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e025      	b.n	80063a0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d10e      	bne.n	8006380 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006362:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f819 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e00f      	b.n	80063a0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b09c      	sub	sp, #112	; 0x70
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b8:	e0a9      	b.n	800650e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c0:	f000 80a5 	beq.w	800650e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fb fec0 	bl	8002148 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <UART_WaitOnFlagUntilTimeout+0x32>
 80063d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d140      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ee:	667b      	str	r3, [r7, #100]	; 0x64
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063fa:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	663b      	str	r3, [r7, #96]	; 0x60
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800642c:	64ba      	str	r2, [r7, #72]	; 0x48
 800642e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800643a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e069      	b.n	8006530 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d051      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006478:	d149      	bne.n	800650e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006482:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e6      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	613b      	str	r3, [r7, #16]
   return(result);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064d6:	623a      	str	r2, [r7, #32]
 80064d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69f9      	ldr	r1, [r7, #28]
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e010      	b.n	8006530 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	429a      	cmp	r2, r3
 800652a:	f43f af46 	beq.w	80063ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3770      	adds	r7, #112	; 0x70
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UARTEx_DisableFifoMode+0x16>
 800654a:	2302      	movs	r3, #2
 800654c:	e027      	b.n	800659e <HAL_UARTEx_DisableFifoMode+0x66>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2224      	movs	r2, #36	; 0x24
 800655a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800657c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e02d      	b.n	800661c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	; 0x24
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f84f 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e02d      	b.n	8006698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f811 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d108      	bne.n	80066c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066c0:	e031      	b.n	8006726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066c2:	2308      	movs	r3, #8
 80066c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066c6:	2308      	movs	r3, #8
 80066c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	0e5b      	lsrs	r3, r3, #25
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0f5b      	lsrs	r3, r3, #29
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	7b3a      	ldrb	r2, [r7, #12]
 80066ee:	4910      	ldr	r1, [pc, #64]	; (8006730 <UARTEx_SetNbDataToProcess+0x90>)
 80066f0:	5c8a      	ldrb	r2, [r1, r2]
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066f6:	7b3a      	ldrb	r2, [r7, #12]
 80066f8:	490e      	ldr	r1, [pc, #56]	; (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 80066fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	7b7a      	ldrb	r2, [r7, #13]
 800670c:	4908      	ldr	r1, [pc, #32]	; (8006730 <UARTEx_SetNbDataToProcess+0x90>)
 800670e:	5c8a      	ldrb	r2, [r1, r2]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006714:	7b7a      	ldrb	r2, [r7, #13]
 8006716:	4907      	ldr	r1, [pc, #28]	; (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 8006718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800671a:	fb93 f3f2 	sdiv	r3, r3, r2
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	0800dd80 	.word	0x0800dd80
 8006734:	0800dd88 	.word	0x0800dd88

08006738 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674a:	f3ef 8305 	mrs	r3, IPSR
 800674e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006750:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006756:	f3ef 8310 	mrs	r3, PRIMASK
 800675a:	607b      	str	r3, [r7, #4]
  return(result);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006762:	f3ef 8311 	mrs	r3, BASEPRI
 8006766:	603b      	str	r3, [r7, #0]
  return(result);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <osKernelInitialize+0x3a>
 800676e:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <osKernelInitialize+0x60>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d103      	bne.n	800677e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006776:	f06f 0305 	mvn.w	r3, #5
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	e00c      	b.n	8006798 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <osKernelInitialize+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <osKernelInitialize+0x60>)
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e002      	b.n	8006798 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006796:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	20000184 	.word	0x20000184

080067a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80067b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	607b      	str	r3, [r7, #4]
  return(result);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ca:	603b      	str	r3, [r7, #0]
  return(result);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <osKernelStart+0x3a>
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <osKernelStart+0x68>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d103      	bne.n	80067e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80067da:	f06f 0305 	mvn.w	r3, #5
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e010      	b.n	8006804 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <osKernelStart+0x68>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d109      	bne.n	80067fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067ea:	f7ff ffa5 	bl	8006738 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <osKernelStart+0x68>)
 80067f0:	2202      	movs	r2, #2
 80067f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067f4:	f001 fd18 	bl	8008228 <vTaskStartScheduler>
      stat = osOK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e002      	b.n	8006804 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006804:	68fb      	ldr	r3, [r7, #12]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000184 	.word	0x20000184

08006814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b090      	sub	sp, #64	; 0x40
 8006818:	af04      	add	r7, sp, #16
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006824:	f3ef 8305 	mrs	r3, IPSR
 8006828:	61fb      	str	r3, [r7, #28]
  return(result);
 800682a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 808f 	bne.w	8006950 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006832:	f3ef 8310 	mrs	r3, PRIMASK
 8006836:	61bb      	str	r3, [r7, #24]
  return(result);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800683e:	f3ef 8311 	mrs	r3, BASEPRI
 8006842:	617b      	str	r3, [r7, #20]
  return(result);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osThreadNew+0x3e>
 800684a:	4b44      	ldr	r3, [pc, #272]	; (800695c <osThreadNew+0x148>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d07e      	beq.n	8006950 <osThreadNew+0x13c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d07b      	beq.n	8006950 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800685c:	2318      	movs	r3, #24
 800685e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006868:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d045      	beq.n	80068fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <osThreadNew+0x6a>
        name = attr->name;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <osThreadNew+0x90>
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	2b38      	cmp	r3, #56	; 0x38
 8006896:	d805      	bhi.n	80068a4 <osThreadNew+0x90>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <osThreadNew+0x94>
        return (NULL);
 80068a4:	2300      	movs	r3, #0
 80068a6:	e054      	b.n	8006952 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00e      	beq.n	80068de <osThreadNew+0xca>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2bbb      	cmp	r3, #187	; 0xbb
 80068c6:	d90a      	bls.n	80068de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d006      	beq.n	80068de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <osThreadNew+0xca>
        mem = 1;
 80068d8:	2301      	movs	r3, #1
 80068da:	623b      	str	r3, [r7, #32]
 80068dc:	e010      	b.n	8006900 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10c      	bne.n	8006900 <osThreadNew+0xec>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <osThreadNew+0xec>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <osThreadNew+0xec>
          mem = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	e001      	b.n	8006900 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d110      	bne.n	8006928 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800690e:	9202      	str	r2, [sp, #8]
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800691a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f001 fa97 	bl	8007e50 <xTaskCreateStatic>
 8006922:	4603      	mov	r3, r0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e013      	b.n	8006950 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	b29a      	uxth	r2, r3
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f001 fae2 	bl	8007f0a <xTaskCreate>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d001      	beq.n	8006950 <osThreadNew+0x13c>
          hTask = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006950:	693b      	ldr	r3, [r7, #16]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000184 	.word	0x20000184

08006960 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006968:	f3ef 8305 	mrs	r3, IPSR
 800696c:	613b      	str	r3, [r7, #16]
  return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10f      	bne.n	8006994 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006974:	f3ef 8310 	mrs	r3, PRIMASK
 8006978:	60fb      	str	r3, [r7, #12]
  return(result);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006980:	f3ef 8311 	mrs	r3, BASEPRI
 8006984:	60bb      	str	r3, [r7, #8]
  return(result);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <osDelay+0x3c>
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <osDelay+0x58>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d103      	bne.n	800699c <osDelay+0x3c>
    stat = osErrorISR;
 8006994:	f06f 0305 	mvn.w	r3, #5
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e007      	b.n	80069ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fc0a 	bl	80081c0 <vTaskDelay>
    }
  }

  return (stat);
 80069ac:	697b      	ldr	r3, [r7, #20]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000184 	.word	0x20000184

080069bc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069cc:	f3ef 8305 	mrs	r3, IPSR
 80069d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 8086 	bne.w	8006ae6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069da:	f3ef 8310 	mrs	r3, PRIMASK
 80069de:	617b      	str	r3, [r7, #20]
  return(result);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d105      	bne.n	80069f2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069e6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ea:	613b      	str	r3, [r7, #16]
  return(result);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <osSemaphoreNew+0x3e>
 80069f2:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <osSemaphoreNew+0x134>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d075      	beq.n	8006ae6 <osSemaphoreNew+0x12a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d072      	beq.n	8006ae6 <osSemaphoreNew+0x12a>
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d86e      	bhi.n	8006ae6 <osSemaphoreNew+0x12a>
    mem = -1;
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d015      	beq.n	8006a40 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d006      	beq.n	8006a2a <osSemaphoreNew+0x6e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	2b4f      	cmp	r3, #79	; 0x4f
 8006a22:	d902      	bls.n	8006a2a <osSemaphoreNew+0x6e>
        mem = 1;
 8006a24:	2301      	movs	r3, #1
 8006a26:	623b      	str	r3, [r7, #32]
 8006a28:	e00c      	b.n	8006a44 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d108      	bne.n	8006a44 <osSemaphoreNew+0x88>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <osSemaphoreNew+0x88>
          mem = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	e001      	b.n	8006a44 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4a:	d04c      	beq.n	8006ae6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d128      	bne.n	8006aa4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10a      	bne.n	8006a6e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	9200      	str	r2, [sp, #0]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	2001      	movs	r0, #1
 8006a66:	f000 fa4d 	bl	8006f04 <xQueueGenericCreateStatic>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6c:	e005      	b.n	8006a7a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006a6e:	2203      	movs	r2, #3
 8006a70:	2100      	movs	r1, #0
 8006a72:	2001      	movs	r0, #1
 8006a74:	f000 fabe 	bl	8006ff4 <xQueueGenericCreate>
 8006a78:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d022      	beq.n	8006ac6 <osSemaphoreNew+0x10a>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01f      	beq.n	8006ac6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a86:	2300      	movs	r3, #0
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a8e:	f000 fb7f 	bl	8007190 <xQueueGenericSend>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d016      	beq.n	8006ac6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a9a:	f001 f809 	bl	8007ab0 <vQueueDelete>
            hSemaphore = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e010      	b.n	8006ac6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d108      	bne.n	8006abc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fb01 	bl	80070ba <xQueueCreateCountingSemaphoreStatic>
 8006ab8:	6278      	str	r0, [r7, #36]	; 0x24
 8006aba:	e004      	b.n	8006ac6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fb32 	bl	8007128 <xQueueCreateCountingSemaphore>
 8006ac4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <osSemaphoreNew+0x11e>
          name = attr->name;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	e001      	b.n	8006ade <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ade:	69f9      	ldr	r1, [r7, #28]
 8006ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae2:	f001 f92f 	bl	8007d44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3728      	adds	r7, #40	; 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000184 	.word	0x20000184

08006af4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b0c:	f06f 0303 	mvn.w	r3, #3
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e04b      	b.n	8006bac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b14:	f3ef 8305 	mrs	r3, IPSR
 8006b18:	617b      	str	r3, [r7, #20]
  return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10f      	bne.n	8006b40 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b20:	f3ef 8310 	mrs	r3, PRIMASK
 8006b24:	613b      	str	r3, [r7, #16]
  return(result);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d026      	beq.n	8006b86 <osSemaphoreAcquire+0x92>
 8006b38:	4b1f      	ldr	r3, [pc, #124]	; (8006bb8 <osSemaphoreAcquire+0xc4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d122      	bne.n	8006b86 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006b46:	f06f 0303 	mvn.w	r3, #3
 8006b4a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006b4c:	e02d      	b.n	8006baa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	461a      	mov	r2, r3
 8006b58:	2100      	movs	r1, #0
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f000 ff28 	bl	80079b0 <xQueueReceiveFromISR>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d003      	beq.n	8006b6e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006b66:	f06f 0302 	mvn.w	r3, #2
 8006b6a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006b6c:	e01d      	b.n	8006baa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01a      	beq.n	8006baa <osSemaphoreAcquire+0xb6>
 8006b74:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <osSemaphoreAcquire+0xc8>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006b84:	e011      	b.n	8006baa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	69b8      	ldr	r0, [r7, #24]
 8006b8a:	f000 fe05 	bl	8007798 <xQueueSemaphoreTake>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d00b      	beq.n	8006bac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006b9a:	f06f 0301 	mvn.w	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	e004      	b.n	8006bac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006ba2:	f06f 0302 	mvn.w	r3, #2
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e000      	b.n	8006bac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006baa:	bf00      	nop
      }
    }
  }

  return (stat);
 8006bac:	69fb      	ldr	r3, [r7, #28]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000184 	.word	0x20000184
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006bd6:	f06f 0303 	mvn.w	r3, #3
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e03e      	b.n	8006c5c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bde:	f3ef 8305 	mrs	r3, IPSR
 8006be2:	617b      	str	r3, [r7, #20]
  return(result);
 8006be4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bea:	f3ef 8310 	mrs	r3, PRIMASK
 8006bee:	613b      	str	r3, [r7, #16]
  return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01e      	beq.n	8006c40 <osSemaphoreRelease+0x80>
 8006c02:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <osSemaphoreRelease+0xa8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d11a      	bne.n	8006c40 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	69b8      	ldr	r0, [r7, #24]
 8006c16:	f000 fc51 	bl	80074bc <xQueueGiveFromISR>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d003      	beq.n	8006c28 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006c20:	f06f 0302 	mvn.w	r3, #2
 8006c24:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c26:	e018      	b.n	8006c5a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <osSemaphoreRelease+0x9a>
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <osSemaphoreRelease+0xac>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c3e:	e00c      	b.n	8006c5a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c40:	2300      	movs	r3, #0
 8006c42:	2200      	movs	r2, #0
 8006c44:	2100      	movs	r1, #0
 8006c46:	69b8      	ldr	r0, [r7, #24]
 8006c48:	f000 faa2 	bl	8007190 <xQueueGenericSend>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d004      	beq.n	8006c5c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006c52:	f06f 0302 	mvn.w	r3, #2
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e000      	b.n	8006c5c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c5a:	bf00      	nop
    }
  }

  return (stat);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000184 	.word	0x20000184
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a06      	ldr	r2, [pc, #24]	; (8006c98 <vApplicationGetIdleTaskMemory+0x28>)
 8006c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	20000188 	.word	0x20000188
 8006c9c:	20000244 	.word	0x20000244

08006ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8006cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a06      	ldr	r2, [pc, #24]	; (8006cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000444 	.word	0x20000444
 8006cd0:	20000500 	.word	0x20000500

08006cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f103 0208 	add.w	r2, r3, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f103 0208 	add.w	r2, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f103 0208 	add.w	r2, r3, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d86:	d103      	bne.n	8006d90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e00c      	b.n	8006daa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3308      	adds	r3, #8
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	e002      	b.n	8006d9e <vListInsert+0x2e>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d2f6      	bcs.n	8006d98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6892      	ldr	r2, [r2, #8]
 8006df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d103      	bne.n	8006e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
	...

08006e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e5e:	f002 fd0d 	bl	800987c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	22ff      	movs	r2, #255	; 0xff
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d114      	bne.n	8006ede <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3310      	adds	r3, #16
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 fca5 	bl	8008810 <xTaskRemoveFromEventList>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <xQueueGenericReset+0xcc>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e009      	b.n	8006ef2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fef6 	bl	8006cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3324      	adds	r3, #36	; 0x24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fef1 	bl	8006cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ef2:	f002 fcf3 	bl	80098dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ef6:	2301      	movs	r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <xQueueGenericCreateStatic+0x52>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <xQueueGenericCreateStatic+0x56>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <xQueueGenericCreateStatic+0x58>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	623b      	str	r3, [r7, #32]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xQueueGenericCreateStatic+0x7e>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueGenericCreateStatic+0x82>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueGenericCreateStatic+0x84>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61fb      	str	r3, [r7, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fa2:	2350      	movs	r3, #80	; 0x50
 8006fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b50      	cmp	r3, #80	; 0x50
 8006faa:	d00a      	beq.n	8006fc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61bb      	str	r3, [r7, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f845 	bl	8007074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3730      	adds	r7, #48	; 0x30
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	613b      	str	r3, [r7, #16]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	e004      	b.n	8007034 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	3350      	adds	r3, #80	; 0x50
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fe05 	bl	8009c48 <pvPortMalloc>
 800703e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	3350      	adds	r3, #80	; 0x50
 800704e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	4613      	mov	r3, r2
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f805 	bl	8007074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800706a:	69bb      	ldr	r3, [r7, #24]
	}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e002      	b.n	8007096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070a2:	2101      	movs	r1, #1
 80070a4:	69b8      	ldr	r0, [r7, #24]
 80070a6:	f7ff fec5 	bl	8006e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b08a      	sub	sp, #40	; 0x28
 80070be:	af02      	add	r7, sp, #8
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61bb      	str	r3, [r7, #24]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d90a      	bls.n	8007100 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	617b      	str	r3, [r7, #20]
}
 80070fc:	bf00      	nop
 80070fe:	e7fe      	b.n	80070fe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007100:	2302      	movs	r3, #2
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fefa 	bl	8006f04 <xQueueGenericCreateStatic>
 8007110:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800711e:	69fb      	ldr	r3, [r7, #28]
	}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	613b      	str	r3, [r7, #16]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d90a      	bls.n	800716c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800716c:	2202      	movs	r2, #2
 800716e:	2100      	movs	r1, #0
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff3f 	bl	8006ff4 <xQueueGenericCreate>
 8007176:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007184:	697b      	ldr	r3, [r7, #20]
	}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08e      	sub	sp, #56	; 0x38
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800719e:	2300      	movs	r3, #0
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericSend+0x32>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <xQueueGenericSend+0x40>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueGenericSend+0x44>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueGenericSend+0x46>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <xQueueGenericSend+0x60>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d103      	bne.n	80071fe <xQueueGenericSend+0x6e>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <xQueueGenericSend+0x72>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueGenericSend+0x74>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xQueueGenericSend+0x8e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	623b      	str	r3, [r7, #32]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800721e:	f001 fd11 	bl	8008c44 <xTaskGetSchedulerState>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <xQueueGenericSend+0x9e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <xQueueGenericSend+0xa2>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueGenericSend+0xa4>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xQueueGenericSend+0xbe>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	61fb      	str	r3, [r7, #28]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800724e:	f002 fb15 	bl	800987c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <xQueueGenericSend+0xd4>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d129      	bne.n	80072b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800726a:	f000 fc5b 	bl	8007b24 <prvCopyDataToQueue>
 800726e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	3324      	adds	r3, #36	; 0x24
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fac7 	bl	8008810 <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007288:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <xQueueGenericSend+0x1f8>)
 800728a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	e00a      	b.n	80072b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d007      	beq.n	80072b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072a0:	4b39      	ldr	r3, [pc, #228]	; (8007388 <xQueueGenericSend+0x1f8>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072b0:	f002 fb14 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e063      	b.n	8007380 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072be:	f002 fb0d 	bl	80098dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e05c      	b.n	8007380 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072cc:	f107 0314 	add.w	r3, r7, #20
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 fb03 	bl	80088dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072da:	f002 faff 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072de:	f001 f813 	bl	8008308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072e2:	f002 facb 	bl	800987c <vPortEnterCritical>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f2:	d103      	bne.n	80072fc <xQueueGenericSend+0x16c>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007302:	b25b      	sxtb	r3, r3
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007308:	d103      	bne.n	8007312 <xQueueGenericSend+0x182>
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007312:	f002 fae3 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007316:	1d3a      	adds	r2, r7, #4
 8007318:	f107 0314 	add.w	r3, r7, #20
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f001 faf2 	bl	8008908 <xTaskCheckForTimeOut>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d124      	bne.n	8007374 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800732a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800732c:	f000 fcf2 	bl	8007d14 <prvIsQueueFull>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d018      	beq.n	8007368 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	3310      	adds	r3, #16
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fa16 	bl	8008770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007346:	f000 fc7d 	bl	8007c44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800734a:	f001 f821 	bl	8008390 <xTaskResumeAll>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	f47f af7c 	bne.w	800724e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <xQueueGenericSend+0x1f8>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	e772      	b.n	800724e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800736a:	f000 fc6b 	bl	8007c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800736e:	f001 f80f 	bl	8008390 <xTaskResumeAll>
 8007372:	e76c      	b.n	800724e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007376:	f000 fc65 	bl	8007c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800737a:	f001 f809 	bl	8008390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800737e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007380:	4618      	mov	r0, r3
 8007382:	3738      	adds	r7, #56	; 0x38
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08e      	sub	sp, #56	; 0x38
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <xQueueGenericSendFromISR+0x3c>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <xQueueGenericSendFromISR+0x40>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <xQueueGenericSendFromISR+0x42>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	623b      	str	r3, [r7, #32]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d103      	bne.n	80073f6 <xQueueGenericSendFromISR+0x6a>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <xQueueGenericSendFromISR+0x6e>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <xQueueGenericSendFromISR+0x70>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	61fb      	str	r3, [r7, #28]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007416:	f002 fbd9 	bl	8009bcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800741a:	f3ef 8211 	mrs	r2, BASEPRI
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61ba      	str	r2, [r7, #24]
 8007430:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007432:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <xQueueGenericSendFromISR+0xbc>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d12c      	bne.n	80074a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007458:	f000 fb64 	bl	8007b24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800745c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007464:	d112      	bne.n	800748c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d016      	beq.n	800749c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	3324      	adds	r3, #36	; 0x24
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f9cc 	bl	8008810 <xTaskRemoveFromEventList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00e      	beq.n	800749c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e007      	b.n	800749c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800748c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007490:	3301      	adds	r3, #1
 8007492:	b2db      	uxtb	r3, r3
 8007494:	b25a      	sxtb	r2, r3
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800749c:	2301      	movs	r3, #1
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80074a0:	e001      	b.n	80074a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3738      	adds	r7, #56	; 0x38
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	623b      	str	r3, [r7, #32]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <xQueueGiveFromISR+0x48>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61fb      	str	r3, [r7, #28]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <xQueueGiveFromISR+0x58>
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <xQueueGiveFromISR+0x5c>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <xQueueGiveFromISR+0x5e>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <xQueueGiveFromISR+0x78>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	61bb      	str	r3, [r7, #24]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007534:	f002 fb4a 	bl	8009bcc <vPortValidateInterruptPriority>
	__asm volatile
 8007538:	f3ef 8211 	mrs	r2, BASEPRI
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	617a      	str	r2, [r7, #20]
 800754e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007550:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007560:	429a      	cmp	r2, r3
 8007562:	d22b      	bcs.n	80075bc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800756a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800757e:	d112      	bne.n	80075a6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d016      	beq.n	80075b6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	3324      	adds	r3, #36	; 0x24
 800758c:	4618      	mov	r0, r3
 800758e:	f001 f93f 	bl	8008810 <xTaskRemoveFromEventList>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00e      	beq.n	80075b6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2201      	movs	r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e007      	b.n	80075b6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	b25a      	sxtb	r2, r3
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075b6:	2301      	movs	r3, #1
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	e001      	b.n	80075c0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	637b      	str	r3, [r7, #52]	; 0x34
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f383 8811 	msr	BASEPRI, r3
}
 80075ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3738      	adds	r7, #56	; 0x38
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	; 0x30
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <xQueueReceive+0x30>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	623b      	str	r3, [r7, #32]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <xQueueReceive+0x3e>
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <xQueueReceive+0x42>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <xQueueReceive+0x44>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueReceive+0x5e>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	61fb      	str	r3, [r7, #28]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007636:	f001 fb05 	bl	8008c44 <xTaskGetSchedulerState>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <xQueueReceive+0x6e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <xQueueReceive+0x72>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <xQueueReceive+0x74>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <xQueueReceive+0x8e>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	61bb      	str	r3, [r7, #24]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007666:	f002 f909 	bl	800987c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01f      	beq.n	80076b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767a:	f000 fabd 	bl	8007bf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	3310      	adds	r3, #16
 8007692:	4618      	mov	r0, r3
 8007694:	f001 f8bc 	bl	8008810 <xTaskRemoveFromEventList>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800769e:	4b3d      	ldr	r3, [pc, #244]	; (8007794 <xQueueReceive+0x1bc>)
 80076a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076ae:	f002 f915 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e069      	b.n	800778a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d103      	bne.n	80076c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076bc:	f002 f90e 	bl	80098dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e062      	b.n	800778a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076ca:	f107 0310 	add.w	r3, r7, #16
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 f904 	bl	80088dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076d8:	f002 f900 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076dc:	f000 fe14 	bl	8008308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076e0:	f002 f8cc 	bl	800987c <vPortEnterCritical>
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f0:	d103      	bne.n	80076fa <xQueueReceive+0x122>
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007700:	b25b      	sxtb	r3, r3
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007706:	d103      	bne.n	8007710 <xQueueReceive+0x138>
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007710:	f002 f8e4 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007714:	1d3a      	adds	r2, r7, #4
 8007716:	f107 0310 	add.w	r3, r7, #16
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f8f3 	bl	8008908 <xTaskCheckForTimeOut>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d123      	bne.n	8007770 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772a:	f000 fadd 	bl	8007ce8 <prvIsQueueEmpty>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d017      	beq.n	8007764 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	3324      	adds	r3, #36	; 0x24
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f001 f817 	bl	8008770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007744:	f000 fa7e 	bl	8007c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007748:	f000 fe22 	bl	8008390 <xTaskResumeAll>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d189      	bne.n	8007666 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <xQueueReceive+0x1bc>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e780      	b.n	8007666 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007766:	f000 fa6d 	bl	8007c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800776a:	f000 fe11 	bl	8008390 <xTaskResumeAll>
 800776e:	e77a      	b.n	8007666 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007772:	f000 fa67 	bl	8007c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007776:	f000 fe0b 	bl	8008390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800777a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800777c:	f000 fab4 	bl	8007ce8 <prvIsQueueEmpty>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	f43f af6f 	beq.w	8007666 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800778a:	4618      	mov	r0, r3
 800778c:	3730      	adds	r7, #48	; 0x30
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08e      	sub	sp, #56	; 0x38
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	623b      	str	r3, [r7, #32]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	61fb      	str	r3, [r7, #28]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077e8:	f001 fa2c 	bl	8008c44 <xTaskGetSchedulerState>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <xQueueSemaphoreTake+0x60>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <xQueueSemaphoreTake+0x64>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <xQueueSemaphoreTake+0x66>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	61bb      	str	r3, [r7, #24]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007818:	f002 f830 	bl	800987c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d024      	beq.n	8007872 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	1e5a      	subs	r2, r3, #1
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007838:	f001 fb7a 	bl	8008f30 <pvTaskIncrementMutexHeldCount>
 800783c:	4602      	mov	r2, r0
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00f      	beq.n	800786a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	3310      	adds	r3, #16
 800784e:	4618      	mov	r0, r3
 8007850:	f000 ffde 	bl	8008810 <xTaskRemoveFromEventList>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800785a:	4b54      	ldr	r3, [pc, #336]	; (80079ac <xQueueSemaphoreTake+0x214>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800786a:	f002 f837 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 800786e:	2301      	movs	r3, #1
 8007870:	e097      	b.n	80079a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d111      	bne.n	800789c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	617b      	str	r3, [r7, #20]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007894:	f002 f822 	bl	80098dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007898:	2300      	movs	r3, #0
 800789a:	e082      	b.n	80079a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800789c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f818 	bl	80088dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078ac:	2301      	movs	r3, #1
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078b0:	f002 f814 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078b4:	f000 fd28 	bl	8008308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078b8:	f001 ffe0 	bl	800987c <vPortEnterCritical>
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c8:	d103      	bne.n	80078d2 <xQueueSemaphoreTake+0x13a>
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d8:	b25b      	sxtb	r3, r3
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078de:	d103      	bne.n	80078e8 <xQueueSemaphoreTake+0x150>
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e8:	f001 fff8 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ec:	463a      	mov	r2, r7
 80078ee:	f107 030c 	add.w	r3, r7, #12
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f807 	bl	8008908 <xTaskCheckForTimeOut>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d132      	bne.n	8007966 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007902:	f000 f9f1 	bl	8007ce8 <prvIsQueueEmpty>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d026      	beq.n	800795a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007914:	f001 ffb2 	bl	800987c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f9af 	bl	8008c80 <xTaskPriorityInherit>
 8007922:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007924:	f001 ffda 	bl	80098dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4611      	mov	r1, r2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 ff1d 	bl	8008770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007938:	f000 f984 	bl	8007c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800793c:	f000 fd28 	bl	8008390 <xTaskResumeAll>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f47f af68 	bne.w	8007818 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007948:	4b18      	ldr	r3, [pc, #96]	; (80079ac <xQueueSemaphoreTake+0x214>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	e75e      	b.n	8007818 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800795a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800795c:	f000 f972 	bl	8007c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007960:	f000 fd16 	bl	8008390 <xTaskResumeAll>
 8007964:	e758      	b.n	8007818 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007968:	f000 f96c 	bl	8007c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800796c:	f000 fd10 	bl	8008390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007972:	f000 f9b9 	bl	8007ce8 <prvIsQueueEmpty>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	f43f af4d 	beq.w	8007818 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007984:	f001 ff7a 	bl	800987c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800798a:	f000 f8b4 	bl	8007af6 <prvGetDisinheritPriorityAfterTimeout>
 800798e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fa48 	bl	8008e2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800799c:	f001 ff9e 	bl	80098dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3738      	adds	r7, #56	; 0x38
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	; 0x38
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	623b      	str	r3, [r7, #32]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <xQueueReceiveFromISR+0x3a>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <xQueueReceiveFromISR+0x3e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <xQueueReceiveFromISR+0x40>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	61fb      	str	r3, [r7, #28]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a0a:	f002 f8df 	bl	8009bcc <vPortValidateInterruptPriority>
	__asm volatile
 8007a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61ba      	str	r2, [r7, #24]
 8007a24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02f      	beq.n	8007a96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a44:	f000 f8d8 	bl	8007bf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a58:	d112      	bne.n	8007a80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	3310      	adds	r3, #16
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fed2 	bl	8008810 <xTaskRemoveFromEventList>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00e      	beq.n	8007a90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e007      	b.n	8007a90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	b25a      	sxtb	r2, r3
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a90:	2301      	movs	r3, #1
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	e001      	b.n	8007a9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f383 8811 	msr	BASEPRI, r3
}
 8007aa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3738      	adds	r7, #56	; 0x38
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <vQueueDelete+0x28>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60bb      	str	r3, [r7, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f95b 	bl	8007d94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f002 f971 	bl	8009dd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e001      	b.n	8007b18 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b18:	68fb      	ldr	r3, [r7, #12]
	}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10d      	bne.n	8007b5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d14d      	bne.n	8007be6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f8fe 	bl	8008d50 <xTaskPriorityDisinherit>
 8007b54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	e043      	b.n	8007be6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d119      	bne.n	8007b98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6858      	ldr	r0, [r3, #4]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	f005 ff42 	bl	800d9f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d32b      	bcc.n	8007be6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	e026      	b.n	8007be6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68d8      	ldr	r0, [r3, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	f005 ff28 	bl	800d9f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	425b      	negs	r3, r3
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d207      	bcs.n	8007bd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	425b      	negs	r3, r3
 8007bce:	441a      	add	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d105      	bne.n	8007be6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d018      	beq.n	8007c3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	441a      	add	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d303      	bcc.n	8007c2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68d9      	ldr	r1, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	461a      	mov	r2, r3
 8007c36:	6838      	ldr	r0, [r7, #0]
 8007c38:	f005 fede 	bl	800d9f8 <memcpy>
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c4c:	f001 fe16 	bl	800987c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c58:	e011      	b.n	8007c7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d012      	beq.n	8007c88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3324      	adds	r3, #36	; 0x24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fdd2 	bl	8008810 <xTaskRemoveFromEventList>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c72:	f000 feab 	bl	80089cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dce9      	bgt.n	8007c5a <prvUnlockQueue+0x16>
 8007c86:	e000      	b.n	8007c8a <prvUnlockQueue+0x46>
					break;
 8007c88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c92:	f001 fe23 	bl	80098dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c96:	f001 fdf1 	bl	800987c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ca0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ca2:	e011      	b.n	8007cc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d012      	beq.n	8007cd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3310      	adds	r3, #16
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fdad 	bl	8008810 <xTaskRemoveFromEventList>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cbc:	f000 fe86 	bl	80089cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dce9      	bgt.n	8007ca4 <prvUnlockQueue+0x60>
 8007cd0:	e000      	b.n	8007cd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	22ff      	movs	r2, #255	; 0xff
 8007cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cdc:	f001 fdfe 	bl	80098dc <vPortExitCritical>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cf0:	f001 fdc4 	bl	800987c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d102      	bne.n	8007d02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e001      	b.n	8007d06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d06:	f001 fde9 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d1c:	f001 fdae 	bl	800987c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d102      	bne.n	8007d32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e001      	b.n	8007d36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d36:	f001 fdd1 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e014      	b.n	8007d7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d54:	4a0e      	ldr	r2, [pc, #56]	; (8007d90 <vQueueAddToRegistry+0x4c>)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10b      	bne.n	8007d78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d60:	490b      	ldr	r1, [pc, #44]	; (8007d90 <vQueueAddToRegistry+0x4c>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d6a:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <vQueueAddToRegistry+0x4c>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d76:	e006      	b.n	8007d86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b07      	cmp	r3, #7
 8007d82:	d9e7      	bls.n	8007d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr
 8007d90:	20002514 	.word	0x20002514

08007d94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e016      	b.n	8007dd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007da2:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <vQueueUnregisterQueue+0x50>)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d10b      	bne.n	8007dca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <vQueueUnregisterQueue+0x50>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2100      	movs	r1, #0
 8007db8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007dbc:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vQueueUnregisterQueue+0x50>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]
				break;
 8007dc8:	e006      	b.n	8007dd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b07      	cmp	r3, #7
 8007dd4:	d9e5      	bls.n	8007da2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20002514 	.word	0x20002514

08007de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007df8:	f001 fd40 	bl	800987c <vPortEnterCritical>
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e02:	b25b      	sxtb	r3, r3
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e08:	d103      	bne.n	8007e12 <vQueueWaitForMessageRestricted+0x2a>
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e18:	b25b      	sxtb	r3, r3
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e1e:	d103      	bne.n	8007e28 <vQueueWaitForMessageRestricted+0x40>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e28:	f001 fd58 	bl	80098dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	3324      	adds	r3, #36	; 0x24
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fcbb 	bl	80087b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e42:	6978      	ldr	r0, [r7, #20]
 8007e44:	f7ff fefe 	bl	8007c44 <prvUnlockQueue>
	}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08e      	sub	sp, #56	; 0x38
 8007e54:	af04      	add	r7, sp, #16
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	623b      	str	r3, [r7, #32]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	61fb      	str	r3, [r7, #28]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e96:	23bc      	movs	r3, #188	; 0xbc
 8007e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2bbc      	cmp	r3, #188	; 0xbc
 8007e9e:	d00a      	beq.n	8007eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61bb      	str	r3, [r7, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01e      	beq.n	8007efc <xTaskCreateStatic+0xac>
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01b      	beq.n	8007efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	9302      	str	r3, [sp, #8]
 8007ede:	f107 0314 	add.w	r3, r7, #20
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 f850 	bl	8007f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ef6:	f000 f8f3 	bl	80080e0 <prvAddNewTaskToReadyList>
 8007efa:	e001      	b.n	8007f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f00:	697b      	ldr	r3, [r7, #20]
	}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3728      	adds	r7, #40	; 0x28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b08c      	sub	sp, #48	; 0x30
 8007f0e:	af04      	add	r7, sp, #16
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fe92 	bl	8009c48 <pvPortMalloc>
 8007f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f2c:	20bc      	movs	r0, #188	; 0xbc
 8007f2e:	f001 fe8b 	bl	8009c48 <pvPortMalloc>
 8007f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f40:	e005      	b.n	8007f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f001 ff44 	bl	8009dd0 <vPortFree>
 8007f48:	e001      	b.n	8007f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d017      	beq.n	8007f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f80e 	bl	8007f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f78:	69f8      	ldr	r0, [r7, #28]
 8007f7a:	f000 f8b1 	bl	80080e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	61bb      	str	r3, [r7, #24]
 8007f82:	e002      	b.n	8007f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	461a      	mov	r2, r3
 8007fac:	21a5      	movs	r1, #165	; 0xa5
 8007fae:	f005 fd31 	bl	800da14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <prvInitialiseNewTask+0x58>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	617b      	str	r3, [r7, #20]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01f      	beq.n	8008032 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	e012      	b.n	800801e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	7819      	ldrb	r1, [r3, #0]
 8008000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	3334      	adds	r3, #52	; 0x34
 8008008:	460a      	mov	r2, r1
 800800a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	2b0f      	cmp	r3, #15
 8008022:	d9e9      	bls.n	8007ff8 <prvInitialiseNewTask+0x64>
 8008024:	e000      	b.n	8008028 <prvInitialiseNewTask+0x94>
			{
				break;
 8008026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008030:	e003      	b.n	800803a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2b37      	cmp	r3, #55	; 0x37
 800803e:	d901      	bls.n	8008044 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008040:	2337      	movs	r3, #55	; 0x37
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800804e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	2200      	movs	r2, #0
 8008054:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fe59 	bl	8006d12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	3318      	adds	r3, #24
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fe54 	bl	8006d12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2200      	movs	r2, #0
 800808c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	3354      	adds	r3, #84	; 0x54
 8008094:	2260      	movs	r2, #96	; 0x60
 8008096:	2100      	movs	r1, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f005 fcbb 	bl	800da14 <memset>
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	4a0c      	ldr	r2, [pc, #48]	; (80080d4 <prvInitialiseNewTask+0x140>)
 80080a2:	659a      	str	r2, [r3, #88]	; 0x58
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	4a0c      	ldr	r2, [pc, #48]	; (80080d8 <prvInitialiseNewTask+0x144>)
 80080a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	4a0b      	ldr	r2, [pc, #44]	; (80080dc <prvInitialiseNewTask+0x148>)
 80080ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	69b8      	ldr	r0, [r7, #24]
 80080b6:	f001 faef 	bl	8009698 <pxPortInitialiseStack>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	0800dee8 	.word	0x0800dee8
 80080d8:	0800df08 	.word	0x0800df08
 80080dc:	0800dec8 	.word	0x0800dec8

080080e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080e8:	f001 fbc8 	bl	800987c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080ec:	4b2d      	ldr	r3, [pc, #180]	; (80081a4 <prvAddNewTaskToReadyList+0xc4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	4a2c      	ldr	r2, [pc, #176]	; (80081a4 <prvAddNewTaskToReadyList+0xc4>)
 80080f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080f6:	4b2c      	ldr	r3, [pc, #176]	; (80081a8 <prvAddNewTaskToReadyList+0xc8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080fe:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <prvAddNewTaskToReadyList+0xc8>)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008104:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <prvAddNewTaskToReadyList+0xc4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d110      	bne.n	800812e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800810c:	f000 fcd8 	bl	8008ac0 <prvInitialiseTaskLists>
 8008110:	e00d      	b.n	800812e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008112:	4b26      	ldr	r3, [pc, #152]	; (80081ac <prvAddNewTaskToReadyList+0xcc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800811a:	4b23      	ldr	r3, [pc, #140]	; (80081a8 <prvAddNewTaskToReadyList+0xc8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	429a      	cmp	r2, r3
 8008126:	d802      	bhi.n	800812e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <prvAddNewTaskToReadyList+0xc8>)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800812e:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <prvAddNewTaskToReadyList+0xd0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a1e      	ldr	r2, [pc, #120]	; (80081b0 <prvAddNewTaskToReadyList+0xd0>)
 8008136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008138:	4b1d      	ldr	r3, [pc, #116]	; (80081b0 <prvAddNewTaskToReadyList+0xd0>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <prvAddNewTaskToReadyList+0xd4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <prvAddNewTaskToReadyList+0x74>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4a18      	ldr	r2, [pc, #96]	; (80081b4 <prvAddNewTaskToReadyList+0xd4>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <prvAddNewTaskToReadyList+0xd8>)
 8008162:	441a      	add	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fe fddd 	bl	8006d2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008170:	f001 fbb4 	bl	80098dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <prvAddNewTaskToReadyList+0xcc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <prvAddNewTaskToReadyList+0xc8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	429a      	cmp	r2, r3
 8008188:	d207      	bcs.n	800819a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <prvAddNewTaskToReadyList+0xdc>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000dd4 	.word	0x20000dd4
 80081a8:	20000900 	.word	0x20000900
 80081ac:	20000de0 	.word	0x20000de0
 80081b0:	20000df0 	.word	0x20000df0
 80081b4:	20000ddc 	.word	0x20000ddc
 80081b8:	20000904 	.word	0x20000904
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d017      	beq.n	8008202 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081d2:	4b13      	ldr	r3, [pc, #76]	; (8008220 <vTaskDelay+0x60>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <vTaskDelay+0x30>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	60bb      	str	r3, [r7, #8]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081f0:	f000 f88a 	bl	8008308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 feae 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081fc:	f000 f8c8 	bl	8008390 <xTaskResumeAll>
 8008200:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d107      	bne.n	8008218 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008208:	4b06      	ldr	r3, [pc, #24]	; (8008224 <vTaskDelay+0x64>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008218:	bf00      	nop
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20000dfc 	.word	0x20000dfc
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008236:	463a      	mov	r2, r7
 8008238:	1d39      	adds	r1, r7, #4
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fd16 	bl	8006c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	2300      	movs	r3, #0
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	460a      	mov	r2, r1
 8008256:	4924      	ldr	r1, [pc, #144]	; (80082e8 <vTaskStartScheduler+0xc0>)
 8008258:	4824      	ldr	r0, [pc, #144]	; (80082ec <vTaskStartScheduler+0xc4>)
 800825a:	f7ff fdf9 	bl	8007e50 <xTaskCreateStatic>
 800825e:	4603      	mov	r3, r0
 8008260:	4a23      	ldr	r2, [pc, #140]	; (80082f0 <vTaskStartScheduler+0xc8>)
 8008262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008264:	4b22      	ldr	r3, [pc, #136]	; (80082f0 <vTaskStartScheduler+0xc8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800826c:	2301      	movs	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e001      	b.n	8008276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d102      	bne.n	8008282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800827c:	f000 fec0 	bl	8009000 <xTimerCreateTimerTask>
 8008280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d11b      	bne.n	80082c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	613b      	str	r3, [r7, #16]
}
 800829a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800829c:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <vTaskStartScheduler+0xcc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3354      	adds	r3, #84	; 0x54
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <vTaskStartScheduler+0xd0>)
 80082a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <vTaskStartScheduler+0xd4>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082ae:	4b14      	ldr	r3, [pc, #80]	; (8008300 <vTaskStartScheduler+0xd8>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082b4:	4b13      	ldr	r3, [pc, #76]	; (8008304 <vTaskStartScheduler+0xdc>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ba:	f001 fa6d 	bl	8009798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082be:	e00e      	b.n	80082de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c6:	d10a      	bne.n	80082de <vTaskStartScheduler+0xb6>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <vTaskStartScheduler+0xb4>
}
 80082de:	bf00      	nop
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	0800dc08 	.word	0x0800dc08
 80082ec:	080089e5 	.word	0x080089e5
 80082f0:	20000df8 	.word	0x20000df8
 80082f4:	20000900 	.word	0x20000900
 80082f8:	20000018 	.word	0x20000018
 80082fc:	20000df4 	.word	0x20000df4
 8008300:	20000de0 	.word	0x20000de0
 8008304:	20000dd8 	.word	0x20000dd8

08008308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <vTaskSuspendAll+0x18>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a03      	ldr	r2, [pc, #12]	; (8008320 <vTaskSuspendAll+0x18>)
 8008314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008316:	bf00      	nop
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20000dfc 	.word	0x20000dfc

08008324 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <prvGetExpectedIdleTime+0x58>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800833a:	4b11      	ldr	r3, [pc, #68]	; (8008380 <prvGetExpectedIdleTime+0x5c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	e012      	b.n	8008370 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800834a:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <prvGetExpectedIdleTime+0x60>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d902      	bls.n	8008358 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	e00b      	b.n	8008370 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	e005      	b.n	8008370 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008364:	4b08      	ldr	r3, [pc, #32]	; (8008388 <prvGetExpectedIdleTime+0x64>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <prvGetExpectedIdleTime+0x68>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008370:	687b      	ldr	r3, [r7, #4]
	}
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr
 800837c:	20000ddc 	.word	0x20000ddc
 8008380:	20000900 	.word	0x20000900
 8008384:	20000904 	.word	0x20000904
 8008388:	20000df4 	.word	0x20000df4
 800838c:	20000dd8 	.word	0x20000dd8

08008390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800839e:	4b42      	ldr	r3, [pc, #264]	; (80084a8 <xTaskResumeAll+0x118>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <xTaskResumeAll+0x2c>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	603b      	str	r3, [r7, #0]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083bc:	f001 fa5e 	bl	800987c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083c0:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <xTaskResumeAll+0x118>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a38      	ldr	r2, [pc, #224]	; (80084a8 <xTaskResumeAll+0x118>)
 80083c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ca:	4b37      	ldr	r3, [pc, #220]	; (80084a8 <xTaskResumeAll+0x118>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d162      	bne.n	8008498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083d2:	4b36      	ldr	r3, [pc, #216]	; (80084ac <xTaskResumeAll+0x11c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d05e      	beq.n	8008498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083da:	e02f      	b.n	800843c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b34      	ldr	r3, [pc, #208]	; (80084b0 <xTaskResumeAll+0x120>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3318      	adds	r3, #24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fcf9 	bl	8006de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fcf4 	bl	8006de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <xTaskResumeAll+0x124>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <xTaskResumeAll+0x7c>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <xTaskResumeAll+0x124>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <xTaskResumeAll+0x128>)
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe fc81 	bl	8006d2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <xTaskResumeAll+0x12c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <xTaskResumeAll+0x130>)
 8008438:	2201      	movs	r2, #1
 800843a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <xTaskResumeAll+0x120>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1cb      	bne.n	80083dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800844a:	f000 fbdb 	bl	8008c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <xTaskResumeAll+0x134>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800845a:	f000 f86b 	bl	8008534 <xTaskIncrementTick>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008464:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <xTaskResumeAll+0x130>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3b01      	subs	r3, #1
 800846e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f1      	bne.n	800845a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <xTaskResumeAll+0x134>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <xTaskResumeAll+0x130>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskResumeAll+0x138>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008498:	f001 fa20 	bl	80098dc <vPortExitCritical>

	return xAlreadyYielded;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000dfc 	.word	0x20000dfc
 80084ac:	20000dd4 	.word	0x20000dd4
 80084b0:	20000d94 	.word	0x20000d94
 80084b4:	20000ddc 	.word	0x20000ddc
 80084b8:	20000904 	.word	0x20000904
 80084bc:	20000900 	.word	0x20000900
 80084c0:	20000de8 	.word	0x20000de8
 80084c4:	20000de4 	.word	0x20000de4
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <xTaskGetTickCount+0x18>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084d8:	687b      	ldr	r3, [r7, #4]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20000dd8 	.word	0x20000dd8

080084e8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80084f0:	4b0e      	ldr	r3, [pc, #56]	; (800852c <vTaskStepTick+0x44>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	441a      	add	r2, r3
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <vTaskStepTick+0x48>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d90a      	bls.n	8008516 <vTaskStepTick+0x2e>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <vTaskStepTick+0x44>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	4a03      	ldr	r2, [pc, #12]	; (800852c <vTaskStepTick+0x44>)
 8008520:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr
 800852c:	20000dd8 	.word	0x20000dd8
 8008530:	20000df4 	.word	0x20000df4

08008534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853e:	4b4f      	ldr	r3, [pc, #316]	; (800867c <xTaskIncrementTick+0x148>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f040 8089 	bne.w	800865a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008548:	4b4d      	ldr	r3, [pc, #308]	; (8008680 <xTaskIncrementTick+0x14c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3301      	adds	r3, #1
 800854e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008550:	4a4b      	ldr	r2, [pc, #300]	; (8008680 <xTaskIncrementTick+0x14c>)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d120      	bne.n	800859e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800855c:	4b49      	ldr	r3, [pc, #292]	; (8008684 <xTaskIncrementTick+0x150>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <xTaskIncrementTick+0x48>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	603b      	str	r3, [r7, #0]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <xTaskIncrementTick+0x46>
 800857c:	4b41      	ldr	r3, [pc, #260]	; (8008684 <xTaskIncrementTick+0x150>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <xTaskIncrementTick+0x154>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a3f      	ldr	r2, [pc, #252]	; (8008684 <xTaskIncrementTick+0x150>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	4a3f      	ldr	r2, [pc, #252]	; (8008688 <xTaskIncrementTick+0x154>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4b3e      	ldr	r3, [pc, #248]	; (800868c <xTaskIncrementTick+0x158>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a3d      	ldr	r2, [pc, #244]	; (800868c <xTaskIncrementTick+0x158>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	f000 fb33 	bl	8008c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800859e:	4b3c      	ldr	r3, [pc, #240]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d349      	bcc.n	800863c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a8:	4b36      	ldr	r3, [pc, #216]	; (8008684 <xTaskIncrementTick+0x150>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b2:	4b37      	ldr	r3, [pc, #220]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b8:	601a      	str	r2, [r3, #0]
					break;
 80085ba:	e03f      	b.n	800863c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085bc:	4b31      	ldr	r3, [pc, #196]	; (8008684 <xTaskIncrementTick+0x150>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d203      	bcs.n	80085dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085d4:	4a2e      	ldr	r2, [pc, #184]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085da:	e02f      	b.n	800863c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fbfd 	bl	8006de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3318      	adds	r3, #24
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fbf4 	bl	8006de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4b25      	ldr	r3, [pc, #148]	; (8008694 <xTaskIncrementTick+0x160>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <xTaskIncrementTick+0xd8>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a22      	ldr	r2, [pc, #136]	; (8008694 <xTaskIncrementTick+0x160>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a1f      	ldr	r2, [pc, #124]	; (8008698 <xTaskIncrementTick+0x164>)
 800861a:	441a      	add	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fb81 	bl	8006d2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xTaskIncrementTick+0x168>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	429a      	cmp	r2, r3
 8008634:	d3b8      	bcc.n	80085a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800863a:	e7b5      	b.n	80085a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800863c:	4b17      	ldr	r3, [pc, #92]	; (800869c <xTaskIncrementTick+0x168>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4915      	ldr	r1, [pc, #84]	; (8008698 <xTaskIncrementTick+0x164>)
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d907      	bls.n	8008664 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e004      	b.n	8008664 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800865a:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <xTaskIncrementTick+0x16c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	4a0f      	ldr	r2, [pc, #60]	; (80086a0 <xTaskIncrementTick+0x16c>)
 8008662:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008664:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <xTaskIncrementTick+0x170>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008670:	697b      	ldr	r3, [r7, #20]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000dfc 	.word	0x20000dfc
 8008680:	20000dd8 	.word	0x20000dd8
 8008684:	20000d8c 	.word	0x20000d8c
 8008688:	20000d90 	.word	0x20000d90
 800868c:	20000dec 	.word	0x20000dec
 8008690:	20000df4 	.word	0x20000df4
 8008694:	20000ddc 	.word	0x20000ddc
 8008698:	20000904 	.word	0x20000904
 800869c:	20000900 	.word	0x20000900
 80086a0:	20000de4 	.word	0x20000de4
 80086a4:	20000de8 	.word	0x20000de8

080086a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ae:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <vTaskSwitchContext+0xb0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086b6:	4b29      	ldr	r3, [pc, #164]	; (800875c <vTaskSwitchContext+0xb4>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086bc:	e046      	b.n	800874c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80086be:	4b27      	ldr	r3, [pc, #156]	; (800875c <vTaskSwitchContext+0xb4>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c4:	4b26      	ldr	r3, [pc, #152]	; (8008760 <vTaskSwitchContext+0xb8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e010      	b.n	80086ee <vTaskSwitchContext+0x46>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vTaskSwitchContext+0x3e>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	491d      	ldr	r1, [pc, #116]	; (8008764 <vTaskSwitchContext+0xbc>)
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0e4      	beq.n	80086cc <vTaskSwitchContext+0x24>
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a15      	ldr	r2, [pc, #84]	; (8008764 <vTaskSwitchContext+0xbc>)
 800870e:	4413      	add	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	605a      	str	r2, [r3, #4]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3308      	adds	r3, #8
 8008724:	429a      	cmp	r2, r3
 8008726:	d104      	bne.n	8008732 <vTaskSwitchContext+0x8a>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <vTaskSwitchContext+0xc0>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4a08      	ldr	r2, [pc, #32]	; (8008760 <vTaskSwitchContext+0xb8>)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <vTaskSwitchContext+0xc0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3354      	adds	r3, #84	; 0x54
 8008748:	4a08      	ldr	r2, [pc, #32]	; (800876c <vTaskSwitchContext+0xc4>)
 800874a:	6013      	str	r3, [r2, #0]
}
 800874c:	bf00      	nop
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000dfc 	.word	0x20000dfc
 800875c:	20000de8 	.word	0x20000de8
 8008760:	20000ddc 	.word	0x20000ddc
 8008764:	20000904 	.word	0x20000904
 8008768:	20000900 	.word	0x20000900
 800876c:	20000018 	.word	0x20000018

08008770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60fb      	str	r3, [r7, #12]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008796:	4b07      	ldr	r3, [pc, #28]	; (80087b4 <vTaskPlaceOnEventList+0x44>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3318      	adds	r3, #24
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fe fae6 	bl	8006d70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087a4:	2101      	movs	r1, #1
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f000 fbd6 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20000900 	.word	0x20000900

080087b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	617b      	str	r3, [r7, #20]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vTaskPlaceOnEventListRestricted+0x54>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3318      	adds	r3, #24
 80087e6:	4619      	mov	r1, r3
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7fe fa9e 	bl	8006d2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	68b8      	ldr	r0, [r7, #8]
 80087fe:	f000 fbab 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
	}
 8008802:	bf00      	nop
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000900 	.word	0x20000900

08008810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60fb      	str	r3, [r7, #12]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3318      	adds	r3, #24
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe facd 	bl	8006de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008846:	4b1f      	ldr	r3, [pc, #124]	; (80088c4 <xTaskRemoveFromEventList+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d11f      	bne.n	800888e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3304      	adds	r3, #4
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fac4 	bl	8006de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <xTaskRemoveFromEventList+0xb8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	429a      	cmp	r2, r3
 8008862:	d903      	bls.n	800886c <xTaskRemoveFromEventList+0x5c>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <xTaskRemoveFromEventList+0xb8>)
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4a14      	ldr	r2, [pc, #80]	; (80088cc <xTaskRemoveFromEventList+0xbc>)
 800887a:	441a      	add	r2, r3
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	3304      	adds	r3, #4
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f7fe fa51 	bl	8006d2a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8008888:	f000 f9bc 	bl	8008c04 <prvResetNextTaskUnblockTime>
 800888c:	e005      	b.n	800889a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	3318      	adds	r3, #24
 8008892:	4619      	mov	r1, r3
 8008894:	480e      	ldr	r0, [pc, #56]	; (80088d0 <xTaskRemoveFromEventList+0xc0>)
 8008896:	f7fe fa48 	bl	8006d2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <xTaskRemoveFromEventList+0xc4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d905      	bls.n	80088b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <xTaskRemoveFromEventList+0xc8>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	e001      	b.n	80088b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088b8:	697b      	ldr	r3, [r7, #20]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000dfc 	.word	0x20000dfc
 80088c8:	20000ddc 	.word	0x20000ddc
 80088cc:	20000904 	.word	0x20000904
 80088d0:	20000d94 	.word	0x20000d94
 80088d4:	20000900 	.word	0x20000900
 80088d8:	20000de8 	.word	0x20000de8

080088dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <vTaskInternalSetTimeOutState+0x24>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <vTaskInternalSetTimeOutState+0x28>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	605a      	str	r2, [r3, #4]
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20000dec 	.word	0x20000dec
 8008904:	20000dd8 	.word	0x20000dd8

08008908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	613b      	str	r3, [r7, #16]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	60fb      	str	r3, [r7, #12]
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800894a:	f000 ff97 	bl	800987c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <xTaskCheckForTimeOut+0xbc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008966:	d102      	bne.n	800896e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e023      	b.n	80089b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <xTaskCheckForTimeOut+0xc0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d007      	beq.n	800898a <xTaskCheckForTimeOut+0x82>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e015      	b.n	80089b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	429a      	cmp	r2, r3
 8008992:	d20b      	bcs.n	80089ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff9b 	bl	80088dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e004      	b.n	80089b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089b2:	2301      	movs	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089b6:	f000 ff91 	bl	80098dc <vPortExitCritical>

	return xReturn;
 80089ba:	69fb      	ldr	r3, [r7, #28]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000dd8 	.word	0x20000dd8
 80089c8:	20000dec 	.word	0x20000dec

080089cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <vTaskMissedYield+0x14>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	bf00      	nop
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000de8 	.word	0x20000de8

080089e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089ec:	f000 f8a8 	bl	8008b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089f0:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <prvIdleTask+0x70>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d907      	bls.n	8008a08 <prvIdleTask+0x24>
			{
				taskYIELD();
 80089f8:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <prvIdleTask+0x74>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008a08:	f7ff fc8c 	bl	8008324 <prvGetExpectedIdleTime>
 8008a0c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d9eb      	bls.n	80089ec <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8008a14:	f7ff fc78 	bl	8008308 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <prvIdleTask+0x78>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <prvIdleTask+0x7c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d20a      	bcs.n	8008a3a <prvIdleTask+0x56>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	60bb      	str	r3, [r7, #8]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8008a3a:	f7ff fc73 	bl	8008324 <prvGetExpectedIdleTime>
 8008a3e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d902      	bls.n	8008a4c <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 ffb8 	bl	80099bc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8008a4c:	f7ff fca0 	bl	8008390 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8008a50:	e7cc      	b.n	80089ec <prvIdleTask+0x8>
 8008a52:	bf00      	nop
 8008a54:	20000904 	.word	0x20000904
 8008a58:	e000ed04 	.word	0xe000ed04
 8008a5c:	20000df4 	.word	0x20000df4
 8008a60:	20000dd8 	.word	0x20000dd8

08008a64 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <eTaskConfirmSleepModeStatus+0x4c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	71fb      	strb	r3, [r7, #7]
 8008a7e:	e010      	b.n	8008aa2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <eTaskConfirmSleepModeStatus+0x50>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	71fb      	strb	r3, [r7, #7]
 8008a8c:	e009      	b.n	8008aa2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <eTaskConfirmSleepModeStatus+0x54>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b0a      	ldr	r3, [pc, #40]	; (8008abc <eTaskConfirmSleepModeStatus+0x58>)
 8008a94:	6819      	ldr	r1, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	1acb      	subs	r3, r1, r3
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d101      	bne.n	8008aa2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
	}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000d94 	.word	0x20000d94
 8008ab4:	20000de8 	.word	0x20000de8
 8008ab8:	20000dc0 	.word	0x20000dc0
 8008abc:	20000dd4 	.word	0x20000dd4

08008ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e00c      	b.n	8008ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a12      	ldr	r2, [pc, #72]	; (8008b20 <prvInitialiseTaskLists+0x60>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f8fa 	bl	8006cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b37      	cmp	r3, #55	; 0x37
 8008aea:	d9ef      	bls.n	8008acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aec:	480d      	ldr	r0, [pc, #52]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008aee:	f7fe f8f1 	bl	8006cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008af4:	f7fe f8ee 	bl	8006cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af8:	480c      	ldr	r0, [pc, #48]	; (8008b2c <prvInitialiseTaskLists+0x6c>)
 8008afa:	f7fe f8eb 	bl	8006cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008afe:	480c      	ldr	r0, [pc, #48]	; (8008b30 <prvInitialiseTaskLists+0x70>)
 8008b00:	f7fe f8e8 	bl	8006cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b04:	480b      	ldr	r0, [pc, #44]	; (8008b34 <prvInitialiseTaskLists+0x74>)
 8008b06:	f7fe f8e5 	bl	8006cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <prvInitialiseTaskLists+0x78>)
 8008b0c:	4a05      	ldr	r2, [pc, #20]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <prvInitialiseTaskLists+0x7c>)
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000904 	.word	0x20000904
 8008b24:	20000d64 	.word	0x20000d64
 8008b28:	20000d78 	.word	0x20000d78
 8008b2c:	20000d94 	.word	0x20000d94
 8008b30:	20000da8 	.word	0x20000da8
 8008b34:	20000dc0 	.word	0x20000dc0
 8008b38:	20000d8c 	.word	0x20000d8c
 8008b3c:	20000d90 	.word	0x20000d90

08008b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b46:	e019      	b.n	8008b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b48:	f000 fe98 	bl	800987c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4c:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <prvCheckTasksWaitingTermination+0x50>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe f941 	bl	8006de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a0b      	ldr	r2, [pc, #44]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b68:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b72:	f000 feb3 	bl	80098dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f810 	bl	8008b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e1      	bne.n	8008b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000da8 	.word	0x20000da8
 8008b94:	20000dd4 	.word	0x20000dd4
 8008b98:	20000dbc 	.word	0x20000dbc

08008b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3354      	adds	r3, #84	; 0x54
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f004 ff49 	bl	800da40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d108      	bne.n	8008bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 f907 	bl	8009dd0 <vPortFree>
				vPortFree( pxTCB );
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 f904 	bl	8009dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bc8:	e018      	b.n	8008bfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d103      	bne.n	8008bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 f8fb 	bl	8009dd0 <vPortFree>
	}
 8008bda:	e00f      	b.n	8008bfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d00a      	beq.n	8008bfc <prvDeleteTCB+0x60>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <prvDeleteTCB+0x5e>
	}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <prvResetNextTaskUnblockTime+0x38>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c14:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <prvResetNextTaskUnblockTime+0x3c>)
 8008c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c1c:	e008      	b.n	8008c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1e:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <prvResetNextTaskUnblockTime+0x38>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a04      	ldr	r2, [pc, #16]	; (8008c40 <prvResetNextTaskUnblockTime+0x3c>)
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000d8c 	.word	0x20000d8c
 8008c40:	20000df4 	.word	0x20000df4

08008c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	; (8008c78 <xTaskGetSchedulerState+0x34>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c52:	2301      	movs	r3, #1
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	e008      	b.n	8008c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c58:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <xTaskGetSchedulerState+0x38>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c60:	2302      	movs	r3, #2
 8008c62:	607b      	str	r3, [r7, #4]
 8008c64:	e001      	b.n	8008c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c66:	2300      	movs	r3, #0
 8008c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c6a:	687b      	ldr	r3, [r7, #4]
	}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000de0 	.word	0x20000de0
 8008c7c:	20000dfc 	.word	0x20000dfc

08008c80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d051      	beq.n	8008d3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <xTaskPriorityInherit+0xc4>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d241      	bcs.n	8008d28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	db06      	blt.n	8008cba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <xTaskPriorityInherit+0xc4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6959      	ldr	r1, [r3, #20]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4a1f      	ldr	r2, [pc, #124]	; (8008d48 <xTaskPriorityInherit+0xc8>)
 8008ccc:	4413      	add	r3, r2
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	d122      	bne.n	8008d18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe f882 	bl	8006de0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <xTaskPriorityInherit+0xc4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <xTaskPriorityInherit+0xcc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d903      	bls.n	8008cfa <xTaskPriorityInherit+0x7a>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <xTaskPriorityInherit+0xcc>)
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4a10      	ldr	r2, [pc, #64]	; (8008d48 <xTaskPriorityInherit+0xc8>)
 8008d08:	441a      	add	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7fe f80a 	bl	8006d2a <vListInsertEnd>
 8008d16:	e004      	b.n	8008d22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <xTaskPriorityInherit+0xc4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	e008      	b.n	8008d3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <xTaskPriorityInherit+0xc4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d201      	bcs.n	8008d3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000900 	.word	0x20000900
 8008d48:	20000904 	.word	0x20000904
 8008d4c:	20000ddc 	.word	0x20000ddc

08008d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d056      	beq.n	8008e14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d66:	4b2e      	ldr	r3, [pc, #184]	; (8008e20 <xTaskPriorityDisinherit+0xd0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d00a      	beq.n	8008d86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60bb      	str	r3, [r7, #8]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	1e5a      	subs	r2, r3, #1
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d02c      	beq.n	8008e14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d128      	bne.n	8008e14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe f80a 	bl	8006de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <xTaskPriorityDisinherit+0xd4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d903      	bls.n	8008df4 <xTaskPriorityDisinherit+0xa4>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <xTaskPriorityDisinherit+0xd4>)
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df8:	4613      	mov	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4a09      	ldr	r2, [pc, #36]	; (8008e28 <xTaskPriorityDisinherit+0xd8>)
 8008e02:	441a      	add	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7fd ff8d 	bl	8006d2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e10:	2301      	movs	r3, #1
 8008e12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e14:	697b      	ldr	r3, [r7, #20]
	}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20000900 	.word	0x20000900
 8008e24:	20000ddc 	.word	0x20000ddc
 8008e28:	20000904 	.word	0x20000904

08008e2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d06a      	beq.n	8008f1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d902      	bls.n	8008e72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	e002      	b.n	8008e78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d04b      	beq.n	8008f1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d146      	bne.n	8008f1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d10a      	bne.n	8008eac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60bb      	str	r3, [r7, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db04      	blt.n	8008eca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	6959      	ldr	r1, [r3, #20]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4a13      	ldr	r2, [pc, #76]	; (8008f28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008eda:	4413      	add	r3, r2
 8008edc:	4299      	cmp	r1, r3
 8008ede:	d11c      	bne.n	8008f1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fd ff7b 	bl	8006de0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d903      	bls.n	8008efe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	4a0c      	ldr	r2, [pc, #48]	; (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f0c:	441a      	add	r2, r3
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f7fd ff08 	bl	8006d2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f1a:	bf00      	nop
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000900 	.word	0x20000900
 8008f28:	20000904 	.word	0x20000904
 8008f2c:	20000ddc 	.word	0x20000ddc

08008f30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f34:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f42:	3201      	adds	r2, #1
 8008f44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008f46:	4b03      	ldr	r3, [pc, #12]	; (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f48:	681b      	ldr	r3, [r3, #0]
	}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	20000900 	.word	0x20000900

08008f58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f62:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f68:	4b20      	ldr	r3, [pc, #128]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd ff36 	bl	8006de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f7a:	d10a      	bne.n	8008f92 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4819      	ldr	r0, [pc, #100]	; (8008ff0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f8c:	f7fd fecd 	bl	8006d2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f90:	e026      	b.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4413      	add	r3, r2
 8008f98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d209      	bcs.n	8008fbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008faa:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fd feda 	bl	8006d70 <vListInsert>
}
 8008fbc:	e010      	b.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fd fed0 	bl	8006d70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d202      	bcs.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008fda:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000dd8 	.word	0x20000dd8
 8008fec:	20000900 	.word	0x20000900
 8008ff0:	20000dc0 	.word	0x20000dc0
 8008ff4:	20000d90 	.word	0x20000d90
 8008ff8:	20000d8c 	.word	0x20000d8c
 8008ffc:	20000df4 	.word	0x20000df4

08009000 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	; 0x28
 8009004:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800900a:	f000 fb05 	bl	8009618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800900e:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <xTimerCreateTimerTask+0x80>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d021      	beq.n	800905a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800901e:	1d3a      	adds	r2, r7, #4
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f7fd fe39 	bl	8006ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	9202      	str	r2, [sp, #8]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	2302      	movs	r3, #2
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	460a      	mov	r2, r1
 8009040:	4910      	ldr	r1, [pc, #64]	; (8009084 <xTimerCreateTimerTask+0x84>)
 8009042:	4811      	ldr	r0, [pc, #68]	; (8009088 <xTimerCreateTimerTask+0x88>)
 8009044:	f7fe ff04 	bl	8007e50 <xTaskCreateStatic>
 8009048:	4603      	mov	r3, r0
 800904a:	4a10      	ldr	r2, [pc, #64]	; (800908c <xTimerCreateTimerTask+0x8c>)
 800904c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <xTimerCreateTimerTask+0x8c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009056:	2301      	movs	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	613b      	str	r3, [r7, #16]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009076:	697b      	ldr	r3, [r7, #20]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20000e30 	.word	0x20000e30
 8009084:	0800dc10 	.word	0x0800dc10
 8009088:	080091c5 	.word	0x080091c5
 800908c:	20000e34 	.word	0x20000e34

08009090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	; 0x28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800909e:	2300      	movs	r3, #0
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xTimerGenericCommand+0x2e>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	623b      	str	r3, [r7, #32]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090be:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <xTimerGenericCommand+0x98>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d02a      	beq.n	800911c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b05      	cmp	r3, #5
 80090d6:	dc18      	bgt.n	800910a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090d8:	f7ff fdb4 	bl	8008c44 <xTaskGetSchedulerState>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d109      	bne.n	80090f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <xTimerGenericCommand+0x98>)
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f107 0110 	add.w	r1, r7, #16
 80090ea:	2300      	movs	r3, #0
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	f7fe f84f 	bl	8007190 <xQueueGenericSend>
 80090f2:	6278      	str	r0, [r7, #36]	; 0x24
 80090f4:	e012      	b.n	800911c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <xTimerGenericCommand+0x98>)
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	f107 0110 	add.w	r1, r7, #16
 80090fe:	2300      	movs	r3, #0
 8009100:	2200      	movs	r2, #0
 8009102:	f7fe f845 	bl	8007190 <xQueueGenericSend>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24
 8009108:	e008      	b.n	800911c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <xTimerGenericCommand+0x98>)
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f107 0110 	add.w	r1, r7, #16
 8009112:	2300      	movs	r3, #0
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	f7fe f939 	bl	800738c <xQueueGenericSendFromISR>
 800911a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000e30 	.word	0x20000e30

0800912c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af02      	add	r7, sp, #8
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <prvProcessExpiredTimer+0x94>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fd fe4b 	bl	8006de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d022      	beq.n	800919e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	18d1      	adds	r1, r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6978      	ldr	r0, [r7, #20]
 8009166:	f000 f8cf 	bl	8009308 <prvInsertTimerInActiveList>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01f      	beq.n	80091b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009170:	2300      	movs	r3, #0
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2300      	movs	r3, #0
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	2100      	movs	r1, #0
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff88 	bl	8009090 <xTimerGenericCommand>
 8009180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d113      	bne.n	80091b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60fb      	str	r3, [r7, #12]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	6978      	ldr	r0, [r7, #20]
 80091b6:	4798      	blx	r3
}
 80091b8:	bf00      	nop
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000e28 	.word	0x20000e28

080091c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091cc:	f107 0308 	add.w	r3, r7, #8
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f857 	bl	8009284 <prvGetNextExpireTime>
 80091d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f803 	bl	80091e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091e2:	f000 f8d3 	bl	800938c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091e6:	e7f1      	b.n	80091cc <prvTimerTask+0x8>

080091e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091f2:	f7ff f889 	bl	8008308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f864 	bl	80092c8 <prvSampleTimeNow>
 8009200:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d130      	bne.n	800926a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <prvProcessTimerOrBlockTask+0x3c>
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	429a      	cmp	r2, r3
 8009214:	d806      	bhi.n	8009224 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009216:	f7ff f8bb 	bl	8008390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ff85 	bl	800912c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009222:	e024      	b.n	800926e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <prvProcessTimerOrBlockTask+0x90>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <prvProcessTimerOrBlockTask+0x50>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <prvProcessTimerOrBlockTask+0x52>
 8009238:	2300      	movs	r3, #0
 800923a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <prvProcessTimerOrBlockTask+0x94>)
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4619      	mov	r1, r3
 800924a:	f7fe fdcd 	bl	8007de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800924e:	f7ff f89f 	bl	8008390 <xTaskResumeAll>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <prvProcessTimerOrBlockTask+0x98>)
 800925a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
}
 8009268:	e001      	b.n	800926e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800926a:	f7ff f891 	bl	8008390 <xTaskResumeAll>
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000e2c 	.word	0x20000e2c
 800927c:	20000e30 	.word	0x20000e30
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <prvGetNextExpireTime+0x40>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <prvGetNextExpireTime+0x16>
 8009296:	2201      	movs	r2, #1
 8009298:	e000      	b.n	800929c <prvGetNextExpireTime+0x18>
 800929a:	2200      	movs	r2, #0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a8:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <prvGetNextExpireTime+0x40>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e001      	b.n	80092b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	20000e28 	.word	0x20000e28

080092c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092d0:	f7ff f8fc 	bl	80084cc <xTaskGetTickCount>
 80092d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092d6:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <prvSampleTimeNow+0x3c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d205      	bcs.n	80092ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092e0:	f000 f936 	bl	8009550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e002      	b.n	80092f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092f2:	4a04      	ldr	r2, [pc, #16]	; (8009304 <prvSampleTimeNow+0x3c>)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092f8:	68fb      	ldr	r3, [r7, #12]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000e38 	.word	0x20000e38

08009308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	429a      	cmp	r2, r3
 800932c:	d812      	bhi.n	8009354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e01b      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009342:	4b10      	ldr	r3, [pc, #64]	; (8009384 <prvInsertTimerInActiveList+0x7c>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fd fd0f 	bl	8006d70 <vListInsert>
 8009352:	e012      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d206      	bcs.n	800936a <prvInsertTimerInActiveList+0x62>
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d302      	bcc.n	800936a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	e007      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <prvInsertTimerInActiveList+0x80>)
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3304      	adds	r3, #4
 8009372:	4619      	mov	r1, r3
 8009374:	4610      	mov	r0, r2
 8009376:	f7fd fcfb 	bl	8006d70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800937a:	697b      	ldr	r3, [r7, #20]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000e2c 	.word	0x20000e2c
 8009388:	20000e28 	.word	0x20000e28

0800938c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08e      	sub	sp, #56	; 0x38
 8009390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009392:	e0ca      	b.n	800952a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	da18      	bge.n	80093cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	3304      	adds	r3, #4
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61fb      	str	r3, [r7, #28]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c2:	6850      	ldr	r0, [r2, #4]
 80093c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c6:	6892      	ldr	r2, [r2, #8]
 80093c8:	4611      	mov	r1, r2
 80093ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f2c0 80aa 	blt.w	8009528 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d004      	beq.n	80093ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	3304      	adds	r3, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fd fcfb 	bl	8006de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ea:	463b      	mov	r3, r7
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff ff6b 	bl	80092c8 <prvSampleTimeNow>
 80093f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	f200 8097 	bhi.w	800952a <prvProcessReceivedCommands+0x19e>
 80093fc:	a201      	add	r2, pc, #4	; (adr r2, 8009404 <prvProcessReceivedCommands+0x78>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	0800942d 	.word	0x0800942d
 8009408:	0800942d 	.word	0x0800942d
 800940c:	0800942d 	.word	0x0800942d
 8009410:	080094a1 	.word	0x080094a1
 8009414:	080094b5 	.word	0x080094b5
 8009418:	080094ff 	.word	0x080094ff
 800941c:	0800942d 	.word	0x0800942d
 8009420:	0800942d 	.word	0x0800942d
 8009424:	080094a1 	.word	0x080094a1
 8009428:	080094b5 	.word	0x080094b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	18d1      	adds	r1, r2, r3
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944c:	f7ff ff5c 	bl	8009308 <prvInsertTimerInActiveList>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d069      	beq.n	800952a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05e      	beq.n	800952a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	441a      	add	r2, r3
 8009474:	2300      	movs	r3, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	2100      	movs	r1, #0
 800947c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947e:	f7ff fe07 	bl	8009090 <xTimerGenericCommand>
 8009482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d14f      	bne.n	800952a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	61bb      	str	r3, [r7, #24]
}
 800949c:	bf00      	nop
 800949e:	e7fe      	b.n	800949e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094b2:	e03a      	b.n	800952a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	617b      	str	r3, [r7, #20]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	699a      	ldr	r2, [r3, #24]
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	18d1      	adds	r1, r2, r3
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f8:	f7ff ff06 	bl	8009308 <prvInsertTimerInActiveList>
					break;
 80094fc:	e015      	b.n	800952a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b00      	cmp	r3, #0
 800950a:	d103      	bne.n	8009514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800950c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950e:	f000 fc5f 	bl	8009dd0 <vPortFree>
 8009512:	e00a      	b.n	800952a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800951a:	f023 0301 	bic.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009526:	e000      	b.n	800952a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <prvProcessReceivedCommands+0x1c0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	1d39      	adds	r1, r7, #4
 8009530:	2200      	movs	r2, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe f850 	bl	80075d8 <xQueueReceive>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f af2a 	bne.w	8009394 <prvProcessReceivedCommands+0x8>
	}
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	3730      	adds	r7, #48	; 0x30
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000e30 	.word	0x20000e30

08009550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009556:	e048      	b.n	80095ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009558:	4b2d      	ldr	r3, [pc, #180]	; (8009610 <prvSwitchTimerLists+0xc0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009562:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <prvSwitchTimerLists+0xc0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3304      	adds	r3, #4
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd fc35 	bl	8006de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d02e      	beq.n	80095ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	4413      	add	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	429a      	cmp	r2, r3
 800959c:	d90e      	bls.n	80095bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095aa:	4b19      	ldr	r3, [pc, #100]	; (8009610 <prvSwitchTimerLists+0xc0>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7fd fbdb 	bl	8006d70 <vListInsert>
 80095ba:	e016      	b.n	80095ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095bc:	2300      	movs	r3, #0
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	2300      	movs	r3, #0
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	2100      	movs	r1, #0
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fd62 	bl	8009090 <xTimerGenericCommand>
 80095cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	603b      	str	r3, [r7, #0]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <prvSwitchTimerLists+0xc0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1b1      	bne.n	8009558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <prvSwitchTimerLists+0xc0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095fa:	4b06      	ldr	r3, [pc, #24]	; (8009614 <prvSwitchTimerLists+0xc4>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a04      	ldr	r2, [pc, #16]	; (8009610 <prvSwitchTimerLists+0xc0>)
 8009600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009602:	4a04      	ldr	r2, [pc, #16]	; (8009614 <prvSwitchTimerLists+0xc4>)
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000e28 	.word	0x20000e28
 8009614:	20000e2c 	.word	0x20000e2c

08009618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800961e:	f000 f92d 	bl	800987c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d120      	bne.n	800966c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800962a:	4814      	ldr	r0, [pc, #80]	; (800967c <prvCheckForValidListAndQueue+0x64>)
 800962c:	f7fd fb52 	bl	8006cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009630:	4813      	ldr	r0, [pc, #76]	; (8009680 <prvCheckForValidListAndQueue+0x68>)
 8009632:	f7fd fb4f 	bl	8006cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009636:	4b13      	ldr	r3, [pc, #76]	; (8009684 <prvCheckForValidListAndQueue+0x6c>)
 8009638:	4a10      	ldr	r2, [pc, #64]	; (800967c <prvCheckForValidListAndQueue+0x64>)
 800963a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800963c:	4b12      	ldr	r3, [pc, #72]	; (8009688 <prvCheckForValidListAndQueue+0x70>)
 800963e:	4a10      	ldr	r2, [pc, #64]	; (8009680 <prvCheckForValidListAndQueue+0x68>)
 8009640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009642:	2300      	movs	r3, #0
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	4b11      	ldr	r3, [pc, #68]	; (800968c <prvCheckForValidListAndQueue+0x74>)
 8009648:	4a11      	ldr	r2, [pc, #68]	; (8009690 <prvCheckForValidListAndQueue+0x78>)
 800964a:	2110      	movs	r1, #16
 800964c:	200a      	movs	r0, #10
 800964e:	f7fd fc59 	bl	8006f04 <xQueueGenericCreateStatic>
 8009652:	4603      	mov	r3, r0
 8009654:	4a08      	ldr	r2, [pc, #32]	; (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <prvCheckForValidListAndQueue+0x60>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	490b      	ldr	r1, [pc, #44]	; (8009694 <prvCheckForValidListAndQueue+0x7c>)
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fb6c 	bl	8007d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800966c:	f000 f936 	bl	80098dc <vPortExitCritical>
}
 8009670:	bf00      	nop
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000e30 	.word	0x20000e30
 800967c:	20000e00 	.word	0x20000e00
 8009680:	20000e14 	.word	0x20000e14
 8009684:	20000e28 	.word	0x20000e28
 8009688:	20000e2c 	.word	0x20000e2c
 800968c:	20000edc 	.word	0x20000edc
 8009690:	20000e3c 	.word	0x20000e3c
 8009694:	0800dc18 	.word	0x0800dc18

08009698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3b04      	subs	r3, #4
 80096a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3b04      	subs	r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f023 0201 	bic.w	r2, r3, #1
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3b04      	subs	r3, #4
 80096c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096c8:	4a08      	ldr	r2, [pc, #32]	; (80096ec <pxPortInitialiseStack+0x54>)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b14      	subs	r3, #20
 80096d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3b20      	subs	r3, #32
 80096de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096e0:	68fb      	ldr	r3, [r7, #12]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr
 80096ec:	080096f1 	.word	0x080096f1

080096f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <prvTaskExitError+0x54>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009702:	d00a      	beq.n	800971a <prvTaskExitError+0x2a>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	60fb      	str	r3, [r7, #12]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <prvTaskExitError+0x28>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	60bb      	str	r3, [r7, #8]
}
 800972c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800972e:	bf00      	nop
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0fc      	beq.n	8009730 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000010 	.word	0x20000010
	...

08009750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <pxCurrentTCBConst2>)
 8009752:	6819      	ldr	r1, [r3, #0]
 8009754:	6808      	ldr	r0, [r1, #0]
 8009756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800975a:	f380 8809 	msr	PSP, r0
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f04f 0000 	mov.w	r0, #0
 8009766:	f380 8811 	msr	BASEPRI, r0
 800976a:	f04e 0e0d 	orr.w	lr, lr, #13
 800976e:	4770      	bx	lr

08009770 <pxCurrentTCBConst2>:
 8009770:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop

08009778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009778:	4806      	ldr	r0, [pc, #24]	; (8009794 <prvPortStartFirstTask+0x1c>)
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	6800      	ldr	r0, [r0, #0]
 800977e:	f380 8808 	msr	MSP, r0
 8009782:	b662      	cpsie	i
 8009784:	b661      	cpsie	f
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	df00      	svc	0
 8009790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009792:	bf00      	nop
 8009794:	e000ed08 	.word	0xe000ed08

08009798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800979e:	4b32      	ldr	r3, [pc, #200]	; (8009868 <xPortStartScheduler+0xd0>)
 80097a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	22ff      	movs	r2, #255	; 0xff
 80097ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	4b2a      	ldr	r3, [pc, #168]	; (800986c <xPortStartScheduler+0xd4>)
 80097c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097c6:	4b2a      	ldr	r3, [pc, #168]	; (8009870 <xPortStartScheduler+0xd8>)
 80097c8:	2207      	movs	r2, #7
 80097ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097cc:	e009      	b.n	80097e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097ce:	4b28      	ldr	r3, [pc, #160]	; (8009870 <xPortStartScheduler+0xd8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	4a26      	ldr	r2, [pc, #152]	; (8009870 <xPortStartScheduler+0xd8>)
 80097d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d0ef      	beq.n	80097ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ee:	4b20      	ldr	r3, [pc, #128]	; (8009870 <xPortStartScheduler+0xd8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f1c3 0307 	rsb	r3, r3, #7
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d00a      	beq.n	8009810 <xPortStartScheduler+0x78>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60bb      	str	r3, [r7, #8]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <xPortStartScheduler+0xd8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	4a16      	ldr	r2, [pc, #88]	; (8009870 <xPortStartScheduler+0xd8>)
 8009818:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800981a:	4b15      	ldr	r3, [pc, #84]	; (8009870 <xPortStartScheduler+0xd8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009822:	4a13      	ldr	r2, [pc, #76]	; (8009870 <xPortStartScheduler+0xd8>)
 8009824:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	b2da      	uxtb	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <xPortStartScheduler+0xdc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a10      	ldr	r2, [pc, #64]	; (8009874 <xPortStartScheduler+0xdc>)
 8009834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <xPortStartScheduler+0xdc>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a0d      	ldr	r2, [pc, #52]	; (8009874 <xPortStartScheduler+0xdc>)
 8009840:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009844:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009846:	f000 f985 	bl	8009b54 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800984a:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <xPortStartScheduler+0xe0>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009850:	f7ff ff92 	bl	8009778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009854:	f7fe ff28 	bl	80086a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009858:	f7ff ff4a 	bl	80096f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	e000e400 	.word	0xe000e400
 800986c:	20000f38 	.word	0x20000f38
 8009870:	20000f3c 	.word	0x20000f3c
 8009874:	e000ed20 	.word	0xe000ed20
 8009878:	20000010 	.word	0x20000010

0800987c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	607b      	str	r3, [r7, #4]
}
 8009894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009896:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <vPortEnterCritical+0x58>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	4a0d      	ldr	r2, [pc, #52]	; (80098d4 <vPortEnterCritical+0x58>)
 800989e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <vPortEnterCritical+0x58>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d10f      	bne.n	80098c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098a8:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <vPortEnterCritical+0x5c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	603b      	str	r3, [r7, #0]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <vPortEnterCritical+0x4a>
	}
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000010 	.word	0x20000010
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <vPortExitCritical+0x4c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <vPortExitCritical+0x24>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	607b      	str	r3, [r7, #4]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009900:	4b09      	ldr	r3, [pc, #36]	; (8009928 <vPortExitCritical+0x4c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3b01      	subs	r3, #1
 8009906:	4a08      	ldr	r2, [pc, #32]	; (8009928 <vPortExitCritical+0x4c>)
 8009908:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <vPortExitCritical+0x4c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d105      	bne.n	800991e <vPortExitCritical+0x42>
 8009912:	2300      	movs	r3, #0
 8009914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f383 8811 	msr	BASEPRI, r3
}
 800991c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr
 8009928:	20000010 	.word	0x20000010
 800992c:	00000000 	.word	0x00000000

08009930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009930:	f3ef 8009 	mrs	r0, PSP
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <pxCurrentTCBConst>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009940:	6010      	str	r0, [r2, #0]
 8009942:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009946:	f04f 0050 	mov.w	r0, #80	; 0x50
 800994a:	f380 8811 	msr	BASEPRI, r0
 800994e:	f7fe feab 	bl	80086a8 <vTaskSwitchContext>
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800995e:	6819      	ldr	r1, [r3, #0]
 8009960:	6808      	ldr	r0, [r1, #0]
 8009962:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009966:	f380 8809 	msr	PSP, r0
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	4770      	bx	lr

08009970 <pxCurrentTCBConst>:
 8009970:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe fdcf 	bl	8008534 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <SysTick_Handler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4b5d      	ldr	r3, [pc, #372]	; (8009b3c <vPortSuppressTicksAndSleep+0x180>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d902      	bls.n	80099d4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80099ce:	4b5b      	ldr	r3, [pc, #364]	; (8009b3c <vPortSuppressTicksAndSleep+0x180>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80099d4:	4b5a      	ldr	r3, [pc, #360]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a59      	ldr	r2, [pc, #356]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80099e0:	4b58      	ldr	r3, [pc, #352]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4957      	ldr	r1, [pc, #348]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 80099ea:	6809      	ldr	r1, [r1, #0]
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80099f4:	4b55      	ldr	r3, [pc, #340]	; (8009b4c <vPortSuppressTicksAndSleep+0x190>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d904      	bls.n	8009a08 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80099fe:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <vPortSuppressTicksAndSleep+0x190>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009a08:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8009a0a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8009a0e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8009a12:	f7ff f827 	bl	8008a64 <eTaskConfirmSleepModeStatus>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d110      	bne.n	8009a3e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009a1c:	4b49      	ldr	r3, [pc, #292]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 8009a1e:	4a4c      	ldr	r2, [pc, #304]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009a24:	4b46      	ldr	r3, [pc, #280]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a45      	ldr	r2, [pc, #276]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009a30:	4b45      	ldr	r3, [pc, #276]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a46      	ldr	r2, [pc, #280]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009a36:	3b01      	subs	r3, #1
 8009a38:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8009a3a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8009a3c:	e07a      	b.n	8009b34 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8009a3e:	4a44      	ldr	r2, [pc, #272]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a44:	4b3f      	ldr	r3, [pc, #252]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009a4a:	4b3d      	ldr	r3, [pc, #244]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a3c      	ldr	r2, [pc, #240]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a50:	f043 0301 	orr.w	r3, r3, #1
 8009a54:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8009a5a:	f107 030c 	add.w	r3, r7, #12
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f7 fb0e 	bl	8001080 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8009a6a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8009a6e:	bf30      	wfi
				__asm volatile( "isb" );
 8009a70:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8009a74:	1d3b      	adds	r3, r7, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f7 fb0b 	bl	8001092 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8009a7c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8009a7e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009a82:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8009a86:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8009a88:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009a8c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8009a90:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a92:	2206      	movs	r2, #6
 8009a94:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8009a96:	4b2a      	ldr	r3, [pc, #168]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01d      	beq.n	8009ade <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8009aa2:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	1acb      	subs	r3, r1, r3
 8009aae:	4413      	add	r3, r2
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8009ab4:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <vPortSuppressTicksAndSleep+0x190>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d304      	bcc.n	8009ac8 <vPortSuppressTicksAndSleep+0x10c>
 8009abe:	4b22      	ldr	r3, [pc, #136]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d903      	bls.n	8009ad0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8009ac8:	4b1f      	ldr	r3, [pc, #124]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	61bb      	str	r3, [r7, #24]
 8009adc:	e018      	b.n	8009b10 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a19      	ldr	r2, [pc, #100]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	fb02 f203 	mul.w	r2, r2, r3
 8009ae8:	4b16      	ldr	r3, [pc, #88]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8009af0:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afa:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	3301      	adds	r3, #1
 8009b00:	4a11      	ldr	r2, [pc, #68]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	fb02 f203 	mul.w	r2, r2, r3
 8009b08:	4911      	ldr	r1, [pc, #68]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <vPortSuppressTicksAndSleep+0x188>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a09      	ldr	r2, [pc, #36]	; (8009b40 <vPortSuppressTicksAndSleep+0x184>)
 8009b1c:	f043 0301 	orr.w	r3, r3, #1
 8009b20:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8009b22:	69b8      	ldr	r0, [r7, #24]
 8009b24:	f7fe fce0 	bl	80084e8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009b28:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <vPortSuppressTicksAndSleep+0x18c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a08      	ldr	r2, [pc, #32]	; (8009b50 <vPortSuppressTicksAndSleep+0x194>)
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009b32:	b662      	cpsie	i
	}
 8009b34:	bf00      	nop
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000f30 	.word	0x20000f30
 8009b40:	e000e010 	.word	0xe000e010
 8009b44:	e000e018 	.word	0xe000e018
 8009b48:	20000f2c 	.word	0x20000f2c
 8009b4c:	20000f34 	.word	0x20000f34
 8009b50:	e000e014 	.word	0xe000e014

08009b54 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009b58:	4b14      	ldr	r3, [pc, #80]	; (8009bac <vPortSetupTimerInterrupt+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <vPortSetupTimerInterrupt+0x5c>)
 8009b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	4a13      	ldr	r2, [pc, #76]	; (8009bb4 <vPortSetupTimerInterrupt+0x60>)
 8009b66:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009b68:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <vPortSetupTimerInterrupt+0x60>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	4a10      	ldr	r2, [pc, #64]	; (8009bb8 <vPortSetupTimerInterrupt+0x64>)
 8009b76:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009b78:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <vPortSetupTimerInterrupt+0x68>)
 8009b7a:	222d      	movs	r2, #45	; 0x2d
 8009b7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <vPortSetupTimerInterrupt+0x6c>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <vPortSetupTimerInterrupt+0x70>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <vPortSetupTimerInterrupt+0x58>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <vPortSetupTimerInterrupt+0x5c>)
 8009b90:	fba2 2303 	umull	r2, r3, r2, r3
 8009b94:	099b      	lsrs	r3, r3, #6
 8009b96:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <vPortSetupTimerInterrupt+0x74>)
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b9c:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <vPortSetupTimerInterrupt+0x6c>)
 8009b9e:	2207      	movs	r2, #7
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000004 	.word	0x20000004
 8009bb0:	10624dd3 	.word	0x10624dd3
 8009bb4:	20000f2c 	.word	0x20000f2c
 8009bb8:	20000f30 	.word	0x20000f30
 8009bbc:	20000f34 	.word	0x20000f34
 8009bc0:	e000e010 	.word	0xe000e010
 8009bc4:	e000e018 	.word	0xe000e018
 8009bc8:	e000e014 	.word	0xe000e014

08009bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bd2:	f3ef 8305 	mrs	r3, IPSR
 8009bd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b0f      	cmp	r3, #15
 8009bdc:	d914      	bls.n	8009c08 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bde:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <vPortValidateInterruptPriority+0x6c>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009be8:	4b14      	ldr	r3, [pc, #80]	; (8009c3c <vPortValidateInterruptPriority+0x70>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	7afa      	ldrb	r2, [r7, #11]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d20a      	bcs.n	8009c08 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	607b      	str	r3, [r7, #4]
}
 8009c04:	bf00      	nop
 8009c06:	e7fe      	b.n	8009c06 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <vPortValidateInterruptPriority+0x74>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c10:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <vPortValidateInterruptPriority+0x78>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d90a      	bls.n	8009c2e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	603b      	str	r3, [r7, #0]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <vPortValidateInterruptPriority+0x60>
	}
 8009c2e:	bf00      	nop
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc80      	pop	{r7}
 8009c36:	4770      	bx	lr
 8009c38:	e000e3f0 	.word	0xe000e3f0
 8009c3c:	20000f38 	.word	0x20000f38
 8009c40:	e000ed0c 	.word	0xe000ed0c
 8009c44:	20000f3c 	.word	0x20000f3c

08009c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c54:	f7fe fb58 	bl	8008308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c58:	4b58      	ldr	r3, [pc, #352]	; (8009dbc <pvPortMalloc+0x174>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c60:	f000 f910 	bl	8009e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c64:	4b56      	ldr	r3, [pc, #344]	; (8009dc0 <pvPortMalloc+0x178>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 808e 	bne.w	8009d8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01d      	beq.n	8009cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c78:	2208      	movs	r2, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d014      	beq.n	8009cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d069      	beq.n	8009d8e <pvPortMalloc+0x146>
 8009cba:	4b42      	ldr	r3, [pc, #264]	; (8009dc4 <pvPortMalloc+0x17c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d864      	bhi.n	8009d8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cc4:	4b40      	ldr	r3, [pc, #256]	; (8009dc8 <pvPortMalloc+0x180>)
 8009cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cc8:	4b3f      	ldr	r3, [pc, #252]	; (8009dc8 <pvPortMalloc+0x180>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cce:	e004      	b.n	8009cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d903      	bls.n	8009cec <pvPortMalloc+0xa4>
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f1      	bne.n	8009cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cec:	4b33      	ldr	r3, [pc, #204]	; (8009dbc <pvPortMalloc+0x174>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d04b      	beq.n	8009d8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	2308      	movs	r3, #8
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d91f      	bls.n	8009d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <pvPortMalloc+0xf8>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	613b      	str	r3, [r7, #16]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d52:	69b8      	ldr	r0, [r7, #24]
 8009d54:	f000 f8f8 	bl	8009f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <pvPortMalloc+0x17c>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <pvPortMalloc+0x17c>)
 8009d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d66:	4b17      	ldr	r3, [pc, #92]	; (8009dc4 <pvPortMalloc+0x17c>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <pvPortMalloc+0x184>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d203      	bcs.n	8009d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d72:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <pvPortMalloc+0x17c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a15      	ldr	r2, [pc, #84]	; (8009dcc <pvPortMalloc+0x184>)
 8009d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <pvPortMalloc+0x178>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d8e:	f7fe faff 	bl	8008390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <pvPortMalloc+0x16a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60fb      	str	r3, [r7, #12]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <pvPortMalloc+0x168>
	return pvReturn;
 8009db2:	69fb      	ldr	r3, [r7, #28]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	; 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20001b48 	.word	0x20001b48
 8009dc0:	20001b54 	.word	0x20001b54
 8009dc4:	20001b4c 	.word	0x20001b4c
 8009dc8:	20001b40 	.word	0x20001b40
 8009dcc:	20001b50 	.word	0x20001b50

08009dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d048      	beq.n	8009e74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009de2:	2308      	movs	r3, #8
 8009de4:	425b      	negs	r3, r3
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	4b21      	ldr	r3, [pc, #132]	; (8009e7c <vPortFree+0xac>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <vPortFree+0x44>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <vPortFree+0x62>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60bb      	str	r3, [r7, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <vPortFree+0xac>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d019      	beq.n	8009e74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d115      	bne.n	8009e74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <vPortFree+0xac>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	43db      	mvns	r3, r3
 8009e52:	401a      	ands	r2, r3
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e58:	f7fe fa56 	bl	8008308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <vPortFree+0xb0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4413      	add	r3, r2
 8009e66:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vPortFree+0xb0>)
 8009e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e6a:	6938      	ldr	r0, [r7, #16]
 8009e6c:	f000 f86c 	bl	8009f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e70:	f7fe fa8e 	bl	8008390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e74:	bf00      	nop
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20001b54 	.word	0x20001b54
 8009e80:	20001b4c 	.word	0x20001b4c

08009e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <prvHeapInit+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <prvHeapInit+0xac>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <prvHeapInit+0xb0>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ec2:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <prvHeapInit+0xb0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <prvHeapInit+0xb4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvHeapInit+0xb4>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <prvHeapInit+0xb8>)
 8009f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <prvHeapInit+0xbc>)
 8009f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f1c:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvHeapInit+0xc0>)
 8009f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	20000f40 	.word	0x20000f40
 8009f34:	20001b40 	.word	0x20001b40
 8009f38:	20001b48 	.word	0x20001b48
 8009f3c:	20001b50 	.word	0x20001b50
 8009f40:	20001b4c 	.word	0x20001b4c
 8009f44:	20001b54 	.word	0x20001b54

08009f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f50:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <prvInsertBlockIntoFreeList+0xa8>)
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e002      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x14>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d8f7      	bhi.n	8009f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d108      	bne.n	8009f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d118      	bne.n	8009fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <prvInsertBlockIntoFreeList+0xac>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d00d      	beq.n	8009fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <prvInsertBlockIntoFreeList+0xac>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e003      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d002      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr
 8009ff0:	20001b40 	.word	0x20001b40
 8009ff4:	20001b48 	.word	0x20001b48

08009ff8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800a000:	4a21      	ldr	r2, [pc, #132]	; (800a088 <RadioInit+0x90>)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800a006:	4b21      	ldr	r3, [pc, #132]	; (800a08c <RadioInit+0x94>)
 800a008:	2200      	movs	r2, #0
 800a00a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800a00c:	4b1f      	ldr	r3, [pc, #124]	; (800a08c <RadioInit+0x94>)
 800a00e:	2200      	movs	r2, #0
 800a010:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800a012:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <RadioInit+0x94>)
 800a014:	2200      	movs	r2, #0
 800a016:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800a018:	481d      	ldr	r0, [pc, #116]	; (800a090 <RadioInit+0x98>)
 800a01a:	f001 fe7b 	bl	800bd14 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800a01e:	2000      	movs	r0, #0
 800a020:	f001 f818 	bl	800b054 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800a024:	f002 f90c 	bl	800c240 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800a028:	2100      	movs	r1, #0
 800a02a:	2000      	movs	r0, #0
 800a02c:	f002 fc62 	bl	800c8f4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800a030:	2204      	movs	r2, #4
 800a032:	2100      	movs	r1, #0
 800a034:	2001      	movs	r0, #1
 800a036:	f002 fa8d 	bl	800c554 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a03a:	2300      	movs	r3, #0
 800a03c:	2200      	movs	r2, #0
 800a03e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a042:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a046:	f002 f9c1 	bl	800c3cc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800a04a:	f000 fe95 	bl	800ad78 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800a04e:	2300      	movs	r3, #0
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	4b10      	ldr	r3, [pc, #64]	; (800a094 <RadioInit+0x9c>)
 800a054:	2200      	movs	r2, #0
 800a056:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a05a:	480f      	ldr	r0, [pc, #60]	; (800a098 <RadioInit+0xa0>)
 800a05c:	f003 faa6 	bl	800d5ac <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <RadioInit+0xa4>)
 800a066:	2200      	movs	r2, #0
 800a068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a06c:	480c      	ldr	r0, [pc, #48]	; (800a0a0 <RadioInit+0xa8>)
 800a06e:	f003 fa9d 	bl	800d5ac <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800a072:	4809      	ldr	r0, [pc, #36]	; (800a098 <RadioInit+0xa0>)
 800a074:	f003 fb3e 	bl	800d6f4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800a078:	4809      	ldr	r0, [pc, #36]	; (800a0a0 <RadioInit+0xa8>)
 800a07a:	f003 fb3b 	bl	800d6f4 <UTIL_TIMER_Stop>
}
 800a07e:	bf00      	nop
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001c58 	.word	0x20001c58
 800a08c:	20002554 	.word	0x20002554
 800a090:	0800b139 	.word	0x0800b139
 800a094:	0800b0c1 	.word	0x0800b0c1
 800a098:	200025ac 	.word	0x200025ac
 800a09c:	0800b0d5 	.word	0x0800b0d5
 800a0a0:	200025c4 	.word	0x200025c4

0800a0a4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800a0a8:	f001 fe76 	bl	800bd98 <SUBGRF_GetOperatingMode>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b07      	cmp	r3, #7
 800a0b0:	d00a      	beq.n	800a0c8 <RadioGetStatus+0x24>
 800a0b2:	2b07      	cmp	r3, #7
 800a0b4:	dc0a      	bgt.n	800a0cc <RadioGetStatus+0x28>
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d002      	beq.n	800a0c0 <RadioGetStatus+0x1c>
 800a0ba:	2b05      	cmp	r3, #5
 800a0bc:	d002      	beq.n	800a0c4 <RadioGetStatus+0x20>
 800a0be:	e005      	b.n	800a0cc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e004      	b.n	800a0ce <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e002      	b.n	800a0ce <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e000      	b.n	800a0ce <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800a0cc:	2300      	movs	r3, #0
    }
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800a0de:	4a25      	ldr	r2, [pc, #148]	; (800a174 <RadioSetModem+0xa0>)
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f002 ffc9 	bl	800d07e <RFW_SetRadioModem>
    switch( modem )
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d80b      	bhi.n	800a10c <RadioSetModem+0x38>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <RadioSetModem+0x28>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a11b 	.word	0x0800a11b
 800a100:	0800a141 	.word	0x0800a141
 800a104:	0800a14f 	.word	0x0800a14f
 800a108:	0800a15d 	.word	0x0800a15d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a10c:	2000      	movs	r0, #0
 800a10e:	f002 f9fb 	bl	800c508 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800a112:	4b18      	ldr	r3, [pc, #96]	; (800a174 <RadioSetModem+0xa0>)
 800a114:	2200      	movs	r2, #0
 800a116:	735a      	strb	r2, [r3, #13]
        break;
 800a118:	e028      	b.n	800a16c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800a11a:	2001      	movs	r0, #1
 800a11c:	f002 f9f4 	bl	800c508 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800a120:	4b14      	ldr	r3, [pc, #80]	; (800a174 <RadioSetModem+0xa0>)
 800a122:	7b5a      	ldrb	r2, [r3, #13]
 800a124:	4b13      	ldr	r3, [pc, #76]	; (800a174 <RadioSetModem+0xa0>)
 800a126:	7b1b      	ldrb	r3, [r3, #12]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d01e      	beq.n	800a16a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800a12c:	4b11      	ldr	r3, [pc, #68]	; (800a174 <RadioSetModem+0xa0>)
 800a12e:	7b1a      	ldrb	r2, [r3, #12]
 800a130:	4b10      	ldr	r3, [pc, #64]	; (800a174 <RadioSetModem+0xa0>)
 800a132:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <RadioSetModem+0xa0>)
 800a136:	7b5b      	ldrb	r3, [r3, #13]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 ff8b 	bl	800b054 <RadioSetPublicNetwork>
        }
        break;
 800a13e:	e014      	b.n	800a16a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800a140:	2002      	movs	r0, #2
 800a142:	f002 f9e1 	bl	800c508 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800a146:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <RadioSetModem+0xa0>)
 800a148:	2200      	movs	r2, #0
 800a14a:	735a      	strb	r2, [r3, #13]
        break;
 800a14c:	e00e      	b.n	800a16c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800a14e:	2002      	movs	r0, #2
 800a150:	f002 f9da 	bl	800c508 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <RadioSetModem+0xa0>)
 800a156:	2200      	movs	r2, #0
 800a158:	735a      	strb	r2, [r3, #13]
        break;
 800a15a:	e007      	b.n	800a16c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a15c:	2000      	movs	r0, #0
 800a15e:	f002 f9d3 	bl	800c508 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <RadioSetModem+0xa0>)
 800a164:	2200      	movs	r2, #0
 800a166:	735a      	strb	r2, [r3, #13]
        break;
 800a168:	e000      	b.n	800a16c <RadioSetModem+0x98>
        break;
 800a16a:	bf00      	nop
    }
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20002554 	.word	0x20002554

0800a178 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f002 f97f 	bl	800c484 <SUBGRF_SetRfFrequency>
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b090      	sub	sp, #64	; 0x40
 800a192:	af0a      	add	r7, sp, #40	; 0x28
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800a1aa:	f000 fdf8 	bl	800ad9e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	f7ff ff90 	bl	800a0d4 <RadioSetModem>

    RadioSetChannel( freq );
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ffdf 	bl	800a178 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9308      	str	r3, [sp, #32]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9307      	str	r3, [sp, #28]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9306      	str	r3, [sp, #24]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	2303      	movs	r3, #3
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f000 f840 	bl	800a270 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f000 fddb 	bl	800adac <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800a1f6:	f000 ff5b 	bl	800b0b0 <RadioGetWakeupTime>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f7 ffad 	bl	800215c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800a202:	f003 fb11 	bl	800d828 <UTIL_TIMER_GetCurrentTime>
 800a206:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a208:	e00d      	b.n	800a226 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800a20a:	2000      	movs	r0, #0
 800a20c:	f000 fea0 	bl	800af50 <RadioRssi>
 800a210:	4603      	mov	r3, r0
 800a212:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800a214:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	dd02      	ble.n	800a226 <RadioIsChannelFree+0x98>
        {
            status = false;
 800a220:	2300      	movs	r3, #0
 800a222:	75fb      	strb	r3, [r7, #23]
            break;
 800a224:	e006      	b.n	800a234 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a226:	6938      	ldr	r0, [r7, #16]
 800a228:	f003 fb10 	bl	800d84c <UTIL_TIMER_GetElapsedTime>
 800a22c:	4602      	mov	r2, r0
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	4293      	cmp	r3, r2
 800a232:	d8ea      	bhi.n	800a20a <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800a234:	f000 fdb3 	bl	800ad9e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800a238:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800a24c:	2001      	movs	r0, #1
 800a24e:	f7ff ff41 	bl	800a0d4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a252:	2300      	movs	r3, #0
 800a254:	2200      	movs	r2, #0
 800a256:	2100      	movs	r1, #0
 800a258:	2000      	movs	r0, #0
 800a25a:	f002 f8b7 	bl	800c3cc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800a25e:	f001 fe6c 	bl	800bf3a <SUBGRF_GetRandom>
 800a262:	6078      	str	r0, [r7, #4]

    return rnd;
 800a264:	687b      	ldr	r3, [r7, #4]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
	...

0800a270 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
 800a27a:	461a      	mov	r2, r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
 800a280:	4613      	mov	r3, r2
 800a282:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800a284:	4abd      	ldr	r2, [pc, #756]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a286:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a28a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800a28c:	f002 feb5 	bl	800cffa <RFW_DeInit>
    if( rxContinuous == true )
 800a290:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800a29c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800a2a4:	4ab6      	ldr	r2, [pc, #728]	; (800a580 <RadioSetRxConfig+0x310>)
 800a2a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a2aa:	7013      	strb	r3, [r2, #0]
 800a2ac:	e002      	b.n	800a2b4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800a2ae:	4bb4      	ldr	r3, [pc, #720]	; (800a580 <RadioSetRxConfig+0x310>)
 800a2b0:	22ff      	movs	r2, #255	; 0xff
 800a2b2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d009      	beq.n	800a2ce <RadioSetRxConfig+0x5e>
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	f300 81da 	bgt.w	800a674 <RadioSetRxConfig+0x404>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80bf 	beq.w	800a444 <RadioSetRxConfig+0x1d4>
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	f000 812c 	beq.w	800a524 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800a2cc:	e1d2      	b.n	800a674 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f001 ff78 	bl	800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a2d4:	4ba9      	ldr	r3, [pc, #676]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a2dc:	4aa7      	ldr	r2, [pc, #668]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800a2e2:	4ba6      	ldr	r3, [pc, #664]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a2e4:	2209      	movs	r2, #9
 800a2e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800a2ea:	4ba4      	ldr	r3, [pc, #656]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a2ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2f0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a2f2:	68b8      	ldr	r0, [r7, #8]
 800a2f4:	f002 fdb2 	bl	800ce5c <SUBGRF_GetFskBandwidthRegValue>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4b9f      	ldr	r3, [pc, #636]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a302:	4b9e      	ldr	r3, [pc, #632]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a304:	2200      	movs	r2, #0
 800a306:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a308:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	4b9b      	ldr	r3, [pc, #620]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a310:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800a312:	4b9a      	ldr	r3, [pc, #616]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a314:	2200      	movs	r2, #0
 800a316:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800a318:	4b98      	ldr	r3, [pc, #608]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a31a:	2210      	movs	r2, #16
 800a31c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a31e:	4b97      	ldr	r3, [pc, #604]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a320:	2200      	movs	r2, #0
 800a322:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800a324:	4b95      	ldr	r3, [pc, #596]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a326:	2200      	movs	r2, #0
 800a328:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a32a:	4b95      	ldr	r3, [pc, #596]	; (800a580 <RadioSetRxConfig+0x310>)
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	4b93      	ldr	r3, [pc, #588]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a330:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a332:	4b92      	ldr	r3, [pc, #584]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a334:	2201      	movs	r2, #1
 800a336:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800a338:	4b90      	ldr	r3, [pc, #576]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800a33e:	2004      	movs	r0, #4
 800a340:	f7ff fec8 	bl	800a0d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a344:	488f      	ldr	r0, [pc, #572]	; (800a584 <RadioSetRxConfig+0x314>)
 800a346:	f002 f96b 	bl	800c620 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a34a:	488f      	ldr	r0, [pc, #572]	; (800a588 <RadioSetRxConfig+0x318>)
 800a34c:	f002 fa34 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a350:	4a8e      	ldr	r2, [pc, #568]	; (800a58c <RadioSetRxConfig+0x31c>)
 800a352:	f107 031c 	add.w	r3, r7, #28
 800a356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a35a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a35e:	f107 031c 	add.w	r3, r7, #28
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fd67 	bl	800be36 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a368:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a36c:	f001 fdb2 	bl	800bed4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800a370:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800a374:	f000 fe0b 	bl	800af8e <RadioRead>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800a37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a382:	f023 0310 	bic.w	r3, r3, #16
 800a386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800a38a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a38e:	4619      	mov	r1, r3
 800a390:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800a394:	f000 fde9 	bl	800af6a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800a398:	2104      	movs	r1, #4
 800a39a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800a39e:	f000 fde4 	bl	800af6a <RadioWrite>
            modReg= RadioRead(0x89b);
 800a3a2:	f640 009b 	movw	r0, #2203	; 0x89b
 800a3a6:	f000 fdf2 	bl	800af8e <RadioRead>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800a3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b4:	f023 031c 	bic.w	r3, r3, #28
 800a3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800a3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3c0:	f043 0308 	orr.w	r3, r3, #8
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f640 009b 	movw	r0, #2203	; 0x89b
 800a3cc:	f000 fdcd 	bl	800af6a <RadioWrite>
            modReg= RadioRead(0x6d1);
 800a3d0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800a3d4:	f000 fddb 	bl	800af8e <RadioRead>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800a3de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e2:	f023 0318 	bic.w	r3, r3, #24
 800a3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800a3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ee:	f043 0318 	orr.w	r3, r3, #24
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800a3fa:	f000 fdb6 	bl	800af6a <RadioWrite>
            modReg= RadioRead(0x6ac);
 800a3fe:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a402:	f000 fdc4 	bl	800af8e <RadioRead>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800a418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a41c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800a420:	b2db      	uxtb	r3, r3
 800a422:	4619      	mov	r1, r3
 800a424:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a428:	f000 fd9f 	bl	800af6a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800a42c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a42e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a432:	fb02 f303 	mul.w	r3, r2, r3
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	4a4f      	ldr	r2, [pc, #316]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a440:	6093      	str	r3, [r2, #8]
            break;
 800a442:	e118      	b.n	800a676 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800a444:	2000      	movs	r0, #0
 800a446:	f001 febd 	bl	800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a44a:	4b4c      	ldr	r3, [pc, #304]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a452:	4a4a      	ldr	r2, [pc, #296]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a458:	4b48      	ldr	r3, [pc, #288]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a45a:	220b      	movs	r2, #11
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a460:	68b8      	ldr	r0, [r7, #8]
 800a462:	f002 fcfb 	bl	800ce5c <SUBGRF_GetFskBandwidthRegValue>
 800a466:	4603      	mov	r3, r0
 800a468:	461a      	mov	r2, r3
 800a46a:	4b44      	ldr	r3, [pc, #272]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a470:	4b42      	ldr	r3, [pc, #264]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a472:	2200      	movs	r2, #0
 800a474:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a476:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	4b3f      	ldr	r3, [pc, #252]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a47e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a480:	4b3e      	ldr	r3, [pc, #248]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a482:	2204      	movs	r2, #4
 800a484:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800a486:	4b3d      	ldr	r3, [pc, #244]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a488:	2218      	movs	r2, #24
 800a48a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a48c:	4b3b      	ldr	r3, [pc, #236]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a48e:	2200      	movs	r2, #0
 800a490:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a492:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a496:	f083 0301 	eor.w	r3, r3, #1
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	461a      	mov	r2, r3
 800a49e:	4b37      	ldr	r3, [pc, #220]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4a0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a4a2:	4b37      	ldr	r3, [pc, #220]	; (800a580 <RadioSetRxConfig+0x310>)
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	4b35      	ldr	r3, [pc, #212]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4a8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800a4aa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a4b2:	4b32      	ldr	r3, [pc, #200]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4b4:	22f2      	movs	r2, #242	; 0xf2
 800a4b6:	75da      	strb	r2, [r3, #23]
 800a4b8:	e002      	b.n	800a4c0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a4ba:	4b30      	ldr	r3, [pc, #192]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4bc:	2201      	movs	r2, #1
 800a4be:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a4c0:	4b2e      	ldr	r3, [pc, #184]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800a4c6:	f000 fc6a 	bl	800ad9e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a4ca:	4b2c      	ldr	r3, [pc, #176]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a4cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fdfa 	bl	800a0d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a4e0:	4828      	ldr	r0, [pc, #160]	; (800a584 <RadioSetRxConfig+0x314>)
 800a4e2:	f002 f89d 	bl	800c620 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a4e6:	4828      	ldr	r0, [pc, #160]	; (800a588 <RadioSetRxConfig+0x318>)
 800a4e8:	f002 f966 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a4ec:	4a28      	ldr	r2, [pc, #160]	; (800a590 <RadioSetRxConfig+0x320>)
 800a4ee:	f107 0314 	add.w	r3, r7, #20
 800a4f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4fa:	f107 0314 	add.w	r3, r7, #20
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 fc99 	bl	800be36 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a504:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a508:	f001 fce4 	bl	800bed4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800a50c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a50e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	461a      	mov	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51e:	4a17      	ldr	r2, [pc, #92]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a520:	6093      	str	r3, [r2, #8]
            break;
 800a522:	e0a8      	b.n	800a676 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800a524:	2000      	movs	r0, #0
 800a526:	f001 fe4d 	bl	800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a52a:	4b14      	ldr	r3, [pc, #80]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	b2da      	uxtb	r2, r3
 800a536:	4b11      	ldr	r3, [pc, #68]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a53c:	4a15      	ldr	r2, [pc, #84]	; (800a594 <RadioSetRxConfig+0x324>)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	781a      	ldrb	r2, [r3, #0]
 800a544:	4b0d      	ldr	r3, [pc, #52]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800a54a:	4a0c      	ldr	r2, [pc, #48]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d105      	bne.n	800a564 <RadioSetRxConfig+0x2f4>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b0b      	cmp	r3, #11
 800a55c:	d008      	beq.n	800a570 <RadioSetRxConfig+0x300>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b0c      	cmp	r3, #12
 800a562:	d005      	beq.n	800a570 <RadioSetRxConfig+0x300>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d116      	bne.n	800a598 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b0c      	cmp	r3, #12
 800a56e:	d113      	bne.n	800a598 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a570:	4b02      	ldr	r3, [pc, #8]	; (800a57c <RadioSetRxConfig+0x30c>)
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a578:	e012      	b.n	800a5a0 <RadioSetRxConfig+0x330>
 800a57a:	bf00      	nop
 800a57c:	20002554 	.word	0x20002554
 800a580:	20000014 	.word	0x20000014
 800a584:	2000258c 	.word	0x2000258c
 800a588:	20002562 	.word	0x20002562
 800a58c:	0800dc20 	.word	0x0800dc20
 800a590:	0800dc28 	.word	0x0800dc28
 800a594:	0800de14 	.word	0x0800de14
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a598:	4b39      	ldr	r3, [pc, #228]	; (800a680 <RadioSetRxConfig+0x410>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a5a0:	4b37      	ldr	r3, [pc, #220]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a5a6:	4b36      	ldr	r3, [pc, #216]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5ac:	2b05      	cmp	r3, #5
 800a5ae:	d004      	beq.n	800a5ba <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800a5b0:	4b33      	ldr	r3, [pc, #204]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a5b6:	2b06      	cmp	r3, #6
 800a5b8:	d10a      	bne.n	800a5d0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800a5ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a5bc:	2b0b      	cmp	r3, #11
 800a5be:	d803      	bhi.n	800a5c8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800a5c0:	4b2f      	ldr	r3, [pc, #188]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5c2:	220c      	movs	r2, #12
 800a5c4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800a5c6:	e006      	b.n	800a5d6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a5c8:	4a2d      	ldr	r2, [pc, #180]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a5cc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800a5ce:	e002      	b.n	800a5d6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a5d0:	4a2b      	ldr	r2, [pc, #172]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a5d4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a5d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800a5da:	4b29      	ldr	r3, [pc, #164]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5dc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a5de:	4b29      	ldr	r3, [pc, #164]	; (800a684 <RadioSetRxConfig+0x414>)
 800a5e0:	781a      	ldrb	r2, [r3, #0]
 800a5e2:	4b27      	ldr	r3, [pc, #156]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5e4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800a5e6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800a5ea:	4b25      	ldr	r3, [pc, #148]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5ec:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800a5f0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800a5f4:	4b22      	ldr	r3, [pc, #136]	; (800a680 <RadioSetRxConfig+0x410>)
 800a5f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800a5fa:	f000 fbd0 	bl	800ad9e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a5fe:	4b20      	ldr	r3, [pc, #128]	; (800a680 <RadioSetRxConfig+0x410>)
 800a600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf14      	ite	ne
 800a608:	2301      	movne	r3, #1
 800a60a:	2300      	moveq	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd60 	bl	800a0d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a614:	481c      	ldr	r0, [pc, #112]	; (800a688 <RadioSetRxConfig+0x418>)
 800a616:	f002 f803 	bl	800c620 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a61a:	481c      	ldr	r0, [pc, #112]	; (800a68c <RadioSetRxConfig+0x41c>)
 800a61c:	f002 f8cc 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a620:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a622:	b2db      	uxtb	r3, r3
 800a624:	4618      	mov	r0, r3
 800a626:	f001 fddc 	bl	800c1e2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <RadioSetRxConfig+0x410>)
 800a62c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a630:	2b01      	cmp	r3, #1
 800a632:	d10d      	bne.n	800a650 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800a634:	f240 7036 	movw	r0, #1846	; 0x736
 800a638:	f002 fa1a 	bl	800ca70 <SUBGRF_ReadRegister>
 800a63c:	4603      	mov	r3, r0
 800a63e:	f023 0304 	bic.w	r3, r3, #4
 800a642:	b2db      	uxtb	r3, r3
 800a644:	4619      	mov	r1, r3
 800a646:	f240 7036 	movw	r0, #1846	; 0x736
 800a64a:	f002 f9fd 	bl	800ca48 <SUBGRF_WriteRegister>
 800a64e:	e00c      	b.n	800a66a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800a650:	f240 7036 	movw	r0, #1846	; 0x736
 800a654:	f002 fa0c 	bl	800ca70 <SUBGRF_ReadRegister>
 800a658:	4603      	mov	r3, r0
 800a65a:	f043 0304 	orr.w	r3, r3, #4
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	4619      	mov	r1, r3
 800a662:	f240 7036 	movw	r0, #1846	; 0x736
 800a666:	f002 f9ef 	bl	800ca48 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <RadioSetRxConfig+0x410>)
 800a66c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a670:	609a      	str	r2, [r3, #8]
            break;
 800a672:	e000      	b.n	800a676 <RadioSetRxConfig+0x406>
            break;
 800a674:	bf00      	nop
    }
}
 800a676:	bf00      	nop
 800a678:	3728      	adds	r7, #40	; 0x28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20002554 	.word	0x20002554
 800a684:	20000014 	.word	0x20000014
 800a688:	2000258c 	.word	0x2000258c
 800a68c:	20002562 	.word	0x20002562

0800a690 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60ba      	str	r2, [r7, #8]
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800a6a2:	f002 fcaa 	bl	800cffa <RFW_DeInit>
    switch( modem )
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	f000 80d7 	beq.w	800a85c <RadioSetTxConfig+0x1cc>
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	f300 80e6 	bgt.w	800a880 <RadioSetTxConfig+0x1f0>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <RadioSetTxConfig+0x2e>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d061      	beq.n	800a780 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800a6bc:	e0e0      	b.n	800a880 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a6be:	4b7c      	ldr	r3, [pc, #496]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a6c6:	4a7a      	ldr	r2, [pc, #488]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a6cc:	4b78      	ldr	r3, [pc, #480]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6ce:	220b      	movs	r2, #11
 800a6d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f002 fbc1 	bl	800ce5c <SUBGRF_GetFskBandwidthRegValue>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4b74      	ldr	r3, [pc, #464]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800a6e4:	4a72      	ldr	r2, [pc, #456]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a6ea:	4b71      	ldr	r3, [pc, #452]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a6f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	4b6e      	ldr	r3, [pc, #440]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6f8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a6fa:	4b6d      	ldr	r3, [pc, #436]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800a700:	4b6b      	ldr	r3, [pc, #428]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a702:	2218      	movs	r2, #24
 800a704:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a706:	4b6a      	ldr	r3, [pc, #424]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a708:	2200      	movs	r2, #0
 800a70a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a70c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a710:	f083 0301 	eor.w	r3, r3, #1
 800a714:	b2db      	uxtb	r3, r3
 800a716:	461a      	mov	r2, r3
 800a718:	4b65      	ldr	r3, [pc, #404]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a71a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800a71c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a724:	4b62      	ldr	r3, [pc, #392]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a726:	22f2      	movs	r2, #242	; 0xf2
 800a728:	75da      	strb	r2, [r3, #23]
 800a72a:	e002      	b.n	800a732 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a72c:	4b60      	ldr	r3, [pc, #384]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a72e:	2201      	movs	r2, #1
 800a730:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a732:	4b5f      	ldr	r3, [pc, #380]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a734:	2201      	movs	r2, #1
 800a736:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800a738:	f000 fb31 	bl	800ad9e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a73c:	4b5c      	ldr	r3, [pc, #368]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a73e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	bf14      	ite	ne
 800a746:	2301      	movne	r3, #1
 800a748:	2300      	moveq	r3, #0
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff fcc1 	bl	800a0d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a752:	4858      	ldr	r0, [pc, #352]	; (800a8b4 <RadioSetTxConfig+0x224>)
 800a754:	f001 ff64 	bl	800c620 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a758:	4857      	ldr	r0, [pc, #348]	; (800a8b8 <RadioSetTxConfig+0x228>)
 800a75a:	f002 f82d 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a75e:	4a57      	ldr	r2, [pc, #348]	; (800a8bc <RadioSetTxConfig+0x22c>)
 800a760:	f107 0310 	add.w	r3, r7, #16
 800a764:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a768:	e883 0003 	stmia.w	r3, {r0, r1}
 800a76c:	f107 0310 	add.w	r3, r7, #16
 800a770:	4618      	mov	r0, r3
 800a772:	f001 fb60 	bl	800be36 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a77a:	f001 fbab 	bl	800bed4 <SUBGRF_SetWhiteningSeed>
            break;
 800a77e:	e080      	b.n	800a882 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a780:	4b4b      	ldr	r3, [pc, #300]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	4b48      	ldr	r3, [pc, #288]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a78e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800a792:	4a4b      	ldr	r2, [pc, #300]	; (800a8c0 <RadioSetTxConfig+0x230>)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4413      	add	r3, r2
 800a798:	781a      	ldrb	r2, [r3, #0]
 800a79a:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a79c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800a7a0:	4a43      	ldr	r2, [pc, #268]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a7a6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d105      	bne.n	800a7bc <RadioSetTxConfig+0x12c>
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	2b0b      	cmp	r3, #11
 800a7b4:	d008      	beq.n	800a7c8 <RadioSetTxConfig+0x138>
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	2b0c      	cmp	r3, #12
 800a7ba:	d005      	beq.n	800a7c8 <RadioSetTxConfig+0x138>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d107      	bne.n	800a7d2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	2b0c      	cmp	r3, #12
 800a7c6:	d104      	bne.n	800a7d2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800a7c8:	4b39      	ldr	r3, [pc, #228]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a7d0:	e003      	b.n	800a7da <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a7d2:	4b37      	ldr	r3, [pc, #220]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a7da:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7dc:	2201      	movs	r2, #1
 800a7de:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a7e0:	4b33      	ldr	r3, [pc, #204]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	d004      	beq.n	800a7f4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800a7ea:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a7f0:	2b06      	cmp	r3, #6
 800a7f2:	d10a      	bne.n	800a80a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800a7f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7f6:	2b0b      	cmp	r3, #11
 800a7f8:	d803      	bhi.n	800a802 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800a7fa:	4b2d      	ldr	r3, [pc, #180]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a7fc:	220c      	movs	r2, #12
 800a7fe:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800a800:	e006      	b.n	800a810 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a802:	4a2b      	ldr	r2, [pc, #172]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a804:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a806:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800a808:	e002      	b.n	800a810 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a80a:	4a29      	ldr	r2, [pc, #164]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a80c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a80e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a810:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a814:	4b26      	ldr	r3, [pc, #152]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a816:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a818:	4b2a      	ldr	r3, [pc, #168]	; (800a8c4 <RadioSetTxConfig+0x234>)
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a81e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800a820:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a824:	4b22      	ldr	r3, [pc, #136]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a826:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800a82a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800a82e:	4b20      	ldr	r3, [pc, #128]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800a834:	f000 fab3 	bl	800ad9e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800a838:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a83a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bf14      	ite	ne
 800a842:	2301      	movne	r3, #1
 800a844:	2300      	moveq	r3, #0
 800a846:	b2db      	uxtb	r3, r3
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fc43 	bl	800a0d4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a84e:	4819      	ldr	r0, [pc, #100]	; (800a8b4 <RadioSetTxConfig+0x224>)
 800a850:	f001 fee6 	bl	800c620 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a854:	4818      	ldr	r0, [pc, #96]	; (800a8b8 <RadioSetTxConfig+0x228>)
 800a856:	f001 ffaf 	bl	800c7b8 <SUBGRF_SetPacketParams>
            break;
 800a85a:	e012      	b.n	800a882 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800a85c:	2003      	movs	r0, #3
 800a85e:	f7ff fc39 	bl	800a0d4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a862:	4b13      	ldr	r3, [pc, #76]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a864:	2202      	movs	r2, #2
 800a866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a872:	2216      	movs	r2, #22
 800a874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a878:	480e      	ldr	r0, [pc, #56]	; (800a8b4 <RadioSetTxConfig+0x224>)
 800a87a:	f001 fed1 	bl	800c620 <SUBGRF_SetModulationParams>
            break;
 800a87e:	e000      	b.n	800a882 <RadioSetTxConfig+0x1f2>
            break;
 800a880:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a886:	4618      	mov	r0, r3
 800a888:	f002 f9fa 	bl	800cc80 <SUBGRF_SetRfTxPower>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a892:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800a896:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a898:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a89c:	4618      	mov	r0, r3
 800a89e:	f002 fbc0 	bl	800d022 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a8a2:	4a03      	ldr	r2, [pc, #12]	; (800a8b0 <RadioSetTxConfig+0x220>)
 800a8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a6:	6053      	str	r3, [r2, #4]
}
 800a8a8:	bf00      	nop
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20002554 	.word	0x20002554
 800a8b4:	2000258c 	.word	0x2000258c
 800a8b8:	20002562 	.word	0x20002562
 800a8bc:	0800dc28 	.word	0x0800dc28
 800a8c0:	0800de14 	.word	0x0800de14
 800a8c4:	20000014 	.word	0x20000014

0800a8c8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
    return true;
 800a8d0:	2301      	movs	r3, #1
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr

0800a8dc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	2b0a      	cmp	r3, #10
 800a8ee:	d83e      	bhi.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
 800a8f0:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <RadioGetLoRaBandwidthInHz+0x1c>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	0800a935 	.word	0x0800a935
 800a900:	0800a945 	.word	0x0800a945
 800a904:	0800a955 	.word	0x0800a955
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a963 	.word	0x0800a963
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a96f 	.word	0x0800a96f
 800a918:	0800a92d 	.word	0x0800a92d
 800a91c:	0800a93d 	.word	0x0800a93d
 800a920:	0800a94d 	.word	0x0800a94d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800a924:	f641 6384 	movw	r3, #7812	; 0x1e84
 800a928:	60fb      	str	r3, [r7, #12]
        break;
 800a92a:	e020      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800a92c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800a930:	60fb      	str	r3, [r7, #12]
        break;
 800a932:	e01c      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800a934:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a938:	60fb      	str	r3, [r7, #12]
        break;
 800a93a:	e018      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800a93c:	f245 1361 	movw	r3, #20833	; 0x5161
 800a940:	60fb      	str	r3, [r7, #12]
        break;
 800a942:	e014      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800a944:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a948:	60fb      	str	r3, [r7, #12]
        break;
 800a94a:	e010      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800a94c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800a950:	60fb      	str	r3, [r7, #12]
        break;
 800a952:	e00c      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800a954:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a958:	60fb      	str	r3, [r7, #12]
        break;
 800a95a:	e008      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800a95c:	4b07      	ldr	r3, [pc, #28]	; (800a97c <RadioGetLoRaBandwidthInHz+0xa0>)
 800a95e:	60fb      	str	r3, [r7, #12]
        break;
 800a960:	e005      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <RadioGetLoRaBandwidthInHz+0xa4>)
 800a964:	60fb      	str	r3, [r7, #12]
        break;
 800a966:	e002      	b.n	800a96e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <RadioGetLoRaBandwidthInHz+0xa8>)
 800a96a:	60fb      	str	r3, [r7, #12]
        break;
 800a96c:	bf00      	nop
    }

    return bandwidthInHz;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	bc80      	pop	{r7}
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	0001e848 	.word	0x0001e848
 800a980:	0003d090 	.word	0x0003d090
 800a984:	0007a120 	.word	0x0007a120

0800a988 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	461a      	mov	r2, r3
 800a996:	4603      	mov	r3, r0
 800a998:	70fb      	strb	r3, [r7, #3]
 800a99a:	460b      	mov	r3, r1
 800a99c:	803b      	strh	r3, [r7, #0]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800a9a2:	883b      	ldrh	r3, [r7, #0]
 800a9a4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a9a6:	78ba      	ldrb	r2, [r7, #2]
 800a9a8:	f082 0201 	eor.w	r2, r2, #1
 800a9ac:	b2d2      	uxtb	r2, r2
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	d001      	beq.n	800a9b6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	e000      	b.n	800a9b8 <RadioGetGfskTimeOnAirNumerator+0x30>
 800a9b6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800a9b8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a9ba:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a9be:	7c3b      	ldrb	r3, [r7, #16]
 800a9c0:	7d39      	ldrb	r1, [r7, #20]
 800a9c2:	2900      	cmp	r1, #0
 800a9c4:	d001      	beq.n	800a9ca <RadioGetGfskTimeOnAirNumerator+0x42>
 800a9c6:	2102      	movs	r1, #2
 800a9c8:	e000      	b.n	800a9cc <RadioGetGfskTimeOnAirNumerator+0x44>
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	440b      	add	r3, r1
 800a9ce:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a9d0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr

0800a9dc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b08b      	sub	sp, #44	; 0x2c
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	71fb      	strb	r3, [r7, #7]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	d002      	beq.n	800aa0a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b06      	cmp	r3, #6
 800aa08:	d104      	bne.n	800aa14 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800aa0a:	88bb      	ldrh	r3, [r7, #4]
 800aa0c:	2b0b      	cmp	r3, #11
 800aa0e:	d801      	bhi.n	800aa14 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800aa10:	230c      	movs	r3, #12
 800aa12:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b0b      	cmp	r3, #11
 800aa1e:	d008      	beq.n	800aa32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b0c      	cmp	r3, #12
 800aa24:	d005      	beq.n	800aa32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d105      	bne.n	800aa38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	d102      	bne.n	800aa38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800aa38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800aa3c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800aa3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	d001      	beq.n	800aa4a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800aa46:	2210      	movs	r2, #16
 800aa48:	e000      	b.n	800aa4c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800aa4a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800aa4c:	4413      	add	r3, r2
 800aa4e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800aa54:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800aa56:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	d001      	beq.n	800aa62 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	e000      	b.n	800aa64 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800aa62:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800aa64:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800aa66:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b06      	cmp	r3, #6
 800aa6c:	d803      	bhi.n	800aa76 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	623b      	str	r3, [r7, #32]
 800aa74:	e00e      	b.n	800aa94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d004      	beq.n	800aa8e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	3b02      	subs	r3, #2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	623b      	str	r3, [r7, #32]
 800aa8c:	e002      	b.n	800aa94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da01      	bge.n	800aa9e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800aa9e:	69fa      	ldr	r2, [r7, #28]
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	fb92 f3f3 	sdiv	r3, r2, r3
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	fb02 f203 	mul.w	r2, r2, r3
 800aab2:	88bb      	ldrh	r3, [r7, #4]
 800aab4:	4413      	add	r3, r2
    int32_t intermediate =
 800aab6:	330c      	adds	r3, #12
 800aab8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b06      	cmp	r3, #6
 800aabe:	d802      	bhi.n	800aac6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	3302      	adds	r3, #2
 800aac4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	3b02      	subs	r3, #2
 800aad0:	fa02 f303 	lsl.w	r3, r2, r3
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	372c      	adds	r7, #44	; 0x2c
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
	...

0800aae0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af04      	add	r7, sp, #16
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	461a      	mov	r2, r3
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]

    switch( modem )
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <RadioTimeOnAir+0x28>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d017      	beq.n	800ab36 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800ab06:	e035      	b.n	800ab74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800ab08:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800ab0c:	8c3a      	ldrh	r2, [r7, #32]
 800ab0e:	7bb9      	ldrb	r1, [r7, #14]
 800ab10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff ff32 	bl	800a988 <RadioGetGfskTimeOnAirNumerator>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab2a:	fb02 f303 	mul.w	r3, r2, r3
 800ab2e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	613b      	str	r3, [r7, #16]
        break;
 800ab34:	e01e      	b.n	800ab74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800ab36:	8c39      	ldrh	r1, [r7, #32]
 800ab38:	7bba      	ldrb	r2, [r7, #14]
 800ab3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab3e:	9302      	str	r3, [sp, #8]
 800ab40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	68b8      	ldr	r0, [r7, #8]
 800ab52:	f7ff ff43 	bl	800a9dc <RadioGetLoRaTimeOnAirNumerator>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800ab62:	4a0a      	ldr	r2, [pc, #40]	; (800ab8c <RadioTimeOnAir+0xac>)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4413      	add	r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff feb6 	bl	800a8dc <RadioGetLoRaBandwidthInHz>
 800ab70:	6138      	str	r0, [r7, #16]
        break;
 800ab72:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	4413      	add	r3, r2
 800ab7a:	1e5a      	subs	r2, r3, #1
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800de14 	.word	0x0800de14

0800ab90 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f240 2101 	movw	r1, #513	; 0x201
 800aba4:	f240 2001 	movw	r0, #513	; 0x201
 800aba8:	f001 fc10 	bl	800c3cc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800abac:	4b6e      	ldr	r3, [pc, #440]	; (800ad68 <RadioSend+0x1d8>)
 800abae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800abb2:	2101      	movs	r1, #1
 800abb4:	4618      	mov	r0, r3
 800abb6:	f002 f83b 	bl	800cc30 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800abba:	4b6b      	ldr	r3, [pc, #428]	; (800ad68 <RadioSend+0x1d8>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d112      	bne.n	800abe8 <RadioSend+0x58>
 800abc2:	4b69      	ldr	r3, [pc, #420]	; (800ad68 <RadioSend+0x1d8>)
 800abc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abc8:	2b06      	cmp	r3, #6
 800abca:	d10d      	bne.n	800abe8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800abcc:	f640 0089 	movw	r0, #2185	; 0x889
 800abd0:	f001 ff4e 	bl	800ca70 <SUBGRF_ReadRegister>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f023 0304 	bic.w	r3, r3, #4
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	4619      	mov	r1, r3
 800abde:	f640 0089 	movw	r0, #2185	; 0x889
 800abe2:	f001 ff31 	bl	800ca48 <SUBGRF_WriteRegister>
 800abe6:	e00c      	b.n	800ac02 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800abe8:	f640 0089 	movw	r0, #2185	; 0x889
 800abec:	f001 ff40 	bl	800ca70 <SUBGRF_ReadRegister>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f043 0304 	orr.w	r3, r3, #4
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	4619      	mov	r1, r3
 800abfa:	f640 0089 	movw	r0, #2185	; 0x889
 800abfe:	f001 ff23 	bl	800ca48 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800ac02:	4b59      	ldr	r3, [pc, #356]	; (800ad68 <RadioSend+0x1d8>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	f200 809f 	bhi.w	800ad4a <RadioSend+0x1ba>
 800ac0c:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <RadioSend+0x84>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac3f 	.word	0x0800ac3f
 800ac18:	0800ac25 	.word	0x0800ac25
 800ac1c:	0800ac93 	.word	0x0800ac93
 800ac20:	0800acb3 	.word	0x0800acb3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ac24:	4a50      	ldr	r2, [pc, #320]	; (800ad68 <RadioSend+0x1d8>)
 800ac26:	78fb      	ldrb	r3, [r7, #3]
 800ac28:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ac2a:	4850      	ldr	r0, [pc, #320]	; (800ad6c <RadioSend+0x1dc>)
 800ac2c:	f001 fdc4 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	2200      	movs	r2, #0
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f001 f8ea 	bl	800be10 <SUBGRF_SendPayload>
            break;
 800ac3c:	e086      	b.n	800ad4c <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800ac3e:	f002 f9e2 	bl	800d006 <RFW_Is_Init>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d117      	bne.n	800ac78 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ac48:	f107 020d 	add.w	r2, r7, #13
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f002 f9f0 	bl	800d036 <RFW_TransmitInit>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 8081 	bne.w	800ad60 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ac5e:	7b7a      	ldrb	r2, [r7, #13]
 800ac60:	4b41      	ldr	r3, [pc, #260]	; (800ad68 <RadioSend+0x1d8>)
 800ac62:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ac64:	4841      	ldr	r0, [pc, #260]	; (800ad6c <RadioSend+0x1dc>)
 800ac66:	f001 fda7 	bl	800c7b8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ac6a:	7b7b      	ldrb	r3, [r7, #13]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f8cd 	bl	800be10 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800ac76:	e069      	b.n	800ad4c <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ac78:	4a3b      	ldr	r2, [pc, #236]	; (800ad68 <RadioSend+0x1d8>)
 800ac7a:	78fb      	ldrb	r3, [r7, #3]
 800ac7c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ac7e:	483b      	ldr	r0, [pc, #236]	; (800ad6c <RadioSend+0x1dc>)
 800ac80:	f001 fd9a 	bl	800c7b8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	2200      	movs	r2, #0
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f001 f8c0 	bl	800be10 <SUBGRF_SendPayload>
            break;
 800ac90:	e05c      	b.n	800ad4c <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ac92:	4b35      	ldr	r3, [pc, #212]	; (800ad68 <RadioSend+0x1d8>)
 800ac94:	2202      	movs	r2, #2
 800ac96:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ac98:	4a33      	ldr	r2, [pc, #204]	; (800ad68 <RadioSend+0x1d8>)
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ac9e:	4833      	ldr	r0, [pc, #204]	; (800ad6c <RadioSend+0x1dc>)
 800aca0:	f001 fd8a 	bl	800c7b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	2200      	movs	r2, #0
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f001 f8b0 	bl	800be10 <SUBGRF_SendPayload>
            break;
 800acb0:	e04c      	b.n	800ad4c <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	461a      	mov	r2, r3
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	482d      	ldr	r0, [pc, #180]	; (800ad70 <RadioSend+0x1e0>)
 800acba:	f000 fc30 	bl	800b51e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800acbe:	4b2a      	ldr	r3, [pc, #168]	; (800ad68 <RadioSend+0x1d8>)
 800acc0:	2202      	movs	r2, #2
 800acc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	3301      	adds	r3, #1
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	4b27      	ldr	r3, [pc, #156]	; (800ad68 <RadioSend+0x1d8>)
 800accc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800acce:	4827      	ldr	r0, [pc, #156]	; (800ad6c <RadioSend+0x1dc>)
 800acd0:	f001 fd72 	bl	800c7b8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800acd4:	2100      	movs	r1, #0
 800acd6:	20f1      	movs	r0, #241	; 0xf1
 800acd8:	f000 f947 	bl	800af6a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800acdc:	2100      	movs	r1, #0
 800acde:	20f0      	movs	r0, #240	; 0xf0
 800ace0:	f000 f943 	bl	800af6a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ace4:	4b20      	ldr	r3, [pc, #128]	; (800ad68 <RadioSend+0x1d8>)
 800ace6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ace8:	2b64      	cmp	r3, #100	; 0x64
 800acea:	d108      	bne.n	800acfe <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800acec:	2170      	movs	r1, #112	; 0x70
 800acee:	20f3      	movs	r0, #243	; 0xf3
 800acf0:	f000 f93b 	bl	800af6a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800acf4:	211d      	movs	r1, #29
 800acf6:	20f2      	movs	r0, #242	; 0xf2
 800acf8:	f000 f937 	bl	800af6a <RadioWrite>
 800acfc:	e007      	b.n	800ad0e <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800acfe:	21e1      	movs	r1, #225	; 0xe1
 800ad00:	20f3      	movs	r0, #243	; 0xf3
 800ad02:	f000 f932 	bl	800af6a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800ad06:	2104      	movs	r1, #4
 800ad08:	20f2      	movs	r0, #242	; 0xf2
 800ad0a:	f000 f92e 	bl	800af6a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3302      	adds	r3, #2
 800ad18:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ad1a:	89fb      	ldrh	r3, [r7, #14]
 800ad1c:	0a1b      	lsrs	r3, r3, #8
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	20f4      	movs	r0, #244	; 0xf4
 800ad26:	f000 f920 	bl	800af6a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800ad2a:	89fb      	ldrh	r3, [r7, #14]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	4619      	mov	r1, r3
 800ad30:	20f5      	movs	r0, #245	; 0xf5
 800ad32:	f000 f91a 	bl	800af6a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ad40:	4619      	mov	r1, r3
 800ad42:	480b      	ldr	r0, [pc, #44]	; (800ad70 <RadioSend+0x1e0>)
 800ad44:	f001 f864 	bl	800be10 <SUBGRF_SendPayload>
            break;
 800ad48:	e000      	b.n	800ad4c <RadioSend+0x1bc>
        }
        default:
            break;
 800ad4a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ad4c:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <RadioSend+0x1d8>)
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	4808      	ldr	r0, [pc, #32]	; (800ad74 <RadioSend+0x1e4>)
 800ad54:	f002 fd3e 	bl	800d7d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ad58:	4806      	ldr	r0, [pc, #24]	; (800ad74 <RadioSend+0x1e4>)
 800ad5a:	f002 fc5d 	bl	800d618 <UTIL_TIMER_Start>
 800ad5e:	e000      	b.n	800ad62 <RadioSend+0x1d2>
                return;
 800ad60:	bf00      	nop
}
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20002554 	.word	0x20002554
 800ad6c:	20002562 	.word	0x20002562
 800ad70:	20001b58 	.word	0x20001b58
 800ad74:	200025ac 	.word	0x200025ac

0800ad78 <RadioSleep>:

static void RadioSleep( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800ad7e:	2300      	movs	r3, #0
 800ad80:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800ad82:	793b      	ldrb	r3, [r7, #4]
 800ad84:	f043 0304 	orr.w	r3, r3, #4
 800ad88:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800ad8a:	7938      	ldrb	r0, [r7, #4]
 800ad8c:	f001 f91c 	bl	800bfc8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800ad90:	2002      	movs	r0, #2
 800ad92:	f7f7 f9e3 	bl	800215c <HAL_Delay>
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <RadioStandby>:

static void RadioStandby( void )
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800ada2:	2000      	movs	r0, #0
 800ada4:	f001 f942 	bl	800c02c <SUBGRF_SetStandby>
}
 800ada8:	bf00      	nop
 800adaa:	bd80      	pop	{r7, pc}

0800adac <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800adb4:	f002 f927 	bl	800d006 <RFW_Is_Init>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d102      	bne.n	800adc4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800adbe:	f002 f94a 	bl	800d056 <RFW_ReceiveInit>
 800adc2:	e007      	b.n	800add4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800adc4:	2300      	movs	r3, #0
 800adc6:	2200      	movs	r2, #0
 800adc8:	f240 2162 	movw	r1, #610	; 0x262
 800adcc:	f240 2062 	movw	r0, #610	; 0x262
 800add0:	f001 fafc 	bl	800c3cc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	480f      	ldr	r0, [pc, #60]	; (800ae1c <RadioRx+0x70>)
 800adde:	f002 fcf9 	bl	800d7d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ade2:	480e      	ldr	r0, [pc, #56]	; (800ae1c <RadioRx+0x70>)
 800ade4:	f002 fc18 	bl	800d618 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <RadioRx+0x74>)
 800adea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800adee:	2100      	movs	r1, #0
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 ff1d 	bl	800cc30 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <RadioRx+0x74>)
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d004      	beq.n	800ae08 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800adfe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ae02:	f001 f94f 	bl	800c0a4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800ae06:	e005      	b.n	800ae14 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <RadioRx+0x74>)
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	019b      	lsls	r3, r3, #6
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 f948 	bl	800c0a4 <SUBGRF_SetRx>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200025c4 	.word	0x200025c4
 800ae20:	20002554 	.word	0x20002554

0800ae24 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800ae2c:	f002 f8eb 	bl	800d006 <RFW_Is_Init>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d102      	bne.n	800ae3c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800ae36:	f002 f90e 	bl	800d056 <RFW_ReceiveInit>
 800ae3a:	e007      	b.n	800ae4c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f240 2162 	movw	r1, #610	; 0x262
 800ae44:	f240 2062 	movw	r0, #610	; 0x262
 800ae48:	f001 fac0 	bl	800c3cc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d006      	beq.n	800ae60 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	480f      	ldr	r0, [pc, #60]	; (800ae94 <RadioRxBoosted+0x70>)
 800ae56:	f002 fcbd 	bl	800d7d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ae5a:	480e      	ldr	r0, [pc, #56]	; (800ae94 <RadioRxBoosted+0x70>)
 800ae5c:	f002 fbdc 	bl	800d618 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ae60:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <RadioRxBoosted+0x74>)
 800ae62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 fee1 	bl	800cc30 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <RadioRxBoosted+0x74>)
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800ae76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ae7a:	f001 f933 	bl	800c0e4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800ae7e:	e005      	b.n	800ae8c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <RadioRxBoosted+0x74>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	019b      	lsls	r3, r3, #6
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 f92c 	bl	800c0e4 <SUBGRF_SetRxBoosted>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	200025c4 	.word	0x200025c4
 800ae98:	20002554 	.word	0x20002554

0800ae9c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800aea6:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <RadioSetRxDutyCycle+0x28>)
 800aea8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 febe 	bl	800cc30 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 f938 	bl	800c12c <SUBGRF_SetRxDutyCycle>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20002554 	.word	0x20002554

0800aec8 <RadioStartCad>:

static void RadioStartCad( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <RadioStartCad+0x2c>)
 800aece:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800aed2:	2100      	movs	r1, #0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f001 feab 	bl	800cc30 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800aeda:	2300      	movs	r3, #0
 800aedc:	2200      	movs	r2, #0
 800aede:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800aee2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800aee6:	f001 fa71 	bl	800c3cc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800aeea:	f001 f94b 	bl	800c184 <SUBGRF_SetCad>
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20002554 	.word	0x20002554

0800aef8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
 800af04:	4613      	mov	r3, r2
 800af06:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800af08:	883b      	ldrh	r3, [r7, #0]
 800af0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af0e:	fb02 f303 	mul.w	r3, r2, r3
 800af12:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 fab5 	bl	800c484 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800af1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 feae 	bl	800cc80 <SUBGRF_SetRfTxPower>
 800af24:	4603      	mov	r3, r0
 800af26:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	2101      	movs	r1, #1
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 fe7f 	bl	800cc30 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800af32:	f001 f935 	bl	800c1a0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800af36:	68f9      	ldr	r1, [r7, #12]
 800af38:	4804      	ldr	r0, [pc, #16]	; (800af4c <RadioSetTxContinuousWave+0x54>)
 800af3a:	f002 fc4b 	bl	800d7d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800af3e:	4803      	ldr	r0, [pc, #12]	; (800af4c <RadioSetTxContinuousWave+0x54>)
 800af40:	f002 fb6a 	bl	800d618 <UTIL_TIMER_Start>
}
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200025ac 	.word	0x200025ac

0800af50 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800af5a:	f001 fce2 	bl	800c922 <SUBGRF_GetRssiInst>
 800af5e:	4603      	mov	r3, r0
 800af60:	b21b      	sxth	r3, r3
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	4603      	mov	r3, r0
 800af72:	460a      	mov	r2, r1
 800af74:	80fb      	strh	r3, [r7, #6]
 800af76:	4613      	mov	r3, r2
 800af78:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800af7a:	797a      	ldrb	r2, [r7, #5]
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f001 fd61 	bl	800ca48 <SUBGRF_WriteRegister>
}
 800af86:	bf00      	nop
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	4603      	mov	r3, r0
 800af96:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 fd68 	bl	800ca70 <SUBGRF_ReadRegister>
 800afa0:	4603      	mov	r3, r0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b082      	sub	sp, #8
 800afae:	af00      	add	r7, sp, #0
 800afb0:	4603      	mov	r3, r0
 800afb2:	6039      	str	r1, [r7, #0]
 800afb4:	80fb      	strh	r3, [r7, #6]
 800afb6:	4613      	mov	r3, r2
 800afb8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800afba:	797b      	ldrb	r3, [r7, #5]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	88fb      	ldrh	r3, [r7, #6]
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 fd68 	bl	800ca98 <SUBGRF_WriteRegisters>
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	6039      	str	r1, [r7, #0]
 800afda:	80fb      	strh	r3, [r7, #6]
 800afdc:	4613      	mov	r3, r2
 800afde:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800afe0:	797b      	ldrb	r3, [r7, #5]
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f001 fd77 	bl	800cadc <SUBGRF_ReadRegisters>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	460a      	mov	r2, r1
 800b002:	71fb      	strb	r3, [r7, #7]
 800b004:	4613      	mov	r3, r2
 800b006:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d10a      	bne.n	800b024 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800b00e:	4a0e      	ldr	r2, [pc, #56]	; (800b048 <RadioSetMaxPayloadLength+0x50>)
 800b010:	79bb      	ldrb	r3, [r7, #6]
 800b012:	7013      	strb	r3, [r2, #0]
 800b014:	4b0c      	ldr	r3, [pc, #48]	; (800b048 <RadioSetMaxPayloadLength+0x50>)
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <RadioSetMaxPayloadLength+0x54>)
 800b01a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b01c:	480c      	ldr	r0, [pc, #48]	; (800b050 <RadioSetMaxPayloadLength+0x58>)
 800b01e:	f001 fbcb 	bl	800c7b8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800b022:	e00d      	b.n	800b040 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <RadioSetMaxPayloadLength+0x54>)
 800b026:	7d5b      	ldrb	r3, [r3, #21]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d109      	bne.n	800b040 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800b02c:	4a06      	ldr	r2, [pc, #24]	; (800b048 <RadioSetMaxPayloadLength+0x50>)
 800b02e:	79bb      	ldrb	r3, [r7, #6]
 800b030:	7013      	strb	r3, [r2, #0]
 800b032:	4b05      	ldr	r3, [pc, #20]	; (800b048 <RadioSetMaxPayloadLength+0x50>)
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <RadioSetMaxPayloadLength+0x54>)
 800b038:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b03a:	4805      	ldr	r0, [pc, #20]	; (800b050 <RadioSetMaxPayloadLength+0x58>)
 800b03c:	f001 fbbc 	bl	800c7b8 <SUBGRF_SetPacketParams>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000014 	.word	0x20000014
 800b04c:	20002554 	.word	0x20002554
 800b050:	20002562 	.word	0x20002562

0800b054 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800b05e:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <RadioSetPublicNetwork+0x58>)
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	7313      	strb	r3, [r2, #12]
 800b064:	4b11      	ldr	r3, [pc, #68]	; (800b0ac <RadioSetPublicNetwork+0x58>)
 800b066:	7b1a      	ldrb	r2, [r3, #12]
 800b068:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <RadioSetPublicNetwork+0x58>)
 800b06a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800b06c:	2001      	movs	r0, #1
 800b06e:	f7ff f831 	bl	800a0d4 <RadioSetModem>
    if( enable == true )
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800b078:	2134      	movs	r1, #52	; 0x34
 800b07a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800b07e:	f001 fce3 	bl	800ca48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800b082:	2144      	movs	r1, #68	; 0x44
 800b084:	f240 7041 	movw	r0, #1857	; 0x741
 800b088:	f001 fcde 	bl	800ca48 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800b08c:	e009      	b.n	800b0a2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800b08e:	2114      	movs	r1, #20
 800b090:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800b094:	f001 fcd8 	bl	800ca48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800b098:	2124      	movs	r1, #36	; 0x24
 800b09a:	f240 7041 	movw	r0, #1857	; 0x741
 800b09e:	f001 fcd3 	bl	800ca48 <SUBGRF_WriteRegister>
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20002554 	.word	0x20002554

0800b0b0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800b0b4:	f001 fe18 	bl	800cce8 <SUBGRF_GetRadioWakeUpTime>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	3303      	adds	r3, #3
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800b0c8:	f000 f80e 	bl	800b0e8 <RadioOnTxTimeoutProcess>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800b0dc:	f000 f818 	bl	800b110 <RadioOnRxTimeoutProcess>
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800b0ec:	4b07      	ldr	r3, [pc, #28]	; (800b10c <RadioOnTxTimeoutProcess+0x24>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d008      	beq.n	800b106 <RadioOnTxTimeoutProcess+0x1e>
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <RadioOnTxTimeoutProcess+0x24>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800b0fe:	4b03      	ldr	r3, [pc, #12]	; (800b10c <RadioOnTxTimeoutProcess+0x24>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4798      	blx	r3
    }
}
 800b106:	bf00      	nop
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20001c58 	.word	0x20001c58

0800b110 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b114:	4b07      	ldr	r3, [pc, #28]	; (800b134 <RadioOnRxTimeoutProcess+0x24>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d008      	beq.n	800b12e <RadioOnRxTimeoutProcess+0x1e>
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <RadioOnRxTimeoutProcess+0x24>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d003      	beq.n	800b12e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800b126:	4b03      	ldr	r3, [pc, #12]	; (800b134 <RadioOnRxTimeoutProcess+0x24>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4798      	blx	r3
    }
}
 800b12e:	bf00      	nop
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20001c58 	.word	0x20001c58

0800b138 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800b142:	4a05      	ldr	r2, [pc, #20]	; (800b158 <RadioOnDioIrq+0x20>)
 800b144:	88fb      	ldrh	r3, [r7, #6]
 800b146:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800b14a:	f000 f807 	bl	800b15c <RadioIrqProcess>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20002554 	.word	0x20002554

0800b15c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800b15c:	b590      	push	{r4, r7, lr}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800b16a:	4bb4      	ldr	r3, [pc, #720]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b16c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b174:	f000 810c 	beq.w	800b390 <RadioIrqProcess+0x234>
 800b178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b17c:	f300 8184 	bgt.w	800b488 <RadioIrqProcess+0x32c>
 800b180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b184:	f000 80f0 	beq.w	800b368 <RadioIrqProcess+0x20c>
 800b188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b18c:	f300 817c 	bgt.w	800b488 <RadioIrqProcess+0x32c>
 800b190:	2b80      	cmp	r3, #128	; 0x80
 800b192:	f000 80d5 	beq.w	800b340 <RadioIrqProcess+0x1e4>
 800b196:	2b80      	cmp	r3, #128	; 0x80
 800b198:	f300 8176 	bgt.w	800b488 <RadioIrqProcess+0x32c>
 800b19c:	2b20      	cmp	r3, #32
 800b19e:	dc49      	bgt.n	800b234 <RadioIrqProcess+0xd8>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f340 8171 	ble.w	800b488 <RadioIrqProcess+0x32c>
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	2b1f      	cmp	r3, #31
 800b1aa:	f200 816d 	bhi.w	800b488 <RadioIrqProcess+0x32c>
 800b1ae:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <RadioIrqProcess+0x58>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b23d 	.word	0x0800b23d
 800b1b8:	0800b277 	.word	0x0800b277
 800b1bc:	0800b489 	.word	0x0800b489
 800b1c0:	0800b489 	.word	0x0800b489
 800b1c4:	0800b489 	.word	0x0800b489
 800b1c8:	0800b489 	.word	0x0800b489
 800b1cc:	0800b489 	.word	0x0800b489
 800b1d0:	0800b3f5 	.word	0x0800b3f5
 800b1d4:	0800b489 	.word	0x0800b489
 800b1d8:	0800b489 	.word	0x0800b489
 800b1dc:	0800b489 	.word	0x0800b489
 800b1e0:	0800b489 	.word	0x0800b489
 800b1e4:	0800b489 	.word	0x0800b489
 800b1e8:	0800b489 	.word	0x0800b489
 800b1ec:	0800b489 	.word	0x0800b489
 800b1f0:	0800b489 	.word	0x0800b489
 800b1f4:	0800b489 	.word	0x0800b489
 800b1f8:	0800b489 	.word	0x0800b489
 800b1fc:	0800b489 	.word	0x0800b489
 800b200:	0800b489 	.word	0x0800b489
 800b204:	0800b489 	.word	0x0800b489
 800b208:	0800b489 	.word	0x0800b489
 800b20c:	0800b489 	.word	0x0800b489
 800b210:	0800b489 	.word	0x0800b489
 800b214:	0800b489 	.word	0x0800b489
 800b218:	0800b489 	.word	0x0800b489
 800b21c:	0800b489 	.word	0x0800b489
 800b220:	0800b489 	.word	0x0800b489
 800b224:	0800b489 	.word	0x0800b489
 800b228:	0800b489 	.word	0x0800b489
 800b22c:	0800b489 	.word	0x0800b489
 800b230:	0800b405 	.word	0x0800b405
 800b234:	2b40      	cmp	r3, #64	; 0x40
 800b236:	f000 810f 	beq.w	800b458 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800b23a:	e125      	b.n	800b488 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 800b23c:	4880      	ldr	r0, [pc, #512]	; (800b440 <RadioIrqProcess+0x2e4>)
 800b23e:	f002 fa59 	bl	800d6f4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800b242:	2000      	movs	r0, #0
 800b244:	f000 fef2 	bl	800c02c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800b248:	f001 fee4 	bl	800d014 <RFW_Is_LongPacketModeEnabled>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d101      	bne.n	800b256 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800b252:	f001 ff08 	bl	800d066 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800b256:	4b7b      	ldr	r3, [pc, #492]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8116 	beq.w	800b48c <RadioIrqProcess+0x330>
 800b260:	4b78      	ldr	r3, [pc, #480]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 8110 	beq.w	800b48c <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 800b26c:	4b75      	ldr	r3, [pc, #468]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4798      	blx	r3
        break;
 800b274:	e10a      	b.n	800b48c <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 800b276:	4874      	ldr	r0, [pc, #464]	; (800b448 <RadioIrqProcess+0x2ec>)
 800b278:	f002 fa3c 	bl	800d6f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800b27c:	4b6f      	ldr	r3, [pc, #444]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b27e:	785b      	ldrb	r3, [r3, #1]
 800b280:	f083 0301 	eor.w	r3, r3, #1
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d014      	beq.n	800b2b4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800b28a:	2000      	movs	r0, #0
 800b28c:	f000 fece 	bl	800c02c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800b290:	2100      	movs	r1, #0
 800b292:	f640 1002 	movw	r0, #2306	; 0x902
 800b296:	f001 fbd7 	bl	800ca48 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800b29a:	f640 1044 	movw	r0, #2372	; 0x944
 800b29e:	f001 fbe7 	bl	800ca70 <SUBGRF_ReadRegister>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f043 0302 	orr.w	r3, r3, #2
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	f640 1044 	movw	r0, #2372	; 0x944
 800b2b0:	f001 fbca 	bl	800ca48 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800b2b4:	1dfb      	adds	r3, r7, #7
 800b2b6:	22ff      	movs	r2, #255	; 0xff
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4864      	ldr	r0, [pc, #400]	; (800b44c <RadioIrqProcess+0x2f0>)
 800b2bc:	f000 fd86 	bl	800bdcc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800b2c0:	4863      	ldr	r0, [pc, #396]	; (800b450 <RadioIrqProcess+0x2f4>)
 800b2c2:	f001 fb6f 	bl	800c9a4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800b2c6:	4b5f      	ldr	r3, [pc, #380]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d036      	beq.n	800b33c <RadioIrqProcess+0x1e0>
 800b2ce:	4b5d      	ldr	r3, [pc, #372]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d031      	beq.n	800b33c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800b2d8:	4b58      	ldr	r3, [pc, #352]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b2da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10e      	bne.n	800b300 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800b2e2:	4b58      	ldr	r3, [pc, #352]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689c      	ldr	r4, [r3, #8]
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	b299      	uxth	r1, r3
 800b2ec:	4b53      	ldr	r3, [pc, #332]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b2ee:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	4b51      	ldr	r3, [pc, #324]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b2f6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800b2fa:	4854      	ldr	r0, [pc, #336]	; (800b44c <RadioIrqProcess+0x2f0>)
 800b2fc:	47a0      	blx	r4
                break;
 800b2fe:	e01e      	b.n	800b33e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800b300:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b304:	463a      	mov	r2, r7
 800b306:	4611      	mov	r1, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	f001 fdcf 	bl	800ceac <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800b30e:	4b4d      	ldr	r3, [pc, #308]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	689c      	ldr	r4, [r3, #8]
 800b314:	79fb      	ldrb	r3, [r7, #7]
 800b316:	b299      	uxth	r1, r3
 800b318:	4b48      	ldr	r3, [pc, #288]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b31a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800b31e:	b218      	sxth	r0, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b326:	4a4b      	ldr	r2, [pc, #300]	; (800b454 <RadioIrqProcess+0x2f8>)
 800b328:	fb82 c203 	smull	ip, r2, r2, r3
 800b32c:	1192      	asrs	r2, r2, #6
 800b32e:	17db      	asrs	r3, r3, #31
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	b25b      	sxtb	r3, r3
 800b334:	4602      	mov	r2, r0
 800b336:	4845      	ldr	r0, [pc, #276]	; (800b44c <RadioIrqProcess+0x2f0>)
 800b338:	47a0      	blx	r4
                break;
 800b33a:	e000      	b.n	800b33e <RadioIrqProcess+0x1e2>
        }
 800b33c:	bf00      	nop
        break;
 800b33e:	e0b2      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 800b340:	2000      	movs	r0, #0
 800b342:	f000 fe73 	bl	800c02c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800b346:	4b3f      	ldr	r3, [pc, #252]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80a0 	beq.w	800b490 <RadioIrqProcess+0x334>
 800b350:	4b3c      	ldr	r3, [pc, #240]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 809a 	beq.w	800b490 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 800b35c:	4b39      	ldr	r3, [pc, #228]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	2000      	movs	r0, #0
 800b364:	4798      	blx	r3
        break;
 800b366:	e093      	b.n	800b490 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 800b368:	2000      	movs	r0, #0
 800b36a:	f000 fe5f 	bl	800c02c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800b36e:	4b35      	ldr	r3, [pc, #212]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 808e 	beq.w	800b494 <RadioIrqProcess+0x338>
 800b378:	4b32      	ldr	r3, [pc, #200]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 8088 	beq.w	800b494 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 800b384:	4b2f      	ldr	r3, [pc, #188]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	2001      	movs	r0, #1
 800b38c:	4798      	blx	r3
        break;
 800b38e:	e081      	b.n	800b494 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800b390:	f000 fd02 	bl	800bd98 <SUBGRF_GetOperatingMode>
 800b394:	4603      	mov	r3, r0
 800b396:	2b04      	cmp	r3, #4
 800b398:	d113      	bne.n	800b3c2 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 800b39a:	4829      	ldr	r0, [pc, #164]	; (800b440 <RadioIrqProcess+0x2e4>)
 800b39c:	f002 f9aa 	bl	800d6f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	f000 fe43 	bl	800c02c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800b3a6:	4b27      	ldr	r3, [pc, #156]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d074      	beq.n	800b498 <RadioIrqProcess+0x33c>
 800b3ae:	4b25      	ldr	r3, [pc, #148]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d06f      	beq.n	800b498 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 800b3b8:	4b22      	ldr	r3, [pc, #136]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4798      	blx	r3
        break;
 800b3c0:	e06a      	b.n	800b498 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800b3c2:	f000 fce9 	bl	800bd98 <SUBGRF_GetOperatingMode>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b05      	cmp	r3, #5
 800b3ca:	d165      	bne.n	800b498 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 800b3cc:	481e      	ldr	r0, [pc, #120]	; (800b448 <RadioIrqProcess+0x2ec>)
 800b3ce:	f002 f991 	bl	800d6f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	f000 fe2a 	bl	800c02c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b3d8:	4b1a      	ldr	r3, [pc, #104]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d05b      	beq.n	800b498 <RadioIrqProcess+0x33c>
 800b3e0:	4b18      	ldr	r3, [pc, #96]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d056      	beq.n	800b498 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 800b3ea:	4b16      	ldr	r3, [pc, #88]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	4798      	blx	r3
        break;
 800b3f2:	e051      	b.n	800b498 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 800b3f4:	f001 fe07 	bl	800d006 <RFW_Is_Init>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d14e      	bne.n	800b49c <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 800b3fe:	f001 fe38 	bl	800d072 <RFW_ReceivePayload>
        break;
 800b402:	e04b      	b.n	800b49c <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 800b404:	4810      	ldr	r0, [pc, #64]	; (800b448 <RadioIrqProcess+0x2ec>)
 800b406:	f002 f975 	bl	800d6f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <RadioIrqProcess+0x2e0>)
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	f083 0301 	eor.w	r3, r3, #1
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 800b418:	2000      	movs	r0, #0
 800b41a:	f000 fe07 	bl	800c02c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d03c      	beq.n	800b4a0 <RadioIrqProcess+0x344>
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d037      	beq.n	800b4a0 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <RadioIrqProcess+0x2e8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	4798      	blx	r3
        break;
 800b438:	e032      	b.n	800b4a0 <RadioIrqProcess+0x344>
 800b43a:	bf00      	nop
 800b43c:	20002554 	.word	0x20002554
 800b440:	200025ac 	.word	0x200025ac
 800b444:	20001c58 	.word	0x20001c58
 800b448:	200025c4 	.word	0x200025c4
 800b44c:	20001b58 	.word	0x20001b58
 800b450:	20002578 	.word	0x20002578
 800b454:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 800b458:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <RadioIrqProcess+0x354>)
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	f083 0301 	eor.w	r3, r3, #1
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 800b466:	2000      	movs	r0, #0
 800b468:	f000 fde0 	bl	800c02c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <RadioIrqProcess+0x358>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d017      	beq.n	800b4a4 <RadioIrqProcess+0x348>
 800b474:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <RadioIrqProcess+0x358>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d012      	beq.n	800b4a4 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 800b47e:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <RadioIrqProcess+0x358>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	4798      	blx	r3
        break;
 800b486:	e00d      	b.n	800b4a4 <RadioIrqProcess+0x348>
        break;
 800b488:	bf00      	nop
 800b48a:	e00c      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b48c:	bf00      	nop
 800b48e:	e00a      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b490:	bf00      	nop
 800b492:	e008      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b494:	bf00      	nop
 800b496:	e006      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b498:	bf00      	nop
 800b49a:	e004      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b49c:	bf00      	nop
 800b49e:	e002      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b4a0:	bf00      	nop
 800b4a2:	e000      	b.n	800b4a6 <RadioIrqProcess+0x34a>
        break;
 800b4a4:	bf00      	nop
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd90      	pop	{r4, r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20002554 	.word	0x20002554
 800b4b4:	20001c58 	.word	0x20001c58

0800b4b8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800b4bc:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <RadioTxPrbs+0x2c>)
 800b4be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f001 fbb3 	bl	800cc30 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800b4ca:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <RadioTxPrbs+0x30>)
 800b4cc:	212d      	movs	r1, #45	; 0x2d
 800b4ce:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b4d2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800b4d4:	f000 fe6d 	bl	800c1b2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800b4d8:	4804      	ldr	r0, [pc, #16]	; (800b4ec <RadioTxPrbs+0x34>)
 800b4da:	f000 fdc3 	bl	800c064 <SUBGRF_SetTx>
}
 800b4de:	bf00      	nop
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20002554 	.word	0x20002554
 800b4e8:	0800af6b 	.word	0x0800af6b
 800b4ec:	000fffff 	.word	0x000fffff

0800b4f0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800b4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 fbbe 	bl	800cc80 <SUBGRF_SetRfTxPower>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800b508:	7bfb      	ldrb	r3, [r7, #15]
 800b50a:	2101      	movs	r1, #1
 800b50c:	4618      	mov	r0, r3
 800b50e:	f001 fb8f 	bl	800cc30 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800b512:	f000 fe45 	bl	800c1a0 <SUBGRF_SetTxContinuousWave>
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800b51e:	b480      	push	{r7}
 800b520:	b089      	sub	sp, #36	; 0x24
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	4613      	mov	r3, r2
 800b52a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800b534:	2300      	movs	r3, #0
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e011      	b.n	800b55e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	781a      	ldrb	r2, [r3, #0]
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	440b      	add	r3, r1
 800b548:	43d2      	mvns	r2, r2
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	2200      	movs	r2, #0
 800b556:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	3301      	adds	r3, #1
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	429a      	cmp	r2, r3
 800b564:	dbe9      	blt.n	800b53a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800b566:	2300      	movs	r3, #0
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	e049      	b.n	800b600 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	425a      	negs	r2, r3
 800b570:	f003 0307 	and.w	r3, r3, #7
 800b574:	f002 0207 	and.w	r2, r2, #7
 800b578:	bf58      	it	pl
 800b57a:	4253      	negpl	r3, r2
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	f1c3 0307 	rsb	r3, r3, #7
 800b582:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	da00      	bge.n	800b58c <payload_integration+0x6e>
 800b58a:	3307      	adds	r3, #7
 800b58c:	10db      	asrs	r3, r3, #3
 800b58e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	3301      	adds	r3, #1
 800b594:	425a      	negs	r2, r3
 800b596:	f003 0307 	and.w	r3, r3, #7
 800b59a:	f002 0207 	and.w	r2, r2, #7
 800b59e:	bf58      	it	pl
 800b5a0:	4253      	negpl	r3, r2
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	f1c3 0307 	rsb	r3, r3, #7
 800b5a8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	da00      	bge.n	800b5b4 <payload_integration+0x96>
 800b5b2:	3307      	adds	r3, #7
 800b5b4:	10db      	asrs	r3, r3, #3
 800b5b6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800b5b8:	7dbb      	ldrb	r3, [r7, #22]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	4413      	add	r3, r2
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	fa42 f303 	asr.w	r3, r2, r3
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800b5d0:	7ffa      	ldrb	r2, [r7, #31]
 800b5d2:	7cfb      	ldrb	r3, [r7, #19]
 800b5d4:	4053      	eors	r3, r2
 800b5d6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800b5d8:	7d3b      	ldrb	r3, [r7, #20]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	4413      	add	r3, r2
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b25a      	sxtb	r2, r3
 800b5e2:	7ff9      	ldrb	r1, [r7, #31]
 800b5e4:	7d7b      	ldrb	r3, [r7, #21]
 800b5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	b259      	sxtb	r1, r3
 800b5f0:	7d3b      	ldrb	r3, [r7, #20]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	b2ca      	uxtb	r2, r1
 800b5f8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	61bb      	str	r3, [r7, #24]
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	429a      	cmp	r2, r3
 800b608:	dbb0      	blt.n	800b56c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800b60a:	7ffb      	ldrb	r3, [r7, #31]
 800b60c:	01db      	lsls	r3, r3, #7
 800b60e:	b25a      	sxtb	r2, r3
 800b610:	7ffb      	ldrb	r3, [r7, #31]
 800b612:	019b      	lsls	r3, r3, #6
 800b614:	b25b      	sxtb	r3, r3
 800b616:	4313      	orrs	r3, r2
 800b618:	b25b      	sxtb	r3, r3
 800b61a:	7ffa      	ldrb	r2, [r7, #31]
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d101      	bne.n	800b624 <payload_integration+0x106>
 800b620:	2220      	movs	r2, #32
 800b622:	e000      	b.n	800b626 <payload_integration+0x108>
 800b624:	2200      	movs	r2, #0
 800b626:	4313      	orrs	r3, r2
 800b628:	b259      	sxtb	r1, r3
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	4413      	add	r3, r2
 800b630:	b2ca      	uxtb	r2, r1
 800b632:	701a      	strb	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	3724      	adds	r7, #36	; 0x24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr
	...

0800b640 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08c      	sub	sp, #48	; 0x30
 800b644:	af00      	add	r7, sp, #0
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800b654:	2300      	movs	r3, #0
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	2300      	movs	r3, #0
 800b65a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b65c:	f001 fccd 	bl	800cffa <RFW_DeInit>

    if( rxContinuous != 0 )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bf14      	ite	ne
 800b670:	2301      	movne	r3, #1
 800b672:	2300      	moveq	r3, #0
 800b674:	b2da      	uxtb	r2, r3
 800b676:	4ba9      	ldr	r3, [pc, #676]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b678:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <RadioSetRxGenericConfig+0x48>
 800b680:	2b01      	cmp	r3, #1
 800b682:	f000 80e8 	beq.w	800b856 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800b686:	e1a0      	b.n	800b9ca <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <RadioSetRxGenericConfig+0x58>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <RadioSetRxGenericConfig+0x5e>
            return -1;
 800b698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b69c:	e196      	b.n	800b9cc <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	7d5b      	ldrb	r3, [r3, #21]
 800b6a2:	2b08      	cmp	r3, #8
 800b6a4:	d902      	bls.n	800b6ac <RadioSetRxGenericConfig+0x6c>
            return -1;
 800b6a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6aa:	e18f      	b.n	800b9cc <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6b0:	e00d      	b.n	800b6ce <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	4413      	add	r3, r2
 800b6ba:	7819      	ldrb	r1, [r3, #0]
 800b6bc:	f107 021c 	add.w	r2, r7, #28
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	4413      	add	r3, r2
 800b6c4:	460a      	mov	r2, r1
 800b6c6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	7d5b      	ldrb	r3, [r3, #21]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	dbeb      	blt.n	800b6b2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bf14      	ite	ne
 800b6e2:	2301      	movne	r3, #1
 800b6e4:	2300      	moveq	r3, #0
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fd6b 	bl	800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b6ee:	4b8b      	ldr	r3, [pc, #556]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	4a88      	ldr	r2, [pc, #544]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b6fc:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	791a      	ldrb	r2, [r3, #4]
 800b702:	4b86      	ldr	r3, [pc, #536]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 fba5 	bl	800ce5c <SUBGRF_GetFskBandwidthRegValue>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	4b81      	ldr	r3, [pc, #516]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b71c:	4b7f      	ldr	r3, [pc, #508]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b71e:	2200      	movs	r2, #0
 800b720:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	b29b      	uxth	r3, r3
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	4b7b      	ldr	r3, [pc, #492]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b72e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	7d1a      	ldrb	r2, [r3, #20]
 800b734:	4b79      	ldr	r3, [pc, #484]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b736:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	7d5b      	ldrb	r3, [r3, #21]
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	4b76      	ldr	r3, [pc, #472]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b742:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b74a:	4b74      	ldr	r3, [pc, #464]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b74c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b754:	2b00      	cmp	r3, #0
 800b756:	d105      	bne.n	800b764 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	4b6f      	ldr	r3, [pc, #444]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b760:	759a      	strb	r2, [r3, #22]
 800b762:	e00b      	b.n	800b77c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d103      	bne.n	800b776 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b76e:	4b6b      	ldr	r3, [pc, #428]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b770:	22ff      	movs	r2, #255	; 0xff
 800b772:	759a      	strb	r2, [r3, #22]
 800b774:	e002      	b.n	800b77c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b776:	4b69      	ldr	r3, [pc, #420]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b778:	22ff      	movs	r2, #255	; 0xff
 800b77a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b782:	2b02      	cmp	r3, #2
 800b784:	d004      	beq.n	800b790 <RadioSetRxGenericConfig+0x150>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d12d      	bne.n	800b7ec <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b796:	2bf1      	cmp	r3, #241	; 0xf1
 800b798:	d00c      	beq.n	800b7b4 <RadioSetRxGenericConfig+0x174>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7a0:	2bf2      	cmp	r3, #242	; 0xf2
 800b7a2:	d007      	beq.n	800b7b4 <RadioSetRxGenericConfig+0x174>
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d002      	beq.n	800b7b4 <RadioSetRxGenericConfig+0x174>
            return -1;
 800b7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7b2:	e10b      	b.n	800b9cc <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800b7bc:	4b58      	ldr	r3, [pc, #352]	; (800b920 <RadioSetRxGenericConfig+0x2e0>)
 800b7be:	6819      	ldr	r1, [r3, #0]
 800b7c0:	f107 0310 	add.w	r3, r7, #16
 800b7c4:	4a57      	ldr	r2, [pc, #348]	; (800b924 <RadioSetRxGenericConfig+0x2e4>)
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 fc0a 	bl	800cfe0 <RFW_Init>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <RadioSetRxGenericConfig+0x198>
            return -1;
 800b7d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7d6:	e0f9      	b.n	800b9cc <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b7d8:	4b50      	ldr	r3, [pc, #320]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b7de:	4b4f      	ldr	r3, [pc, #316]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b7e4:	4b4d      	ldr	r3, [pc, #308]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	755a      	strb	r2, [r3, #21]
        {
 800b7ea:	e00e      	b.n	800b80a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b7f2:	4b4a      	ldr	r3, [pc, #296]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b7f4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800b7fc:	4b47      	ldr	r3, [pc, #284]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b7fe:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800b806:	4b45      	ldr	r3, [pc, #276]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b808:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b80a:	f7ff fac8 	bl	800ad9e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b80e:	2000      	movs	r0, #0
 800b810:	f7fe fc60 	bl	800a0d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b814:	4844      	ldr	r0, [pc, #272]	; (800b928 <RadioSetRxGenericConfig+0x2e8>)
 800b816:	f000 ff03 	bl	800c620 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b81a:	4844      	ldr	r0, [pc, #272]	; (800b92c <RadioSetRxGenericConfig+0x2ec>)
 800b81c:	f000 ffcc 	bl	800c7b8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b820:	f107 031c 	add.w	r3, r7, #28
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fb06 	bl	800be36 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	8c1b      	ldrh	r3, [r3, #32]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 fb50 	bl	800bed4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fb2b 	bl	800be94 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b844:	fb02 f203 	mul.w	r2, r2, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b850:	4a32      	ldr	r2, [pc, #200]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b852:	6093      	str	r3, [r2, #8]
        break;
 800b854:	e0b9      	b.n	800b9ca <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <RadioSetRxGenericConfig+0x224>
            return -1;
 800b85e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b862:	e0b3      	b.n	800b9cc <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d104      	bne.n	800b878 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b876:	e002      	b.n	800b87e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800b878:	23ff      	movs	r3, #255	; 0xff
 800b87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	2b00      	cmp	r3, #0
 800b884:	bf14      	ite	ne
 800b886:	2301      	movne	r3, #1
 800b888:	2300      	moveq	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 fc99 	bl	800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	b2db      	uxtb	r3, r3
 800b896:	4618      	mov	r0, r3
 800b898:	f000 fca3 	bl	800c1e2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b89c:	4b1f      	ldr	r3, [pc, #124]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b8aa:	4b1c      	ldr	r3, [pc, #112]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b8ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800b8b6:	4b19      	ldr	r3, [pc, #100]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b8b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800b8c2:	4b16      	ldr	r3, [pc, #88]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b8c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d010      	beq.n	800b8f4 <RadioSetRxGenericConfig+0x2b4>
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	dc2c      	bgt.n	800b930 <RadioSetRxGenericConfig+0x2f0>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <RadioSetRxGenericConfig+0x2a0>
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d005      	beq.n	800b8ea <RadioSetRxGenericConfig+0x2aa>
            break;
 800b8de:	e027      	b.n	800b930 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b8e0:	4b0e      	ldr	r3, [pc, #56]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b8e8:	e023      	b.n	800b932 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b8ea:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b8f2:	e01e      	b.n	800b932 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8fa:	2b0b      	cmp	r3, #11
 800b8fc:	d004      	beq.n	800b908 <RadioSetRxGenericConfig+0x2c8>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b904:	2b0c      	cmp	r3, #12
 800b906:	d104      	bne.n	800b912 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b910:	e00f      	b.n	800b932 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b912:	4b02      	ldr	r3, [pc, #8]	; (800b91c <RadioSetRxGenericConfig+0x2dc>)
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b91a:	e00a      	b.n	800b932 <RadioSetRxGenericConfig+0x2f2>
 800b91c:	20002554 	.word	0x20002554
 800b920:	20001c58 	.word	0x20001c58
 800b924:	200025c4 	.word	0x200025c4
 800b928:	2000258c 	.word	0x2000258c
 800b92c:	20002562 	.word	0x20002562
            break;
 800b930:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b932:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b934:	2201      	movs	r2, #1
 800b936:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800b93c:	4b25      	ldr	r3, [pc, #148]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b93e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800b946:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b948:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b94a:	4a22      	ldr	r2, [pc, #136]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b94c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b950:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800b958:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b95a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800b964:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800b96a:	f7ff fa18 	bl	800ad9e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b96e:	2001      	movs	r0, #1
 800b970:	f7fe fbb0 	bl	800a0d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b974:	4818      	ldr	r0, [pc, #96]	; (800b9d8 <RadioSetRxGenericConfig+0x398>)
 800b976:	f000 fe53 	bl	800c620 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b97a:	4818      	ldr	r0, [pc, #96]	; (800b9dc <RadioSetRxGenericConfig+0x39c>)
 800b97c:	f000 ff1c 	bl	800c7b8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b980:	4b14      	ldr	r3, [pc, #80]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10d      	bne.n	800b9a6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800b98a:	f240 7036 	movw	r0, #1846	; 0x736
 800b98e:	f001 f86f 	bl	800ca70 <SUBGRF_ReadRegister>
 800b992:	4603      	mov	r3, r0
 800b994:	f023 0304 	bic.w	r3, r3, #4
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	4619      	mov	r1, r3
 800b99c:	f240 7036 	movw	r0, #1846	; 0x736
 800b9a0:	f001 f852 	bl	800ca48 <SUBGRF_WriteRegister>
 800b9a4:	e00c      	b.n	800b9c0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800b9a6:	f240 7036 	movw	r0, #1846	; 0x736
 800b9aa:	f001 f861 	bl	800ca70 <SUBGRF_ReadRegister>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f043 0304 	orr.w	r3, r3, #4
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f240 7036 	movw	r0, #1846	; 0x736
 800b9bc:	f001 f844 	bl	800ca48 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <RadioSetRxGenericConfig+0x394>)
 800b9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c6:	609a      	str	r2, [r3, #8]
        break;
 800b9c8:	bf00      	nop
    }
    return status;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3730      	adds	r7, #48	; 0x30
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20002554 	.word	0x20002554
 800b9d8:	2000258c 	.word	0x2000258c
 800b9dc:	20002562 	.word	0x20002562

0800b9e0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607b      	str	r3, [r7, #4]
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b9fa:	f001 fafe 	bl	800cffa <RFW_DeInit>
    switch( modem )
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	f000 8144 	beq.w	800bc8e <RadioSetTxGenericConfig+0x2ae>
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	f300 8160 	bgt.w	800bccc <RadioSetTxGenericConfig+0x2ec>
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <RadioSetTxGenericConfig+0x38>
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	f000 80b7 	beq.w	800bb84 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800ba16:	e159      	b.n	800bccc <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <RadioSetTxGenericConfig+0x48>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <RadioSetTxGenericConfig+0x4e>
            return -1;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba2c:	e163      	b.n	800bcf6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	7d1b      	ldrb	r3, [r3, #20]
 800ba32:	2b08      	cmp	r3, #8
 800ba34:	d902      	bls.n	800ba3c <RadioSetTxGenericConfig+0x5c>
            return -1;
 800ba36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba3a:	e15c      	b.n	800bcf6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba40:	e00d      	b.n	800ba5e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	699a      	ldr	r2, [r3, #24]
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	4413      	add	r3, r2
 800ba4a:	7819      	ldrb	r1, [r3, #0]
 800ba4c:	f107 021c 	add.w	r2, r7, #28
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	4413      	add	r3, r2
 800ba54:	460a      	mov	r2, r1
 800ba56:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	7d1b      	ldrb	r3, [r3, #20]
 800ba62:	461a      	mov	r2, r3
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	4293      	cmp	r3, r2
 800ba68:	dbeb      	blt.n	800ba42 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ba6a:	4ba5      	ldr	r3, [pc, #660]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	4aa2      	ldr	r2, [pc, #648]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800ba78:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	781a      	ldrb	r2, [r3, #0]
 800ba7e:	4ba0      	ldr	r3, [pc, #640]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800ba80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 f9e7 	bl	800ce5c <SUBGRF_GetFskBandwidthRegValue>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461a      	mov	r2, r3
 800ba92:	4b9b      	ldr	r3, [pc, #620]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800ba94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	4a98      	ldr	r2, [pc, #608]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800ba9e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800baa0:	4b97      	ldr	r3, [pc, #604]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	b29a      	uxth	r2, r3
 800bab0:	4b93      	ldr	r3, [pc, #588]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bab2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800bab4:	4b92      	ldr	r3, [pc, #584]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bab6:	2204      	movs	r2, #4
 800bab8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	7d1b      	ldrb	r3, [r3, #20]
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	4b8f      	ldr	r3, [pc, #572]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bac4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800bac6:	4b8e      	ldr	r3, [pc, #568]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bac8:	2200      	movs	r2, #0
 800baca:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d003      	beq.n	800bade <RadioSetTxGenericConfig+0xfe>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	7f9b      	ldrb	r3, [r3, #30]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d12a      	bne.n	800bb34 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	7fdb      	ldrb	r3, [r3, #31]
 800bae2:	2bf1      	cmp	r3, #241	; 0xf1
 800bae4:	d00a      	beq.n	800bafc <RadioSetTxGenericConfig+0x11c>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	7fdb      	ldrb	r3, [r3, #31]
 800baea:	2bf2      	cmp	r3, #242	; 0xf2
 800baec:	d006      	beq.n	800bafc <RadioSetTxGenericConfig+0x11c>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	7fdb      	ldrb	r3, [r3, #31]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d002      	beq.n	800bafc <RadioSetTxGenericConfig+0x11c>
                return -1;
 800baf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bafa:	e0fc      	b.n	800bcf6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800bafc:	2301      	movs	r3, #1
 800bafe:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800bb04:	4b7f      	ldr	r3, [pc, #508]	; (800bd04 <RadioSetTxGenericConfig+0x324>)
 800bb06:	6819      	ldr	r1, [r3, #0]
 800bb08:	f107 0310 	add.w	r3, r7, #16
 800bb0c:	4a7e      	ldr	r2, [pc, #504]	; (800bd08 <RadioSetTxGenericConfig+0x328>)
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f001 fa66 	bl	800cfe0 <RFW_Init>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <RadioSetTxGenericConfig+0x140>
              return -1;
 800bb1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb1e:	e0ea      	b.n	800bcf6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800bb20:	4b77      	ldr	r3, [pc, #476]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800bb26:	4b76      	ldr	r3, [pc, #472]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb28:	2201      	movs	r2, #1
 800bb2a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800bb2c:	4b74      	ldr	r3, [pc, #464]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	755a      	strb	r2, [r3, #21]
        {
 800bb32:	e00c      	b.n	800bb4e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	7fda      	ldrb	r2, [r3, #31]
 800bb38:	4b71      	ldr	r3, [pc, #452]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb3a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800bb42:	4b6f      	ldr	r3, [pc, #444]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb44:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	7f9a      	ldrb	r2, [r3, #30]
 800bb4a:	4b6d      	ldr	r3, [pc, #436]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb4c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800bb4e:	f7ff f926 	bl	800ad9e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800bb52:	2000      	movs	r0, #0
 800bb54:	f7fe fabe 	bl	800a0d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bb58:	486c      	ldr	r0, [pc, #432]	; (800bd0c <RadioSetTxGenericConfig+0x32c>)
 800bb5a:	f000 fd61 	bl	800c620 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bb5e:	486c      	ldr	r0, [pc, #432]	; (800bd10 <RadioSetTxGenericConfig+0x330>)
 800bb60:	f000 fe2a 	bl	800c7b8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800bb64:	f107 031c 	add.w	r3, r7, #28
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f964 	bl	800be36 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	8b9b      	ldrh	r3, [r3, #28]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f9ae 	bl	800bed4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	8c1b      	ldrh	r3, [r3, #32]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 f989 	bl	800be94 <SUBGRF_SetCrcPolynomial>
        break;
 800bb82:	e0a4      	b.n	800bcce <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bb84:	4b5e      	ldr	r3, [pc, #376]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800bb92:	4b5b      	ldr	r3, [pc, #364]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bb94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800bb9e:	4b58      	ldr	r3, [pc, #352]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800bbaa:	4b55      	ldr	r3, [pc, #340]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bbac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d010      	beq.n	800bbdc <RadioSetTxGenericConfig+0x1fc>
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	dc22      	bgt.n	800bc04 <RadioSetTxGenericConfig+0x224>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <RadioSetTxGenericConfig+0x1e8>
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d005      	beq.n	800bbd2 <RadioSetTxGenericConfig+0x1f2>
            break;
 800bbc6:	e01d      	b.n	800bc04 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800bbc8:	4b4d      	ldr	r3, [pc, #308]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800bbd0:	e019      	b.n	800bc06 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800bbd2:	4b4b      	ldr	r3, [pc, #300]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800bbda:	e014      	b.n	800bc06 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe2:	2b0b      	cmp	r3, #11
 800bbe4:	d004      	beq.n	800bbf0 <RadioSetTxGenericConfig+0x210>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbec:	2b0c      	cmp	r3, #12
 800bbee:	d104      	bne.n	800bbfa <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800bbf0:	4b43      	ldr	r3, [pc, #268]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800bbf8:	e005      	b.n	800bc06 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800bbfa:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800bc02:	e000      	b.n	800bc06 <RadioSetTxGenericConfig+0x226>
            break;
 800bc04:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bc06:	4b3e      	ldr	r3, [pc, #248]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc08:	2201      	movs	r2, #1
 800bc0a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc10:	4b3b      	ldr	r3, [pc, #236]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc12:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800bc1a:	4b39      	ldr	r3, [pc, #228]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc1c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bc24:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc26:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bc30:	4b33      	ldr	r3, [pc, #204]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800bc36:	f7ff f8b2 	bl	800ad9e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	f7fe fa4a 	bl	800a0d4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bc40:	4832      	ldr	r0, [pc, #200]	; (800bd0c <RadioSetTxGenericConfig+0x32c>)
 800bc42:	f000 fced 	bl	800c620 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bc46:	4832      	ldr	r0, [pc, #200]	; (800bd10 <RadioSetTxGenericConfig+0x330>)
 800bc48:	f000 fdb6 	bl	800c7b8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800bc4c:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bc4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc52:	2b06      	cmp	r3, #6
 800bc54:	d10d      	bne.n	800bc72 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800bc56:	f640 0089 	movw	r0, #2185	; 0x889
 800bc5a:	f000 ff09 	bl	800ca70 <SUBGRF_ReadRegister>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f023 0304 	bic.w	r3, r3, #4
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	4619      	mov	r1, r3
 800bc68:	f640 0089 	movw	r0, #2185	; 0x889
 800bc6c:	f000 feec 	bl	800ca48 <SUBGRF_WriteRegister>
        break;
 800bc70:	e02d      	b.n	800bcce <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800bc72:	f640 0089 	movw	r0, #2185	; 0x889
 800bc76:	f000 fefb 	bl	800ca70 <SUBGRF_ReadRegister>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f043 0304 	orr.w	r3, r3, #4
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	4619      	mov	r1, r3
 800bc84:	f640 0089 	movw	r0, #2185	; 0x889
 800bc88:	f000 fede 	bl	800ca48 <SUBGRF_WriteRegister>
        break;
 800bc8c:	e01f      	b.n	800bcce <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d004      	beq.n	800bca0 <RadioSetTxGenericConfig+0x2c0>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc9e:	d902      	bls.n	800bca6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bca4:	e027      	b.n	800bcf6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800bca6:	2002      	movs	r0, #2
 800bca8:	f7fe fa14 	bl	800a0d4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800bcac:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb8:	4a11      	ldr	r2, [pc, #68]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bcba:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800bcbc:	4b10      	ldr	r3, [pc, #64]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bcbe:	2216      	movs	r2, #22
 800bcc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bcc4:	4811      	ldr	r0, [pc, #68]	; (800bd0c <RadioSetTxGenericConfig+0x32c>)
 800bcc6:	f000 fcab 	bl	800c620 <SUBGRF_SetModulationParams>
        break;
 800bcca:	e000      	b.n	800bcce <RadioSetTxGenericConfig+0x2ee>
        break;
 800bccc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800bcce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 ffd4 	bl	800cc80 <SUBGRF_SetRfTxPower>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	4b08      	ldr	r3, [pc, #32]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bcde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800bce2:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bce4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800bce8:	4618      	mov	r0, r3
 800bcea:	f001 f99a 	bl	800d022 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800bcee:	4a04      	ldr	r2, [pc, #16]	; (800bd00 <RadioSetTxGenericConfig+0x320>)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6053      	str	r3, [r2, #4]
    return 0;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3728      	adds	r7, #40	; 0x28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20002554 	.word	0x20002554
 800bd04:	20001c58 	.word	0x20001c58
 800bd08:	200025ac 	.word	0x200025ac
 800bd0c:	2000258c 	.word	0x2000258c
 800bd10:	20002562 	.word	0x20002562

0800bd14 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800bd22:	4a1a      	ldr	r2, [pc, #104]	; (800bd8c <SUBGRF_Init+0x78>)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800bd28:	f7f5 fb3c 	bl	80013a4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800bd2c:	2002      	movs	r0, #2
 800bd2e:	f001 f873 	bl	800ce18 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800bd32:	4b17      	ldr	r3, [pc, #92]	; (800bd90 <SUBGRF_Init+0x7c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800bd38:	2000      	movs	r0, #0
 800bd3a:	f000 f977 	bl	800c02c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800bd3e:	f001 fc04 	bl	800d54a <RBI_IsTCXO>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d10e      	bne.n	800bd66 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	f000 fb78 	bl	800c440 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800bd50:	2100      	movs	r1, #0
 800bd52:	f640 1011 	movw	r0, #2321	; 0x911
 800bd56:	f000 fe77 	bl	800ca48 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800bd5a:	237f      	movs	r3, #127	; 0x7f
 800bd5c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800bd5e:	7b38      	ldrb	r0, [r7, #12]
 800bd60:	f000 fa85 	bl	800c26e <SUBGRF_Calibrate>
 800bd64:	e009      	b.n	800bd7a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800bd66:	2120      	movs	r1, #32
 800bd68:	f640 1011 	movw	r0, #2321	; 0x911
 800bd6c:	f000 fe6c 	bl	800ca48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800bd70:	2120      	movs	r1, #32
 800bd72:	f640 1012 	movw	r0, #2322	; 0x912
 800bd76:	f000 fe67 	bl	800ca48 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800bd7a:	f001 fbc3 	bl	800d504 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800bd7e:	4b05      	ldr	r3, [pc, #20]	; (800bd94 <SUBGRF_Init+0x80>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	701a      	strb	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20001c68 	.word	0x20001c68
 800bd90:	20001c64 	.word	0x20001c64
 800bd94:	20001c5c 	.word	0x20001c5c

0800bd98 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <SUBGRF_GetOperatingMode+0x10>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bc80      	pop	{r7}
 800bda6:	4770      	bx	lr
 800bda8:	20001c5c 	.word	0x20001c5c

0800bdac <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	f000 feae 	bl	800cb20 <SUBGRF_WriteBuffer>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800bdde:	f107 0317 	add.w	r3, r7, #23
 800bde2:	4619      	mov	r1, r3
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f000 fdb1 	bl	800c94c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	79fa      	ldrb	r2, [r7, #7]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d201      	bcs.n	800bdf8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e007      	b.n	800be08 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800bdf8:	7df8      	ldrb	r0, [r7, #23]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	f000 feaf 	bl	800cb64 <SUBGRF_ReadBuffer>

    return 0;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	460b      	mov	r3, r1
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800be1e:	7afb      	ldrb	r3, [r7, #11]
 800be20:	4619      	mov	r1, r3
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff ffc2 	bl	800bdac <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f91b 	bl	800c064 <SUBGRF_SetTx>
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800be3e:	2208      	movs	r2, #8
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800be46:	f000 fe27 	bl	800ca98 <SUBGRF_WriteRegisters>
    return 0;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800be5e:	88fb      	ldrh	r3, [r7, #6]
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	b29b      	uxth	r3, r3
 800be64:	b2db      	uxtb	r3, r3
 800be66:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800be6e:	f000 fb67 	bl	800c540 <SUBGRF_GetPacketType>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d108      	bne.n	800be8a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800be78:	f107 030c 	add.w	r3, r7, #12
 800be7c:	2202      	movs	r2, #2
 800be7e:	4619      	mov	r1, r3
 800be80:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800be84:	f000 fe08 	bl	800ca98 <SUBGRF_WriteRegisters>
            break;
 800be88:	e000      	b.n	800be8c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800be8a:	bf00      	nop
    }
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	0a1b      	lsrs	r3, r3, #8
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800beae:	f000 fb47 	bl	800c540 <SUBGRF_GetPacketType>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d108      	bne.n	800beca <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	2202      	movs	r2, #2
 800bebe:	4619      	mov	r1, r3
 800bec0:	f240 60be 	movw	r0, #1726	; 0x6be
 800bec4:	f000 fde8 	bl	800ca98 <SUBGRF_WriteRegisters>
            break;
 800bec8:	e000      	b.n	800becc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800beca:	bf00      	nop
    }
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800bee2:	f000 fb2d 	bl	800c540 <SUBGRF_GetPacketType>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d121      	bne.n	800bf30 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800beec:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800bef0:	f000 fdbe 	bl	800ca70 <SUBGRF_ReadRegister>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800befc:	88fb      	ldrh	r3, [r7, #6]
 800befe:	0a1b      	lsrs	r3, r3, #8
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	b25b      	sxtb	r3, r3
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	b25a      	sxtb	r2, r3
 800bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	b25b      	sxtb	r3, r3
 800bf12:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	4619      	mov	r1, r3
 800bf18:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800bf1c:	f000 fd94 	bl	800ca48 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	4619      	mov	r1, r3
 800bf26:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800bf2a:	f000 fd8d 	bl	800ca48 <SUBGRF_WriteRegister>
            break;
 800bf2e:	e000      	b.n	800bf32 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800bf30:	bf00      	nop
    }
}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800bf4c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800bf50:	f000 fd8e 	bl	800ca70 <SUBGRF_ReadRegister>
 800bf54:	4603      	mov	r3, r0
 800bf56:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	f023 0301 	bic.w	r3, r3, #1
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	4619      	mov	r1, r3
 800bf62:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800bf66:	f000 fd6f 	bl	800ca48 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800bf6a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800bf6e:	f000 fd7f 	bl	800ca70 <SUBGRF_ReadRegister>
 800bf72:	4603      	mov	r3, r0
 800bf74:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800bf76:	79bb      	ldrb	r3, [r7, #6]
 800bf78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800bf84:	f000 fd60 	bl	800ca48 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800bf88:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800bf8c:	f000 f88a 	bl	800c0a4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800bf90:	463b      	mov	r3, r7
 800bf92:	2204      	movs	r2, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	f640 0019 	movw	r0, #2073	; 0x819
 800bf9a:	f000 fd9f 	bl	800cadc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	f000 f844 	bl	800c02c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800bfac:	f000 fd4c 	bl	800ca48 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800bfb0:	79bb      	ldrb	r3, [r7, #6]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800bfb8:	f000 fd46 	bl	800ca48 <SUBGRF_WriteRegister>

    return number;
 800bfbc:	683b      	ldr	r3, [r7, #0]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f001 faa2 	bl	800d51a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800bfd6:	2002      	movs	r0, #2
 800bfd8:	f000 ff1e 	bl	800ce18 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800bfdc:	793b      	ldrb	r3, [r7, #4]
 800bfde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800bfe8:	793b      	ldrb	r3, [r7, #4]
 800bfea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800bff2:	b25b      	sxtb	r3, r3
 800bff4:	4313      	orrs	r3, r2
 800bff6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800bff8:	793b      	ldrb	r3, [r7, #4]
 800bffa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800c002:	4313      	orrs	r3, r2
 800c004:	b25b      	sxtb	r3, r3
 800c006:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800c008:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800c00a:	f107 030f 	add.w	r3, r7, #15
 800c00e:	2201      	movs	r2, #1
 800c010:	4619      	mov	r1, r3
 800c012:	2084      	movs	r0, #132	; 0x84
 800c014:	f000 fdc8 	bl	800cba8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800c018:	4b03      	ldr	r3, [pc, #12]	; (800c028 <SUBGRF_SetSleep+0x60>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20001c5c 	.word	0x20001c5c

0800c02c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800c036:	1dfb      	adds	r3, r7, #7
 800c038:	2201      	movs	r2, #1
 800c03a:	4619      	mov	r1, r3
 800c03c:	2080      	movs	r0, #128	; 0x80
 800c03e:	f000 fdb3 	bl	800cba8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d103      	bne.n	800c050 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800c048:	4b05      	ldr	r3, [pc, #20]	; (800c060 <SUBGRF_SetStandby+0x34>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800c04e:	e002      	b.n	800c056 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800c050:	4b03      	ldr	r3, [pc, #12]	; (800c060 <SUBGRF_SetStandby+0x34>)
 800c052:	2202      	movs	r2, #2
 800c054:	701a      	strb	r2, [r3, #0]
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20001c5c 	.word	0x20001c5c

0800c064 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800c06c:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <SUBGRF_SetTx+0x3c>)
 800c06e:	2204      	movs	r2, #4
 800c070:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	0c1b      	lsrs	r3, r3, #16
 800c076:	b2db      	uxtb	r3, r3
 800c078:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	0a1b      	lsrs	r3, r3, #8
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800c088:	f107 030c 	add.w	r3, r7, #12
 800c08c:	2203      	movs	r2, #3
 800c08e:	4619      	mov	r1, r3
 800c090:	2083      	movs	r0, #131	; 0x83
 800c092:	f000 fd89 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20001c5c 	.word	0x20001c5c

0800c0a4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800c0ac:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <SUBGRF_SetRx+0x3c>)
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	0c1b      	lsrs	r3, r3, #16
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	0a1b      	lsrs	r3, r3, #8
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800c0c8:	f107 030c 	add.w	r3, r7, #12
 800c0cc:	2203      	movs	r2, #3
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	2082      	movs	r0, #130	; 0x82
 800c0d2:	f000 fd69 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c0d6:	bf00      	nop
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20001c5c 	.word	0x20001c5c

0800c0e4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800c0ec:	4b0e      	ldr	r3, [pc, #56]	; (800c128 <SUBGRF_SetRxBoosted+0x44>)
 800c0ee:	2205      	movs	r2, #5
 800c0f0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800c0f2:	2197      	movs	r1, #151	; 0x97
 800c0f4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800c0f8:	f000 fca6 	bl	800ca48 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	0c1b      	lsrs	r3, r3, #16
 800c100:	b2db      	uxtb	r3, r3
 800c102:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	2203      	movs	r2, #3
 800c118:	4619      	mov	r1, r3
 800c11a:	2082      	movs	r0, #130	; 0x82
 800c11c:	f000 fd44 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c120:	bf00      	nop
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20001c5c 	.word	0x20001c5c

0800c12c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	0c1b      	lsrs	r3, r3, #16
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	0a1b      	lsrs	r3, r3, #8
 800c142:	b2db      	uxtb	r3, r3
 800c144:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	b2db      	uxtb	r3, r3
 800c152:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800c162:	f107 0308 	add.w	r3, r7, #8
 800c166:	2206      	movs	r2, #6
 800c168:	4619      	mov	r1, r3
 800c16a:	2094      	movs	r0, #148	; 0x94
 800c16c:	f000 fd1c 	bl	800cba8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800c170:	4b03      	ldr	r3, [pc, #12]	; (800c180 <SUBGRF_SetRxDutyCycle+0x54>)
 800c172:	2206      	movs	r2, #6
 800c174:	701a      	strb	r2, [r3, #0]
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20001c5c 	.word	0x20001c5c

0800c184 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800c188:	2200      	movs	r2, #0
 800c18a:	2100      	movs	r1, #0
 800c18c:	20c5      	movs	r0, #197	; 0xc5
 800c18e:	f000 fd0b 	bl	800cba8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800c192:	4b02      	ldr	r3, [pc, #8]	; (800c19c <SUBGRF_SetCad+0x18>)
 800c194:	2207      	movs	r2, #7
 800c196:	701a      	strb	r2, [r3, #0]
}
 800c198:	bf00      	nop
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20001c5c 	.word	0x20001c5c

0800c1a0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	20d1      	movs	r0, #209	; 0xd1
 800c1aa:	f000 fcfd 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c1ae:	bf00      	nop
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	20d2      	movs	r0, #210	; 0xd2
 800c1bc:	f000 fcf4 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c1c0:	bf00      	nop
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800c1ce:	1dfb      	adds	r3, r7, #7
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	209f      	movs	r0, #159	; 0x9f
 800c1d6:	f000 fce7 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800c1ec:	1dfb      	adds	r3, r7, #7
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	20a0      	movs	r0, #160	; 0xa0
 800c1f4:	f000 fcd8 	bl	800cba8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800c1f8:	79fb      	ldrb	r3, [r7, #7]
 800c1fa:	2b3f      	cmp	r3, #63	; 0x3f
 800c1fc:	d91c      	bls.n	800c238 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	085b      	lsrs	r3, r3, #1
 800c202:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800c20c:	e005      	b.n	800c21a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	089b      	lsrs	r3, r3, #2
 800c212:	73fb      	strb	r3, [r7, #15]
            exp++;
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	3301      	adds	r3, #1
 800c218:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	2b1f      	cmp	r3, #31
 800c21e:	d8f6      	bhi.n	800c20e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	b2da      	uxtb	r2, r3
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	4413      	add	r3, r2
 800c22a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800c22c:	7b7b      	ldrb	r3, [r7, #13]
 800c22e:	4619      	mov	r1, r3
 800c230:	f240 7006 	movw	r0, #1798	; 0x706
 800c234:	f000 fc08 	bl	800ca48 <SUBGRF_WriteRegister>
    }
}
 800c238:	bf00      	nop
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800c246:	f001 f98b 	bl	800d560 <RBI_IsDCDC>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d102      	bne.n	800c256 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800c250:	2301      	movs	r3, #1
 800c252:	71fb      	strb	r3, [r7, #7]
 800c254:	e001      	b.n	800c25a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800c256:	2300      	movs	r3, #0
 800c258:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800c25a:	1dfb      	adds	r3, r7, #7
 800c25c:	2201      	movs	r2, #1
 800c25e:	4619      	mov	r1, r3
 800c260:	2096      	movs	r0, #150	; 0x96
 800c262:	f000 fca1 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c266:	bf00      	nop
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c276:	793b      	ldrb	r3, [r7, #4]
 800c278:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	019b      	lsls	r3, r3, #6
 800c280:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800c282:	793b      	ldrb	r3, [r7, #4]
 800c284:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c28c:	b25b      	sxtb	r3, r3
 800c28e:	4313      	orrs	r3, r2
 800c290:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800c292:	793b      	ldrb	r3, [r7, #4]
 800c294:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800c2a2:	793b      	ldrb	r3, [r7, #4]
 800c2a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800c2ac:	b25b      	sxtb	r3, r3
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800c2b2:	793b      	ldrb	r3, [r7, #4]
 800c2b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800c2bc:	b25b      	sxtb	r3, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800c2c2:	793b      	ldrb	r3, [r7, #4]
 800c2c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800c2cc:	b25b      	sxtb	r3, r3
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800c2d2:	793b      	ldrb	r3, [r7, #4]
 800c2d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800c2e2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800c2e4:	f107 030f 	add.w	r3, r7, #15
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	2089      	movs	r0, #137	; 0x89
 800c2ee:	f000 fc5b 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c2f2:	bf00      	nop
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a1b      	ldr	r2, [pc, #108]	; (800c374 <SUBGRF_CalibrateImage+0x78>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d904      	bls.n	800c316 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800c30c:	23e1      	movs	r3, #225	; 0xe1
 800c30e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800c310:	23e9      	movs	r3, #233	; 0xe9
 800c312:	737b      	strb	r3, [r7, #13]
 800c314:	e022      	b.n	800c35c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a17      	ldr	r2, [pc, #92]	; (800c378 <SUBGRF_CalibrateImage+0x7c>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d904      	bls.n	800c328 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800c31e:	23d7      	movs	r3, #215	; 0xd7
 800c320:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800c322:	23db      	movs	r3, #219	; 0xdb
 800c324:	737b      	strb	r3, [r7, #13]
 800c326:	e019      	b.n	800c35c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a14      	ldr	r2, [pc, #80]	; (800c37c <SUBGRF_CalibrateImage+0x80>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d904      	bls.n	800c33a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800c330:	23c1      	movs	r3, #193	; 0xc1
 800c332:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800c334:	23c5      	movs	r3, #197	; 0xc5
 800c336:	737b      	strb	r3, [r7, #13]
 800c338:	e010      	b.n	800c35c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a10      	ldr	r2, [pc, #64]	; (800c380 <SUBGRF_CalibrateImage+0x84>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d904      	bls.n	800c34c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800c342:	2375      	movs	r3, #117	; 0x75
 800c344:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800c346:	2381      	movs	r3, #129	; 0x81
 800c348:	737b      	strb	r3, [r7, #13]
 800c34a:	e007      	b.n	800c35c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a0d      	ldr	r2, [pc, #52]	; (800c384 <SUBGRF_CalibrateImage+0x88>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d903      	bls.n	800c35c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800c354:	236b      	movs	r3, #107	; 0x6b
 800c356:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800c358:	236f      	movs	r3, #111	; 0x6f
 800c35a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800c35c:	f107 030c 	add.w	r3, r7, #12
 800c360:	2202      	movs	r2, #2
 800c362:	4619      	mov	r1, r3
 800c364:	2098      	movs	r0, #152	; 0x98
 800c366:	f000 fc1f 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	35a4e900 	.word	0x35a4e900
 800c378:	32a9f880 	.word	0x32a9f880
 800c37c:	2de54480 	.word	0x2de54480
 800c380:	1b6b0b00 	.word	0x1b6b0b00
 800c384:	1954fc40 	.word	0x1954fc40

0800c388 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	4611      	mov	r1, r2
 800c394:	461a      	mov	r2, r3
 800c396:	4623      	mov	r3, r4
 800c398:	71fb      	strb	r3, [r7, #7]
 800c39a:	4603      	mov	r3, r0
 800c39c:	71bb      	strb	r3, [r7, #6]
 800c39e:	460b      	mov	r3, r1
 800c3a0:	717b      	strb	r3, [r7, #5]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800c3aa:	79bb      	ldrb	r3, [r7, #6]
 800c3ac:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800c3ae:	797b      	ldrb	r3, [r7, #5]
 800c3b0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800c3b2:	793b      	ldrb	r3, [r7, #4]
 800c3b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	4619      	mov	r1, r3
 800c3be:	2095      	movs	r0, #149	; 0x95
 800c3c0:	f000 fbf2 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c3c4:	bf00      	nop
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd90      	pop	{r4, r7, pc}

0800c3cc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800c3cc:	b590      	push	{r4, r7, lr}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4623      	mov	r3, r4
 800c3dc:	80fb      	strh	r3, [r7, #6]
 800c3de:	4603      	mov	r3, r0
 800c3e0:	80bb      	strh	r3, [r7, #4]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	807b      	strh	r3, [r7, #2]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800c3ea:	88fb      	ldrh	r3, [r7, #6]
 800c3ec:	0a1b      	lsrs	r3, r3, #8
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800c3f4:	88fb      	ldrh	r3, [r7, #6]
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800c3fa:	88bb      	ldrh	r3, [r7, #4]
 800c3fc:	0a1b      	lsrs	r3, r3, #8
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	b2db      	uxtb	r3, r3
 800c402:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800c404:	88bb      	ldrh	r3, [r7, #4]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800c40a:	887b      	ldrh	r3, [r7, #2]
 800c40c:	0a1b      	lsrs	r3, r3, #8
 800c40e:	b29b      	uxth	r3, r3
 800c410:	b2db      	uxtb	r3, r3
 800c412:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800c414:	887b      	ldrh	r3, [r7, #2]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800c41a:	883b      	ldrh	r3, [r7, #0]
 800c41c:	0a1b      	lsrs	r3, r3, #8
 800c41e:	b29b      	uxth	r3, r3
 800c420:	b2db      	uxtb	r3, r3
 800c422:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800c424:	883b      	ldrh	r3, [r7, #0]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	2208      	movs	r2, #8
 800c430:	4619      	mov	r1, r3
 800c432:	2008      	movs	r0, #8
 800c434:	f000 fbb8 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c438:	bf00      	nop
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd90      	pop	{r4, r7, pc}

0800c440 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	6039      	str	r1, [r7, #0]
 800c44a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	b2db      	uxtb	r3, r3
 800c454:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	0c1b      	lsrs	r3, r3, #16
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	b2db      	uxtb	r3, r3
 800c464:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c46c:	f107 030c 	add.w	r3, r7, #12
 800c470:	2204      	movs	r2, #4
 800c472:	4619      	mov	r1, r3
 800c474:	2097      	movs	r0, #151	; 0x97
 800c476:	f000 fb97 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800c484:	b5b0      	push	{r4, r5, r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800c490:	4b1b      	ldr	r3, [pc, #108]	; (800c500 <SUBGRF_SetRfFrequency+0x7c>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	f083 0301 	eor.w	r3, r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff ff2c 	bl	800c2fc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800c4a4:	4b16      	ldr	r3, [pc, #88]	; (800c500 <SUBGRF_SetRfFrequency+0x7c>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	09d5      	lsrs	r5, r2, #7
 800c4b4:	0654      	lsls	r4, r2, #25
 800c4b6:	4a13      	ldr	r2, [pc, #76]	; (800c504 <SUBGRF_SetRfFrequency+0x80>)
 800c4b8:	f04f 0300 	mov.w	r3, #0
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f4 fc64 	bl	8000d8c <__aeabi_uldivmod>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	0e1b      	lsrs	r3, r3, #24
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	0c1b      	lsrs	r3, r3, #16
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	0a1b      	lsrs	r3, r3, #8
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c4ea:	f107 0308 	add.w	r3, r7, #8
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	2086      	movs	r0, #134	; 0x86
 800c4f4:	f000 fb58 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c4f8:	bf00      	nop
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c500:	20001c64 	.word	0x20001c64
 800c504:	01e84800 	.word	0x01e84800

0800c508 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800c512:	79fa      	ldrb	r2, [r7, #7]
 800c514:	4b09      	ldr	r3, [pc, #36]	; (800c53c <SUBGRF_SetPacketType+0x34>)
 800c516:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800c518:	79fb      	ldrb	r3, [r7, #7]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d104      	bne.n	800c528 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800c51e:	2100      	movs	r1, #0
 800c520:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800c524:	f000 fa90 	bl	800ca48 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800c528:	1dfb      	adds	r3, r7, #7
 800c52a:	2201      	movs	r2, #1
 800c52c:	4619      	mov	r1, r3
 800c52e:	208a      	movs	r0, #138	; 0x8a
 800c530:	f000 fb3a 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20001c5d 	.word	0x20001c5d

0800c540 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800c540:	b480      	push	{r7}
 800c542:	af00      	add	r7, sp, #0
    return PacketType;
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <SUBGRF_GetPacketType+0x10>)
 800c546:	781b      	ldrb	r3, [r3, #0]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bc80      	pop	{r7}
 800c54e:	4770      	bx	lr
 800c550:	20001c5d 	.word	0x20001c5d

0800c554 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	4603      	mov	r3, r0
 800c55c:	71fb      	strb	r3, [r7, #7]
 800c55e:	460b      	mov	r3, r1
 800c560:	71bb      	strb	r3, [r7, #6]
 800c562:	4613      	mov	r3, r2
 800c564:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d124      	bne.n	800c5b6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800c56c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c570:	2b0f      	cmp	r3, #15
 800c572:	d106      	bne.n	800c582 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800c574:	2301      	movs	r3, #1
 800c576:	2201      	movs	r2, #1
 800c578:	2100      	movs	r1, #0
 800c57a:	2006      	movs	r0, #6
 800c57c:	f7ff ff04 	bl	800c388 <SUBGRF_SetPaConfig>
 800c580:	e005      	b.n	800c58e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800c582:	2301      	movs	r3, #1
 800c584:	2201      	movs	r2, #1
 800c586:	2100      	movs	r1, #0
 800c588:	2004      	movs	r0, #4
 800c58a:	f7ff fefd 	bl	800c388 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800c58e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c592:	2b0d      	cmp	r3, #13
 800c594:	dd02      	ble.n	800c59c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800c596:	230e      	movs	r3, #14
 800c598:	71bb      	strb	r3, [r7, #6]
 800c59a:	e006      	b.n	800c5aa <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800c59c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c5a0:	f113 0f11 	cmn.w	r3, #17
 800c5a4:	da01      	bge.n	800c5aa <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800c5a6:	23ef      	movs	r3, #239	; 0xef
 800c5a8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800c5aa:	2118      	movs	r1, #24
 800c5ac:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800c5b0:	f000 fa4a 	bl	800ca48 <SUBGRF_WriteRegister>
 800c5b4:	e025      	b.n	800c602 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800c5b6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800c5ba:	f000 fa59 	bl	800ca70 <SUBGRF_ReadRegister>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	f043 031e 	orr.w	r3, r3, #30
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800c5cc:	f000 fa3c 	bl	800ca48 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2107      	movs	r1, #7
 800c5d6:	2004      	movs	r0, #4
 800c5d8:	f7ff fed6 	bl	800c388 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800c5dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c5e0:	2b16      	cmp	r3, #22
 800c5e2:	dd02      	ble.n	800c5ea <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800c5e4:	2316      	movs	r3, #22
 800c5e6:	71bb      	strb	r3, [r7, #6]
 800c5e8:	e006      	b.n	800c5f8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800c5ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c5ee:	f113 0f09 	cmn.w	r3, #9
 800c5f2:	da01      	bge.n	800c5f8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800c5f4:	23f7      	movs	r3, #247	; 0xf7
 800c5f6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800c5f8:	2138      	movs	r1, #56	; 0x38
 800c5fa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800c5fe:	f000 fa23 	bl	800ca48 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800c602:	79bb      	ldrb	r3, [r7, #6]
 800c604:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800c606:	797b      	ldrb	r3, [r7, #5]
 800c608:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800c60a:	f107 030c 	add.w	r3, r7, #12
 800c60e:	2202      	movs	r2, #2
 800c610:	4619      	mov	r1, r3
 800c612:	208e      	movs	r0, #142	; 0x8e
 800c614:	f000 fac8 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c618:	bf00      	nop
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800c620:	b5b0      	push	{r4, r5, r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c62c:	4a5e      	ldr	r2, [pc, #376]	; (800c7a8 <SUBGRF_SetModulationParams+0x188>)
 800c62e:	f107 0308 	add.w	r3, r7, #8
 800c632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c636:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	781a      	ldrb	r2, [r3, #0]
 800c63e:	4b5b      	ldr	r3, [pc, #364]	; (800c7ac <SUBGRF_SetModulationParams+0x18c>)
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d004      	beq.n	800c650 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7ff ff5c 	bl	800c508 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b03      	cmp	r3, #3
 800c656:	f200 80a2 	bhi.w	800c79e <SUBGRF_SetModulationParams+0x17e>
 800c65a:	a201      	add	r2, pc, #4	; (adr r2, 800c660 <SUBGRF_SetModulationParams+0x40>)
 800c65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c660:	0800c671 	.word	0x0800c671
 800c664:	0800c72d 	.word	0x0800c72d
 800c668:	0800c6ef 	.word	0x0800c6ef
 800c66c:	0800c75b 	.word	0x0800c75b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800c670:	2308      	movs	r3, #8
 800c672:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a4d      	ldr	r2, [pc, #308]	; (800c7b0 <SUBGRF_SetModulationParams+0x190>)
 800c67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c67e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	0c1b      	lsrs	r3, r3, #16
 800c684:	b2db      	uxtb	r3, r3
 800c686:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	b2db      	uxtb	r3, r3
 800c694:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7b1b      	ldrb	r3, [r3, #12]
 800c69a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7b5b      	ldrb	r3, [r3, #13]
 800c6a0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	09d5      	lsrs	r5, r2, #7
 800c6ae:	0654      	lsls	r4, r2, #25
 800c6b0:	4a40      	ldr	r2, [pc, #256]	; (800c7b4 <SUBGRF_SetModulationParams+0x194>)
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7f4 fb67 	bl	8000d8c <__aeabi_uldivmod>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	0c1b      	lsrs	r3, r3, #16
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	0a1b      	lsrs	r3, r3, #8
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c6dc:	7cfb      	ldrb	r3, [r7, #19]
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	f107 0308 	add.w	r3, r7, #8
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	208b      	movs	r0, #139	; 0x8b
 800c6e8:	f000 fa5e 	bl	800cba8 <SUBGRF_WriteCommand>
        break;
 800c6ec:	e058      	b.n	800c7a0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800c6ee:	2304      	movs	r3, #4
 800c6f0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	4a2e      	ldr	r2, [pc, #184]	; (800c7b0 <SUBGRF_SetModulationParams+0x190>)
 800c6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	0c1b      	lsrs	r3, r3, #16
 800c702:	b2db      	uxtb	r3, r3
 800c704:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	0a1b      	lsrs	r3, r3, #8
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	7d1b      	ldrb	r3, [r3, #20]
 800c718:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c71a:	7cfb      	ldrb	r3, [r7, #19]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	f107 0308 	add.w	r3, r7, #8
 800c722:	4619      	mov	r1, r3
 800c724:	208b      	movs	r0, #139	; 0x8b
 800c726:	f000 fa3f 	bl	800cba8 <SUBGRF_WriteCommand>
        break;
 800c72a:	e039      	b.n	800c7a0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800c72c:	2304      	movs	r3, #4
 800c72e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	7e1b      	ldrb	r3, [r3, #24]
 800c734:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7e5b      	ldrb	r3, [r3, #25]
 800c73a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	7e9b      	ldrb	r3, [r3, #26]
 800c740:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	7edb      	ldrb	r3, [r3, #27]
 800c746:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c748:	7cfb      	ldrb	r3, [r7, #19]
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	f107 0308 	add.w	r3, r7, #8
 800c750:	4619      	mov	r1, r3
 800c752:	208b      	movs	r0, #139	; 0x8b
 800c754:	f000 fa28 	bl	800cba8 <SUBGRF_WriteCommand>

        break;
 800c758:	e022      	b.n	800c7a0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800c75a:	2305      	movs	r3, #5
 800c75c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	4a13      	ldr	r2, [pc, #76]	; (800c7b0 <SUBGRF_SetModulationParams+0x190>)
 800c764:	fbb2 f3f3 	udiv	r3, r2, r3
 800c768:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	0c1b      	lsrs	r3, r3, #16
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	0a1b      	lsrs	r3, r3, #8
 800c776:	b2db      	uxtb	r3, r3
 800c778:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7b1b      	ldrb	r3, [r3, #12]
 800c784:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7b5b      	ldrb	r3, [r3, #13]
 800c78a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c78c:	7cfb      	ldrb	r3, [r7, #19]
 800c78e:	b29a      	uxth	r2, r3
 800c790:	f107 0308 	add.w	r3, r7, #8
 800c794:	4619      	mov	r1, r3
 800c796:	208b      	movs	r0, #139	; 0x8b
 800c798:	f000 fa06 	bl	800cba8 <SUBGRF_WriteCommand>
        break;
 800c79c:	e000      	b.n	800c7a0 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800c79e:	bf00      	nop
    }
}
 800c7a0:	bf00      	nop
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7a8:	0800dc30 	.word	0x0800dc30
 800c7ac:	20001c5d 	.word	0x20001c5d
 800c7b0:	3d090000 	.word	0x3d090000
 800c7b4:	01e84800 	.word	0x01e84800

0800c7b8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c7c4:	4a48      	ldr	r2, [pc, #288]	; (800c8e8 <SUBGRF_SetPacketParams+0x130>)
 800c7c6:	f107 030c 	add.w	r3, r7, #12
 800c7ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7cc:	c303      	stmia	r3!, {r0, r1}
 800c7ce:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	4b45      	ldr	r3, [pc, #276]	; (800c8ec <SUBGRF_SetPacketParams+0x134>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d004      	beq.n	800c7e6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff fe91 	bl	800c508 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d878      	bhi.n	800c8e0 <SUBGRF_SetPacketParams+0x128>
 800c7ee:	a201      	add	r2, pc, #4	; (adr r2, 800c7f4 <SUBGRF_SetPacketParams+0x3c>)
 800c7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f4:	0800c805 	.word	0x0800c805
 800c7f8:	0800c895 	.word	0x0800c895
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c805 	.word	0x0800c805
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7a5b      	ldrb	r3, [r3, #9]
 800c808:	2bf1      	cmp	r3, #241	; 0xf1
 800c80a:	d10a      	bne.n	800c822 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800c80c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c810:	f7ff fb20 	bl	800be54 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c814:	f248 0005 	movw	r0, #32773	; 0x8005
 800c818:	f7ff fb3c 	bl	800be94 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c81c:	2302      	movs	r3, #2
 800c81e:	75bb      	strb	r3, [r7, #22]
 800c820:	e011      	b.n	800c846 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7a5b      	ldrb	r3, [r3, #9]
 800c826:	2bf2      	cmp	r3, #242	; 0xf2
 800c828:	d10a      	bne.n	800c840 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800c82a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800c82e:	f7ff fb11 	bl	800be54 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c832:	f241 0021 	movw	r0, #4129	; 0x1021
 800c836:	f7ff fb2d 	bl	800be94 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c83a:	2306      	movs	r3, #6
 800c83c:	75bb      	strb	r3, [r7, #22]
 800c83e:	e002      	b.n	800c846 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	7a5b      	ldrb	r3, [r3, #9]
 800c844:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800c846:	2309      	movs	r3, #9
 800c848:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	885b      	ldrh	r3, [r3, #2]
 800c84e:	0a1b      	lsrs	r3, r3, #8
 800c850:	b29b      	uxth	r3, r3
 800c852:	b2db      	uxtb	r3, r3
 800c854:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	885b      	ldrh	r3, [r3, #2]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	791b      	ldrb	r3, [r3, #4]
 800c862:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	795b      	ldrb	r3, [r3, #5]
 800c868:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	799b      	ldrb	r3, [r3, #6]
 800c86e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	79db      	ldrb	r3, [r3, #7]
 800c874:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7a1b      	ldrb	r3, [r3, #8]
 800c87a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800c87c:	7dbb      	ldrb	r3, [r7, #22]
 800c87e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7a9b      	ldrb	r3, [r3, #10]
 800c884:	753b      	strb	r3, [r7, #20]
        break;
 800c886:	e022      	b.n	800c8ce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800c888:	2301      	movs	r3, #1
 800c88a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7b1b      	ldrb	r3, [r3, #12]
 800c890:	733b      	strb	r3, [r7, #12]
        break;
 800c892:	e01c      	b.n	800c8ce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800c894:	2306      	movs	r3, #6
 800c896:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	89db      	ldrh	r3, [r3, #14]
 800c89c:	0a1b      	lsrs	r3, r3, #8
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	89db      	ldrh	r3, [r3, #14]
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	7c1a      	ldrb	r2, [r3, #16]
 800c8b0:	4b0f      	ldr	r3, [pc, #60]	; (800c8f0 <SUBGRF_SetPacketParams+0x138>)
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	7019      	strb	r1, [r3, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7c5b      	ldrb	r3, [r3, #17]
 800c8be:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	7c9b      	ldrb	r3, [r3, #18]
 800c8c4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7cdb      	ldrb	r3, [r3, #19]
 800c8ca:	747b      	strb	r3, [r7, #17]
        break;
 800c8cc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	f107 030c 	add.w	r3, r7, #12
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	208c      	movs	r0, #140	; 0x8c
 800c8da:	f000 f965 	bl	800cba8 <SUBGRF_WriteCommand>
 800c8de:	e000      	b.n	800c8e2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800c8e0:	bf00      	nop
}
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	0800dc38 	.word	0x0800dc38
 800c8ec:	20001c5d 	.word	0x20001c5d
 800c8f0:	20001c5e 	.word	0x20001c5e

0800c8f4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	460a      	mov	r2, r1
 800c8fe:	71fb      	strb	r3, [r7, #7]
 800c900:	4613      	mov	r3, r2
 800c902:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800c908:	79bb      	ldrb	r3, [r7, #6]
 800c90a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c90c:	f107 030c 	add.w	r3, r7, #12
 800c910:	2202      	movs	r2, #2
 800c912:	4619      	mov	r1, r3
 800c914:	208f      	movs	r0, #143	; 0x8f
 800c916:	f000 f947 	bl	800cba8 <SUBGRF_WriteCommand>
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c92c:	1d3b      	adds	r3, r7, #4
 800c92e:	2201      	movs	r2, #1
 800c930:	4619      	mov	r1, r3
 800c932:	2015      	movs	r0, #21
 800c934:	f000 f95a 	bl	800cbec <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800c938:	793b      	ldrb	r3, [r7, #4]
 800c93a:	425b      	negs	r3, r3
 800c93c:	105b      	asrs	r3, r3, #1
 800c93e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800c940:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	2202      	movs	r2, #2
 800c95c:	4619      	mov	r1, r3
 800c95e:	2013      	movs	r0, #19
 800c960:	f000 f944 	bl	800cbec <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c964:	f7ff fdec 	bl	800c540 <SUBGRF_GetPacketType>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d10d      	bne.n	800c98a <SUBGRF_GetRxBufferStatus+0x3e>
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <SUBGRF_GetRxBufferStatus+0x54>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b01      	cmp	r3, #1
 800c976:	d108      	bne.n	800c98a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800c978:	f240 7002 	movw	r0, #1794	; 0x702
 800c97c:	f000 f878 	bl	800ca70 <SUBGRF_ReadRegister>
 800c980:	4603      	mov	r3, r0
 800c982:	461a      	mov	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	701a      	strb	r2, [r3, #0]
 800c988:	e002      	b.n	800c990 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800c98a:	7b3a      	ldrb	r2, [r7, #12]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800c990:	7b7a      	ldrb	r2, [r7, #13]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	701a      	strb	r2, [r3, #0]
}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20001c5e 	.word	0x20001c5e

0800c9a4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c9ac:	f107 030c 	add.w	r3, r7, #12
 800c9b0:	2203      	movs	r2, #3
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	2014      	movs	r0, #20
 800c9b6:	f000 f919 	bl	800cbec <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800c9ba:	f7ff fdc1 	bl	800c540 <SUBGRF_GetPacketType>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d002      	beq.n	800c9d4 <SUBGRF_GetPacketStatus+0x30>
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d013      	beq.n	800c9fa <SUBGRF_GetPacketStatus+0x56>
 800c9d2:	e02a      	b.n	800ca2a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c9d4:	7b3a      	ldrb	r2, [r7, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c9da:	7b7b      	ldrb	r3, [r7, #13]
 800c9dc:	425b      	negs	r3, r3
 800c9de:	105b      	asrs	r3, r3, #1
 800c9e0:	b25a      	sxtb	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	425b      	negs	r3, r3
 800c9ea:	105b      	asrs	r3, r3, #1
 800c9ec:	b25a      	sxtb	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	609a      	str	r2, [r3, #8]
            break;
 800c9f8:	e020      	b.n	800ca3c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c9fa:	7b3b      	ldrb	r3, [r7, #12]
 800c9fc:	425b      	negs	r3, r3
 800c9fe:	105b      	asrs	r3, r3, #1
 800ca00:	b25a      	sxtb	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ca06:	7b7b      	ldrb	r3, [r7, #13]
 800ca08:	b25b      	sxtb	r3, r3
 800ca0a:	3302      	adds	r3, #2
 800ca0c:	109b      	asrs	r3, r3, #2
 800ca0e:	b25a      	sxtb	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	425b      	negs	r3, r3
 800ca18:	105b      	asrs	r3, r3, #1
 800ca1a:	b25a      	sxtb	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ca20:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <SUBGRF_GetPacketStatus+0xa0>)
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	611a      	str	r2, [r3, #16]
            break;
 800ca28:	e008      	b.n	800ca3c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ca2a:	2214      	movs	r2, #20
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fda1 	bl	800d576 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	220f      	movs	r2, #15
 800ca38:	701a      	strb	r2, [r3, #0]
            break;
 800ca3a:	bf00      	nop
    }
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20001c60 	.word	0x20001c60

0800ca48 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	460a      	mov	r2, r1
 800ca52:	80fb      	strh	r3, [r7, #6]
 800ca54:	4613      	mov	r3, r2
 800ca56:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ca58:	1d7a      	adds	r2, r7, #5
 800ca5a:	88f9      	ldrh	r1, [r7, #6]
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	4803      	ldr	r0, [pc, #12]	; (800ca6c <SUBGRF_WriteRegister+0x24>)
 800ca60:	f7f8 facc 	bl	8004ffc <HAL_SUBGHZ_WriteRegisters>
}
 800ca64:	bf00      	nop
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20001da8 	.word	0x20001da8

0800ca70 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ca7a:	f107 020f 	add.w	r2, r7, #15
 800ca7e:	88f9      	ldrh	r1, [r7, #6]
 800ca80:	2301      	movs	r3, #1
 800ca82:	4804      	ldr	r0, [pc, #16]	; (800ca94 <SUBGRF_ReadRegister+0x24>)
 800ca84:	f7f8 fb19 	bl	80050ba <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20001da8 	.word	0x20001da8

0800ca98 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	80fb      	strh	r3, [r7, #6]
 800caa4:	4613      	mov	r3, r2
 800caa6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa8:	f3ef 8310 	mrs	r3, PRIMASK
 800caac:	60fb      	str	r3, [r7, #12]
  return(result);
 800caae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800cab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cab2:	b672      	cpsid	i
}
 800cab4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800cab6:	88bb      	ldrh	r3, [r7, #4]
 800cab8:	88f9      	ldrh	r1, [r7, #6]
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4806      	ldr	r0, [pc, #24]	; (800cad8 <SUBGRF_WriteRegisters+0x40>)
 800cabe:	f7f8 fa9d 	bl	8004ffc <HAL_SUBGHZ_WriteRegisters>
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f383 8810 	msr	PRIMASK, r3
}
 800cacc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cace:	bf00      	nop
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20001da8 	.word	0x20001da8

0800cadc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	6039      	str	r1, [r7, #0]
 800cae6:	80fb      	strh	r3, [r7, #6]
 800cae8:	4613      	mov	r3, r2
 800caea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caec:	f3ef 8310 	mrs	r3, PRIMASK
 800caf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800caf2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800caf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800caf6:	b672      	cpsid	i
}
 800caf8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800cafa:	88bb      	ldrh	r3, [r7, #4]
 800cafc:	88f9      	ldrh	r1, [r7, #6]
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	4806      	ldr	r0, [pc, #24]	; (800cb1c <SUBGRF_ReadRegisters+0x40>)
 800cb02:	f7f8 fada 	bl	80050ba <HAL_SUBGHZ_ReadRegisters>
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f383 8810 	msr	PRIMASK, r3
}
 800cb10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cb12:	bf00      	nop
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20001da8 	.word	0x20001da8

0800cb20 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb30:	f3ef 8310 	mrs	r3, PRIMASK
 800cb34:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800cb38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb3a:	b672      	cpsid	i
}
 800cb3c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800cb3e:	79bb      	ldrb	r3, [r7, #6]
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	79f9      	ldrb	r1, [r7, #7]
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	4806      	ldr	r0, [pc, #24]	; (800cb60 <SUBGRF_WriteBuffer+0x40>)
 800cb48:	f7f8 fbcb 	bl	80052e2 <HAL_SUBGHZ_WriteBuffer>
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f383 8810 	msr	PRIMASK, r3
}
 800cb56:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cb58:	bf00      	nop
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20001da8 	.word	0x20001da8

0800cb64 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	71fb      	strb	r3, [r7, #7]
 800cb70:	4613      	mov	r3, r2
 800cb72:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb74:	f3ef 8310 	mrs	r3, PRIMASK
 800cb78:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800cb7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb7e:	b672      	cpsid	i
}
 800cb80:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800cb82:	79bb      	ldrb	r3, [r7, #6]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	79f9      	ldrb	r1, [r7, #7]
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	4806      	ldr	r0, [pc, #24]	; (800cba4 <SUBGRF_ReadBuffer+0x40>)
 800cb8c:	f7f8 fbfc 	bl	8005388 <HAL_SUBGHZ_ReadBuffer>
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f383 8810 	msr	PRIMASK, r3
}
 800cb9a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cb9c:	bf00      	nop
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20001da8 	.word	0x20001da8

0800cba8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6039      	str	r1, [r7, #0]
 800cbb2:	71fb      	strb	r3, [r7, #7]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbb8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800cbc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbc2:	b672      	cpsid	i
}
 800cbc4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800cbc6:	88bb      	ldrh	r3, [r7, #4]
 800cbc8:	79f9      	ldrb	r1, [r7, #7]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	4806      	ldr	r0, [pc, #24]	; (800cbe8 <SUBGRF_WriteCommand+0x40>)
 800cbce:	f7f8 fad5 	bl	800517c <HAL_SUBGHZ_ExecSetCmd>
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f383 8810 	msr	PRIMASK, r3
}
 800cbdc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cbde:	bf00      	nop
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20001da8 	.word	0x20001da8

0800cbec <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbfc:	f3ef 8310 	mrs	r3, PRIMASK
 800cc00:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800cc04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc06:	b672      	cpsid	i
}
 800cc08:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800cc0a:	88bb      	ldrh	r3, [r7, #4]
 800cc0c:	79f9      	ldrb	r1, [r7, #7]
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4806      	ldr	r0, [pc, #24]	; (800cc2c <SUBGRF_ReadCommand+0x40>)
 800cc12:	f7f8 fb12 	bl	800523a <HAL_SUBGHZ_ExecGetCmd>
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f383 8810 	msr	PRIMASK, r3
}
 800cc20:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800cc22:	bf00      	nop
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20001da8 	.word	0x20001da8

0800cc30 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	460a      	mov	r2, r1
 800cc3a:	71fb      	strb	r3, [r7, #7]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800cc40:	2301      	movs	r3, #1
 800cc42:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800cc44:	79bb      	ldrb	r3, [r7, #6]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d10d      	bne.n	800cc66 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d104      	bne.n	800cc5a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800cc50:	2302      	movs	r3, #2
 800cc52:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800cc54:	2004      	movs	r0, #4
 800cc56:	f000 f8df 	bl	800ce18 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d107      	bne.n	800cc70 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800cc60:	2303      	movs	r3, #3
 800cc62:	73fb      	strb	r3, [r7, #15]
 800cc64:	e004      	b.n	800cc70 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800cc66:	79bb      	ldrb	r3, [r7, #6]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 fc51 	bl	800d51a <RBI_ConfigRFSwitch>
}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800cc8e:	f000 fc51 	bl	800d534 <RBI_GetTxConfig>
 800cc92:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d016      	beq.n	800ccc8 <SUBGRF_SetRfTxPower+0x48>
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	dc16      	bgt.n	800ccce <SUBGRF_SetRfTxPower+0x4e>
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <SUBGRF_SetRfTxPower+0x2e>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d00a      	beq.n	800ccc2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ccac:	e00f      	b.n	800ccce <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ccae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb2:	2b0f      	cmp	r3, #15
 800ccb4:	dd02      	ble.n	800ccbc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	73fb      	strb	r3, [r7, #15]
            break;
 800ccba:	e009      	b.n	800ccd0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]
            break;
 800ccc0:	e006      	b.n	800ccd0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	73fb      	strb	r3, [r7, #15]
            break;
 800ccc6:	e003      	b.n	800ccd0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	73fb      	strb	r3, [r7, #15]
            break;
 800cccc:	e000      	b.n	800ccd0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800ccce:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ccd0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fc3b 	bl	800c554 <SUBGRF_SetTxParams>

    return paSelect;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ccec:	2301      	movs	r3, #1
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bc80      	pop	{r7}
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800cd00:	4b03      	ldr	r3, [pc, #12]	; (800cd10 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2001      	movs	r0, #1
 800cd06:	4798      	blx	r3
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20001c68 	.word	0x20001c68

0800cd14 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800cd1c:	4b03      	ldr	r3, [pc, #12]	; (800cd2c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2002      	movs	r0, #2
 800cd22:	4798      	blx	r3
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20001c68 	.word	0x20001c68

0800cd30 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800cd38:	4b03      	ldr	r3, [pc, #12]	; (800cd48 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2040      	movs	r0, #64	; 0x40
 800cd3e:	4798      	blx	r3
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20001c68 	.word	0x20001c68

0800cd4c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d005      	beq.n	800cd6e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800cd62:	e00a      	b.n	800cd7a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800cd64:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2080      	movs	r0, #128	; 0x80
 800cd6a:	4798      	blx	r3
            break;
 800cd6c:	e005      	b.n	800cd7a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cd76:	4798      	blx	r3
            break;
 800cd78:	bf00      	nop
    }
}
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20001c68 	.word	0x20001c68

0800cd88 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800cd90:	4b04      	ldr	r3, [pc, #16]	; (800cda4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd98:	4798      	blx	r3
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20001c68 	.word	0x20001c68

0800cda8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800cdb0:	4b03      	ldr	r3, [pc, #12]	; (800cdc0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2020      	movs	r0, #32
 800cdb6:	4798      	blx	r3
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20001c68 	.word	0x20001c68

0800cdc4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800cdcc:	4b03      	ldr	r3, [pc, #12]	; (800cddc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2004      	movs	r0, #4
 800cdd2:	4798      	blx	r3
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	20001c68 	.word	0x20001c68

0800cde0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800cde8:	4b03      	ldr	r3, [pc, #12]	; (800cdf8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2008      	movs	r0, #8
 800cdee:	4798      	blx	r3
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	20001c68 	.word	0x20001c68

0800cdfc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ce04:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2010      	movs	r0, #16
 800ce0a:	4798      	blx	r3
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20001c68 	.word	0x20001c68

0800ce18 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ce22:	f000 fb9d 	bl	800d560 <RBI_IsDCDC>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d112      	bne.n	800ce52 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ce2c:	f640 1023 	movw	r0, #2339	; 0x923
 800ce30:	f7ff fe1e 	bl	800ca70 <SUBGRF_ReadRegister>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	f023 0306 	bic.w	r3, r3, #6
 800ce3e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ce40:	7bfa      	ldrb	r2, [r7, #15]
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f640 1023 	movw	r0, #2339	; 0x923
 800ce4e:	f7ff fdfb 	bl	800ca48 <SUBGRF_WriteRegister>
  }
}
 800ce52:	bf00      	nop
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ce6a:	231f      	movs	r3, #31
 800ce6c:	e016      	b.n	800ce9c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]
 800ce72:	e00f      	b.n	800ce94 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	4a0c      	ldr	r2, [pc, #48]	; (800cea8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ce78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d205      	bcs.n	800ce8e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	4a08      	ldr	r2, [pc, #32]	; (800cea8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	4413      	add	r3, r2
 800ce8a:	791b      	ldrb	r3, [r3, #4]
 800ce8c:	e006      	b.n	800ce9c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	3301      	adds	r3, #1
 800ce92:	73fb      	strb	r3, [r7, #15]
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b15      	cmp	r3, #21
 800ce98:	d9ec      	bls.n	800ce74 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800ce9a:	e7fe      	b.n	800ce9a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bc80      	pop	{r7}
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	0800de18 	.word	0x0800de18

0800ceac <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08a      	sub	sp, #40	; 0x28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ceb6:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <SUBGRF_GetCFO+0xe4>)
 800ceb8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800ceba:	f640 0007 	movw	r0, #2055	; 0x807
 800cebe:	f7ff fdd7 	bl	800ca70 <SUBGRF_ReadRegister>
 800cec2:	4603      	mov	r3, r0
 800cec4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800cec6:	7ffb      	ldrb	r3, [r7, #31]
 800cec8:	08db      	lsrs	r3, r3, #3
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	f003 0303 	and.w	r3, r3, #3
 800ced0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ced4:	4413      	add	r3, r2
 800ced6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ceda:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800cedc:	7ffb      	ldrb	r3, [r7, #31]
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800cee4:	7fba      	ldrb	r2, [r7, #30]
 800cee6:	7f7b      	ldrb	r3, [r7, #29]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	fa02 f303 	lsl.w	r3, r2, r3
 800ceee:	461a      	mov	r2, r3
 800cef0:	4b28      	ldr	r3, [pc, #160]	; (800cf94 <SUBGRF_GetCFO+0xe8>)
 800cef2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef6:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf00:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800cf08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	fb02 f303 	mul.w	r3, r2, r3
 800cf12:	2b07      	cmp	r3, #7
 800cf14:	d802      	bhi.n	800cf1c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 800cf16:	2302      	movs	r3, #2
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	fb02 f303 	mul.w	r3, r2, r3
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d802      	bhi.n	800cf30 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 800cf2a:	2304      	movs	r3, #4
 800cf2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800cf30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
 800cf3a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800cf3c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800cf40:	f7ff fd96 	bl	800ca70 <SUBGRF_ReadRegister>
 800cf44:	4603      	mov	r3, r0
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cf4c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800cf4e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800cf52:	f7ff fd8d 	bl	800ca70 <SUBGRF_ReadRegister>
 800cf56:	4603      	mov	r3, r0
 800cf58:	461a      	mov	r2, r3
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800cf60:	6a3b      	ldr	r3, [r7, #32]
 800cf62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
 800cf6c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800cf70:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800cf74:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	095b      	lsrs	r3, r3, #5
 800cf7a:	6a3a      	ldr	r2, [r7, #32]
 800cf7c:	fb02 f303 	mul.w	r3, r2, r3
 800cf80:	11da      	asrs	r2, r3, #7
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	601a      	str	r2, [r3, #0]
}
 800cf86:	bf00      	nop
 800cf88:	3728      	adds	r7, #40	; 0x28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	0c0a0804 	.word	0x0c0a0804
 800cf94:	01e84800 	.word	0x01e84800

0800cf98 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800cfaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfae:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800cfb0:	697b      	ldr	r3, [r7, #20]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bc80      	pop	{r7}
 800cfba:	4770      	bx	lr

0800cfbc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800cfce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfd2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800cfd4:	697b      	ldr	r3, [r7, #20]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bc80      	pop	{r7}
 800cfde:	4770      	bx	lr

0800cfe0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800cfec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bc80      	pop	{r7}
 800cff8:	4770      	bx	lr

0800cffa <RFW_DeInit>:

void RFW_DeInit( void)
{
 800cffa:	b480      	push	{r7}
 800cffc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800cffe:	bf00      	nop
 800d000:	46bd      	mov	sp, r7
 800d002:	bc80      	pop	{r7}
 800d004:	4770      	bx	lr

0800d006 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800d006:	b480      	push	{r7}
 800d008:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800d00a:	2300      	movs	r3, #0
#endif
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	46bd      	mov	sp, r7
 800d010:	bc80      	pop	{r7}
 800d012:	4770      	bx	lr

0800d014 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800d014:	b480      	push	{r7}
 800d016:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800d018:	2300      	movs	r3, #0
#endif
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bc80      	pop	{r7}
 800d020:	4770      	bx	lr

0800d022 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	4603      	mov	r3, r0
 800d02a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	bc80      	pop	{r7}
 800d034:	4770      	bx	lr

0800d036 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800d036:	b480      	push	{r7}
 800d038:	b087      	sub	sp, #28
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	460b      	mov	r3, r1
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800d044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d048:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800d04a:	697b      	ldr	r3, [r7, #20]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	371c      	adds	r7, #28
 800d050:	46bd      	mov	sp, r7
 800d052:	bc80      	pop	{r7}
 800d054:	4770      	bx	lr

0800d056 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800d056:	b480      	push	{r7}
 800d058:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800d05e:	4618      	mov	r0, r3
 800d060:	46bd      	mov	sp, r7
 800d062:	bc80      	pop	{r7}
 800d064:	4770      	bx	lr

0800d066 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800d066:	b480      	push	{r7}
 800d068:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800d06a:	bf00      	nop
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bc80      	pop	{r7}
 800d070:	4770      	bx	lr

0800d072 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800d072:	b480      	push	{r7}
 800d074:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800d076:	bf00      	nop
 800d078:	46bd      	mov	sp, r7
 800d07a:	bc80      	pop	{r7}
 800d07c:	4770      	bx	lr

0800d07e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800d07e:	b480      	push	{r7}
 800d080:	b083      	sub	sp, #12
 800d082:	af00      	add	r7, sp, #0
 800d084:	4603      	mov	r3, r0
 800d086:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bc80      	pop	{r7}
 800d090:	4770      	bx	lr
	...

0800d094 <MX_SubGHz_Phy_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void) {
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

	/* USER CODE END MX_SubGHz_Phy_Init_1 */
	SystemApp_Init();
 800d098:	f7f4 ff7e 	bl	8001f98 <SystemApp_Init>
	SubghzApp_Init();
 800d09c:	f000 f8b6 	bl	800d20c <SubghzApp_Init>
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

	PacketSendCallbackRegister(packetSendCallback);
 800d0a0:	4803      	ldr	r0, [pc, #12]	; (800d0b0 <MX_SubGHz_Phy_Init+0x1c>)
 800d0a2:	f000 f923 	bl	800d2ec <PacketSendCallbackRegister>
	PacketRecviceCallbackRegister(packetRecviceCallback);
 800d0a6:	4803      	ldr	r0, [pc, #12]	; (800d0b4 <MX_SubGHz_Phy_Init+0x20>)
 800d0a8:	f000 f92e 	bl	800d308 <PacketRecviceCallbackRegister>

	/* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800d0ac:	bf00      	nop
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	0800d0b9 	.word	0x0800d0b9
 800d0b4:	0800d0e5 	.word	0x0800d0e5

0800d0b8 <packetSendCallback>:

/* USER CODE BEGIN EF */

static void packetSendCallback(uint8_t state) {
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	71fb      	strb	r3, [r7, #7]

	radio_tx_state = state;
 800d0c2:	4a06      	ldr	r2, [pc, #24]	; (800d0dc <packetSendCallback+0x24>)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	7013      	strb	r3, [r2, #0]

	osSemaphoreRelease(radioBinarySemHandle);
 800d0c8:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <packetSendCallback+0x28>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7f9 fd77 	bl	8006bc0 <osSemaphoreRelease>

}
 800d0d2:	bf00      	nop
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	20001c6c 	.word	0x20001c6c
 800d0e0:	20001ee4 	.word	0x20001ee4

0800d0e4 <packetRecviceCallback>:

static void packetRecviceCallback(uint8_t state, int16_t rssi, int8_t snr,
		uint8_t *payload, uint8_t payload_size) {
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	603b      	str	r3, [r7, #0]
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	71fb      	strb	r3, [r7, #7]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	80bb      	strh	r3, [r7, #4]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	71bb      	strb	r3, [r7, #6]

	radio_rx_state = state;
 800d0f8:	4a0d      	ldr	r2, [pc, #52]	; (800d130 <packetRecviceCallback+0x4c>)
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	7013      	strb	r3, [r2, #0]

	rx_rssi = rssi;
 800d0fe:	4a0d      	ldr	r2, [pc, #52]	; (800d134 <packetRecviceCallback+0x50>)
 800d100:	88bb      	ldrh	r3, [r7, #4]
 800d102:	8013      	strh	r3, [r2, #0]
	rx_snr = snr;
 800d104:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <packetRecviceCallback+0x54>)
 800d106:	79bb      	ldrb	r3, [r7, #6]
 800d108:	7013      	strb	r3, [r2, #0]
	rx_payload_size = payload_size;
 800d10a:	4a0c      	ldr	r2, [pc, #48]	; (800d13c <packetRecviceCallback+0x58>)
 800d10c:	7c3b      	ldrb	r3, [r7, #16]
 800d10e:	7013      	strb	r3, [r2, #0]
	memcpy(rx_payload_buffer, payload, rx_payload_size);
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <packetRecviceCallback+0x58>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	461a      	mov	r2, r3
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <packetRecviceCallback+0x5c>)
 800d11a:	f000 fc6d 	bl	800d9f8 <memcpy>

	osSemaphoreRelease(radioBinarySemHandle);
 800d11e:	4b09      	ldr	r3, [pc, #36]	; (800d144 <packetRecviceCallback+0x60>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4618      	mov	r0, r3
 800d124:	f7f9 fd4c 	bl	8006bc0 <osSemaphoreRelease>

}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20001c6d 	.word	0x20001c6d
 800d134:	20001c6e 	.word	0x20001c6e
 800d138:	20001c70 	.word	0x20001c70
 800d13c:	20001c71 	.word	0x20001c71
 800d140:	20001c74 	.word	0x20001c74
 800d144:	20001ee4 	.word	0x20001ee4

0800d148 <MX_SubGhz_Phy_Radio_Sleep>:

void MX_SubGhz_Phy_Radio_Sleep() {
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0

	SubghzApp_Sleep();
 800d14c:	f000 f8ea 	bl	800d324 <SubghzApp_Sleep>

}
 800d150:	bf00      	nop
 800d152:	bd80      	pop	{r7, pc}

0800d154 <MX_SubGhz_Phy_SendPacket>:

void MX_SubGhz_Phy_SendPacket(uint8_t *payload, uint8_t payload_size) {
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]

	radio_tx_state = 0x00;
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <MX_SubGhz_Phy_SendPacket+0x24>)
 800d162:	2200      	movs	r2, #0
 800d164:	701a      	strb	r2, [r3, #0]
	SubghzApp_TX(payload, payload_size);
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f8e4 	bl	800d338 <SubghzApp_TX>

}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20001c6c 	.word	0x20001c6c

0800d17c <MX_SubGhz_Phy_Get_SendPacket_State>:

uint8_t MX_SubGhz_Phy_Get_SendPacket_State() {
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0

	return radio_tx_state;
 800d180:	4b02      	ldr	r3, [pc, #8]	; (800d18c <MX_SubGhz_Phy_Get_SendPacket_State+0x10>)
 800d182:	781b      	ldrb	r3, [r3, #0]

}
 800d184:	4618      	mov	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	bc80      	pop	{r7}
 800d18a:	4770      	bx	lr
 800d18c:	20001c6c 	.word	0x20001c6c

0800d190 <MX_SubGhz_Phy_RecvicePacket>:

void MX_SubGhz_Phy_RecvicePacket() {
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0

	radio_rx_state = 0x00;
 800d194:	4b03      	ldr	r3, [pc, #12]	; (800d1a4 <MX_SubGhz_Phy_RecvicePacket+0x14>)
 800d196:	2200      	movs	r2, #0
 800d198:	701a      	strb	r2, [r3, #0]
	SubghzApp_RX(0);
 800d19a:	2000      	movs	r0, #0
 800d19c:	f000 f8de 	bl	800d35c <SubghzApp_RX>

}
 800d1a0:	bf00      	nop
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	20001c6d 	.word	0x20001c6d

0800d1a8 <MX_SubGhz_Phy_Get_RecvicePacket_State>:

uint8_t MX_SubGhz_Phy_Get_RecvicePacket_State() {
 800d1a8:	b480      	push	{r7}
 800d1aa:	af00      	add	r7, sp, #0

	return radio_rx_state;
 800d1ac:	4b02      	ldr	r3, [pc, #8]	; (800d1b8 <MX_SubGhz_Phy_Get_RecvicePacket_State+0x10>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]

}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc80      	pop	{r7}
 800d1b6:	4770      	bx	lr
 800d1b8:	20001c6d 	.word	0x20001c6d

0800d1bc <MX_SubGhz_Phy_Get_RecvicePacket>:

void MX_SubGhz_Phy_Get_RecvicePacket(int16_t *rssi, int8_t *snr,
		uint8_t *payload, uint8_t *payload_size) {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]

	*rssi = rx_rssi;
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <MX_SubGhz_Phy_Get_RecvicePacket+0x40>)
 800d1cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	801a      	strh	r2, [r3, #0]
	*snr = rx_snr;
 800d1d4:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <MX_SubGhz_Phy_Get_RecvicePacket+0x44>)
 800d1d6:	f993 2000 	ldrsb.w	r2, [r3]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	701a      	strb	r2, [r3, #0]
	*payload_size = rx_payload_size;
 800d1de:	4b09      	ldr	r3, [pc, #36]	; (800d204 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	701a      	strb	r2, [r3, #0]
	memcpy(payload, rx_payload_buffer, rx_payload_size);
 800d1e6:	4b07      	ldr	r3, [pc, #28]	; (800d204 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	4906      	ldr	r1, [pc, #24]	; (800d208 <MX_SubGhz_Phy_Get_RecvicePacket+0x4c>)
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fc02 	bl	800d9f8 <memcpy>

}
 800d1f4:	bf00      	nop
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20001c6e 	.word	0x20001c6e
 800d200:	20001c70 	.word	0x20001c70
 800d204:	20001c71 	.word	0x20001c71
 800d208:	20001c74 	.word	0x20001c74

0800d20c <SubghzApp_Init>:

/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void) {
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b08b      	sub	sp, #44	; 0x2c
 800d210:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE BEGIN SubghzApp_Init_1 */
	/* USER CODE END SubghzApp_Init_1 */

	/* Radio initialization */
	RadioEvents.TxDone = OnTxDone;
 800d212:	4b2e      	ldr	r3, [pc, #184]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d214:	4a2e      	ldr	r2, [pc, #184]	; (800d2d0 <SubghzApp_Init+0xc4>)
 800d216:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800d218:	4b2c      	ldr	r3, [pc, #176]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d21a:	4a2e      	ldr	r2, [pc, #184]	; (800d2d4 <SubghzApp_Init+0xc8>)
 800d21c:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 800d21e:	4b2b      	ldr	r3, [pc, #172]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d220:	4a2d      	ldr	r2, [pc, #180]	; (800d2d8 <SubghzApp_Init+0xcc>)
 800d222:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 800d224:	4b29      	ldr	r3, [pc, #164]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d226:	4a2d      	ldr	r2, [pc, #180]	; (800d2dc <SubghzApp_Init+0xd0>)
 800d228:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 800d22a:	4b28      	ldr	r3, [pc, #160]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d22c:	4a2c      	ldr	r2, [pc, #176]	; (800d2e0 <SubghzApp_Init+0xd4>)
 800d22e:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 800d230:	4b2c      	ldr	r3, [pc, #176]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4825      	ldr	r0, [pc, #148]	; (800d2cc <SubghzApp_Init+0xc0>)
 800d236:	4798      	blx	r3

	/* USER CODE BEGIN SubghzApp_Init_2 */

	Radio.SetChannel(RF_FREQUENCY);
 800d238:	4b2a      	ldr	r3, [pc, #168]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	482a      	ldr	r0, [pc, #168]	; (800d2e8 <SubghzApp_Init+0xdc>)
 800d23e:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800d240:	4b28      	ldr	r3, [pc, #160]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d242:	69dc      	ldr	r4, [r3, #28]
 800d244:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d248:	9308      	str	r3, [sp, #32]
 800d24a:	2300      	movs	r3, #0
 800d24c:	9307      	str	r3, [sp, #28]
 800d24e:	2300      	movs	r3, #0
 800d250:	9306      	str	r3, [sp, #24]
 800d252:	2300      	movs	r3, #0
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	2301      	movs	r3, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	2300      	movs	r3, #0
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	2308      	movs	r3, #8
 800d260:	9302      	str	r3, [sp, #8]
 800d262:	2301      	movs	r3, #1
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	230a      	movs	r3, #10
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	2300      	movs	r3, #0
 800d26c:	2200      	movs	r2, #0
 800d26e:	210e      	movs	r1, #14
 800d270:	2001      	movs	r0, #1
 800d272:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE, LORA_PREAMBLE_LENGTH,
	LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800d274:	4b1b      	ldr	r3, [pc, #108]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d276:	699c      	ldr	r4, [r3, #24]
 800d278:	2301      	movs	r3, #1
 800d27a:	9309      	str	r3, [sp, #36]	; 0x24
 800d27c:	2300      	movs	r3, #0
 800d27e:	9308      	str	r3, [sp, #32]
 800d280:	2300      	movs	r3, #0
 800d282:	9307      	str	r3, [sp, #28]
 800d284:	2300      	movs	r3, #0
 800d286:	9306      	str	r3, [sp, #24]
 800d288:	2301      	movs	r3, #1
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	2300      	movs	r3, #0
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	2300      	movs	r3, #0
 800d292:	9303      	str	r3, [sp, #12]
 800d294:	2305      	movs	r3, #5
 800d296:	9302      	str	r3, [sp, #8]
 800d298:	2308      	movs	r3, #8
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	2300      	movs	r3, #0
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	220a      	movs	r2, #10
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	47a0      	blx	r4
	LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH, LORA_SYMBOL_TIMEOUT,
	LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0, LORA_IQ_INVERSION_ON,
	true);

	Radio.SetPublicNetwork(false);
 800d2aa:	4b0e      	ldr	r3, [pc, #56]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	4798      	blx	r3

	Radio.SetMaxPayloadLength(MODEM_LORA, TX_BUFFER_SIZE);
 800d2b2:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2b6:	2180      	movs	r1, #128	; 0x80
 800d2b8:	2001      	movs	r0, #1
 800d2ba:	4798      	blx	r3

	Radio.Sleep();
 800d2bc:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <SubghzApp_Init+0xd8>)
 800d2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c0:	4798      	blx	r3

	/* USER CODE END SubghzApp_Init_2 */
}
 800d2c2:	bf00      	nop
 800d2c4:	3704      	adds	r7, #4
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd90      	pop	{r4, r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20001cf4 	.word	0x20001cf4
 800d2d0:	0800d3a9 	.word	0x0800d3a9
 800d2d4:	0800d3c5 	.word	0x0800d3c5
 800d2d8:	0800d459 	.word	0x0800d459
 800d2dc:	0800d475 	.word	0x0800d475
 800d2e0:	0800d4bd 	.word	0x0800d4bd
 800d2e4:	0800dd90 	.word	0x0800dd90
 800d2e8:	3703dcc0 	.word	0x3703dcc0

0800d2ec <PacketSendCallbackRegister>:

/* USER CODE BEGIN EF */

void PacketSendCallbackRegister(PacketSendCallback callback) {
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]

	packetSendCallback = callback;
 800d2f4:	4a03      	ldr	r2, [pc, #12]	; (800d304 <PacketSendCallbackRegister+0x18>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6013      	str	r3, [r2, #0]

}
 800d2fa:	bf00      	nop
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bc80      	pop	{r7}
 800d302:	4770      	bx	lr
 800d304:	20001d10 	.word	0x20001d10

0800d308 <PacketRecviceCallbackRegister>:

void PacketRecviceCallbackRegister(PacketRecviceCallback callback) {
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]

	packetRecviceCallback = callback;
 800d310:	4a03      	ldr	r2, [pc, #12]	; (800d320 <PacketRecviceCallbackRegister+0x18>)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6013      	str	r3, [r2, #0]

}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bc80      	pop	{r7}
 800d31e:	4770      	bx	lr
 800d320:	20001d14 	.word	0x20001d14

0800d324 <SubghzApp_Sleep>:

void SubghzApp_Sleep() {
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0

	Radio.Sleep();
 800d328:	4b02      	ldr	r3, [pc, #8]	; (800d334 <SubghzApp_Sleep+0x10>)
 800d32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32c:	4798      	blx	r3

}
 800d32e:	bf00      	nop
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	0800dd90 	.word	0x0800dd90

0800d338 <SubghzApp_TX>:

void SubghzApp_TX(uint8_t *payload, uint8_t payload_size) {
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	70fb      	strb	r3, [r7, #3]

	Radio.Send(payload, payload_size);
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <SubghzApp_TX+0x20>)
 800d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	4611      	mov	r1, r2
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3

}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	0800dd90 	.word	0x0800dd90

0800d35c <SubghzApp_RX>:

void SubghzApp_RX(uint16_t timeout) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	80fb      	strh	r3, [r7, #6]

	rx_rssi = 0;
 800d366:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <SubghzApp_RX+0x38>)
 800d368:	2200      	movs	r2, #0
 800d36a:	801a      	strh	r2, [r3, #0]
	rx_snr = 0;
 800d36c:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <SubghzApp_RX+0x3c>)
 800d36e:	2200      	movs	r2, #0
 800d370:	701a      	strb	r2, [r3, #0]
	radio_rx_buffer_size = 0;
 800d372:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <SubghzApp_RX+0x40>)
 800d374:	2200      	movs	r2, #0
 800d376:	701a      	strb	r2, [r3, #0]
	memset(radio_rx_buffer, 0x00, sizeof(radio_rx_buffer));
 800d378:	2280      	movs	r2, #128	; 0x80
 800d37a:	2100      	movs	r1, #0
 800d37c:	4808      	ldr	r0, [pc, #32]	; (800d3a0 <SubghzApp_RX+0x44>)
 800d37e:	f000 fb49 	bl	800da14 <memset>

	Radio.Rx(timeout);
 800d382:	4b08      	ldr	r3, [pc, #32]	; (800d3a4 <SubghzApp_RX+0x48>)
 800d384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d386:	88fa      	ldrh	r2, [r7, #6]
 800d388:	4610      	mov	r0, r2
 800d38a:	4798      	blx	r3

}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20001d18 	.word	0x20001d18
 800d398:	20001d1a 	.word	0x20001d1a
 800d39c:	20001d1b 	.word	0x20001d1b
 800d3a0:	20001d1c 	.word	0x20001d1c
 800d3a4:	0800dd90 	.word	0x0800dd90

0800d3a8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxDone */

	if (packetSendCallback) {
 800d3ac:	4b04      	ldr	r3, [pc, #16]	; (800d3c0 <OnTxDone+0x18>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d003      	beq.n	800d3bc <OnTxDone+0x14>

		packetSendCallback(0x01);
 800d3b4:	4b02      	ldr	r3, [pc, #8]	; (800d3c0 <OnTxDone+0x18>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	4798      	blx	r3

	}

	/* USER CODE END OnTxDone */
}
 800d3bc:	bf00      	nop
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20001d10 	.word	0x20001d10

0800d3c4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi,
		int8_t LoraSnr_FskCfo) {
 800d3c4:	b590      	push	{r4, r7, lr}
 800d3c6:	b089      	sub	sp, #36	; 0x24
 800d3c8:	af02      	add	r7, sp, #8
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	817b      	strh	r3, [r7, #10]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	813b      	strh	r3, [r7, #8]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnRxDone */

	uint8_t rx_state = 0x00;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	75fb      	strb	r3, [r7, #23]

	rx_rssi = rssi;
 800d3e2:	4a18      	ldr	r2, [pc, #96]	; (800d444 <OnRxDone+0x80>)
 800d3e4:	893b      	ldrh	r3, [r7, #8]
 800d3e6:	8013      	strh	r3, [r2, #0]

	rx_snr = LoraSnr_FskCfo;
 800d3e8:	4a17      	ldr	r2, [pc, #92]	; (800d448 <OnRxDone+0x84>)
 800d3ea:	79fb      	ldrb	r3, [r7, #7]
 800d3ec:	7013      	strb	r3, [r2, #0]

	radio_rx_buffer_size = size;
 800d3ee:	897b      	ldrh	r3, [r7, #10]
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	4b16      	ldr	r3, [pc, #88]	; (800d44c <OnRxDone+0x88>)
 800d3f4:	701a      	strb	r2, [r3, #0]

	if (radio_rx_buffer_size <= sizeof(radio_rx_buffer)) {
 800d3f6:	4b15      	ldr	r3, [pc, #84]	; (800d44c <OnRxDone+0x88>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b80      	cmp	r3, #128	; 0x80
 800d3fc:	d809      	bhi.n	800d412 <OnRxDone+0x4e>

		memcpy(radio_rx_buffer, payload, radio_rx_buffer_size);
 800d3fe:	4b13      	ldr	r3, [pc, #76]	; (800d44c <OnRxDone+0x88>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	68f9      	ldr	r1, [r7, #12]
 800d406:	4812      	ldr	r0, [pc, #72]	; (800d450 <OnRxDone+0x8c>)
 800d408:	f000 faf6 	bl	800d9f8 <memcpy>
		rx_state = 0x01;
 800d40c:	2301      	movs	r3, #1
 800d40e:	75fb      	strb	r3, [r7, #23]
 800d410:	e001      	b.n	800d416 <OnRxDone+0x52>

	} else {

		rx_state = 0x04;
 800d412:	2304      	movs	r3, #4
 800d414:	75fb      	strb	r3, [r7, #23]

	}

	if (packetRecviceCallback) {
 800d416:	4b0f      	ldr	r3, [pc, #60]	; (800d454 <OnRxDone+0x90>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00d      	beq.n	800d43a <OnRxDone+0x76>

		packetRecviceCallback(rx_state, rx_rssi, rx_snr, radio_rx_buffer,
 800d41e:	4b0d      	ldr	r3, [pc, #52]	; (800d454 <OnRxDone+0x90>)
 800d420:	681c      	ldr	r4, [r3, #0]
 800d422:	4b08      	ldr	r3, [pc, #32]	; (800d444 <OnRxDone+0x80>)
 800d424:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d428:	4b07      	ldr	r3, [pc, #28]	; (800d448 <OnRxDone+0x84>)
 800d42a:	f993 2000 	ldrsb.w	r2, [r3]
 800d42e:	4b07      	ldr	r3, [pc, #28]	; (800d44c <OnRxDone+0x88>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	7df8      	ldrb	r0, [r7, #23]
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	4b06      	ldr	r3, [pc, #24]	; (800d450 <OnRxDone+0x8c>)
 800d438:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

	/* USER CODE END OnRxDone */
}
 800d43a:	bf00      	nop
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd90      	pop	{r4, r7, pc}
 800d442:	bf00      	nop
 800d444:	20001d18 	.word	0x20001d18
 800d448:	20001d1a 	.word	0x20001d1a
 800d44c:	20001d1b 	.word	0x20001d1b
 800d450:	20001d1c 	.word	0x20001d1c
 800d454:	20001d14 	.word	0x20001d14

0800d458 <OnTxTimeout>:

static void OnTxTimeout(void) {
 800d458:	b580      	push	{r7, lr}
 800d45a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxTimeout */

	if (packetSendCallback) {
 800d45c:	4b04      	ldr	r3, [pc, #16]	; (800d470 <OnTxTimeout+0x18>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <OnTxTimeout+0x14>

		packetSendCallback(0x02);
 800d464:	4b02      	ldr	r3, [pc, #8]	; (800d470 <OnTxTimeout+0x18>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2002      	movs	r0, #2
 800d46a:	4798      	blx	r3

	}

	/* USER CODE END OnTxTimeout */
}
 800d46c:	bf00      	nop
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20001d10 	.word	0x20001d10

0800d474 <OnRxTimeout>:

static void OnRxTimeout(void) {
 800d474:	b590      	push	{r4, r7, lr}
 800d476:	b083      	sub	sp, #12
 800d478:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN OnRxTimeout */

	if (packetRecviceCallback) {
 800d47a:	4b0b      	ldr	r3, [pc, #44]	; (800d4a8 <OnRxTimeout+0x34>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00d      	beq.n	800d49e <OnRxTimeout+0x2a>

		packetRecviceCallback(0x02, rx_rssi, rx_snr, radio_rx_buffer,
 800d482:	4b09      	ldr	r3, [pc, #36]	; (800d4a8 <OnRxTimeout+0x34>)
 800d484:	681c      	ldr	r4, [r3, #0]
 800d486:	4b09      	ldr	r3, [pc, #36]	; (800d4ac <OnRxTimeout+0x38>)
 800d488:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d48c:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <OnRxTimeout+0x3c>)
 800d48e:	f993 2000 	ldrsb.w	r2, [r3]
 800d492:	4b08      	ldr	r3, [pc, #32]	; (800d4b4 <OnRxTimeout+0x40>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	4b07      	ldr	r3, [pc, #28]	; (800d4b8 <OnRxTimeout+0x44>)
 800d49a:	2002      	movs	r0, #2
 800d49c:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

	/* USER CODE END OnRxTimeout */
}
 800d49e:	bf00      	nop
 800d4a0:	3704      	adds	r7, #4
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd90      	pop	{r4, r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20001d14 	.word	0x20001d14
 800d4ac:	20001d18 	.word	0x20001d18
 800d4b0:	20001d1a 	.word	0x20001d1a
 800d4b4:	20001d1b 	.word	0x20001d1b
 800d4b8:	20001d1c 	.word	0x20001d1c

0800d4bc <OnRxError>:

static void OnRxError(void) {
 800d4bc:	b590      	push	{r4, r7, lr}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN OnRxError */

	if (packetRecviceCallback) {
 800d4c2:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <OnRxError+0x34>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00d      	beq.n	800d4e6 <OnRxError+0x2a>

		packetRecviceCallback(0x03, rx_rssi, rx_snr, radio_rx_buffer,
 800d4ca:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <OnRxError+0x34>)
 800d4cc:	681c      	ldr	r4, [r3, #0]
 800d4ce:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <OnRxError+0x38>)
 800d4d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d4d4:	4b08      	ldr	r3, [pc, #32]	; (800d4f8 <OnRxError+0x3c>)
 800d4d6:	f993 2000 	ldrsb.w	r2, [r3]
 800d4da:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <OnRxError+0x40>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4b07      	ldr	r3, [pc, #28]	; (800d500 <OnRxError+0x44>)
 800d4e2:	2003      	movs	r0, #3
 800d4e4:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

	/* USER CODE END OnRxError */
}
 800d4e6:	bf00      	nop
 800d4e8:	3704      	adds	r7, #4
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd90      	pop	{r4, r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20001d14 	.word	0x20001d14
 800d4f4:	20001d18 	.word	0x20001d18
 800d4f8:	20001d1a 	.word	0x20001d1a
 800d4fc:	20001d1b 	.word	0x20001d1b
 800d500:	20001d1c 	.word	0x20001d1c

0800d504 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800d50e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	bc80      	pop	{r7}
 800d518:	4770      	bx	lr

0800d51a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b085      	sub	sp, #20
 800d51e:	af00      	add	r7, sp, #0
 800d520:	4603      	mov	r3, r0
 800d522:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800d524:	2300      	movs	r3, #0
 800d526:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800d528:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	bc80      	pop	{r7}
 800d532:	4770      	bx	lr

0800d534 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800d53a:	2302      	movs	r3, #2
 800d53c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800d53e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	bc80      	pop	{r7}
 800d548:	4770      	bx	lr

0800d54a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b083      	sub	sp, #12
 800d54e:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800d550:	2300      	movs	r3, #0
 800d552:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800d554:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800d556:	4618      	mov	r0, r3
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bc80      	pop	{r7}
 800d55e:	4770      	bx	lr

0800d560 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800d566:	2301      	movs	r3, #1
 800d568:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800d56a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	bc80      	pop	{r7}
 800d574:	4770      	bx	lr

0800d576 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800d576:	b480      	push	{r7}
 800d578:	b085      	sub	sp, #20
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	460b      	mov	r3, r1
 800d580:	70fb      	strb	r3, [r7, #3]
 800d582:	4613      	mov	r3, r2
 800d584:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800d58a:	e004      	b.n	800d596 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	60fa      	str	r2, [r7, #12]
 800d592:	78fa      	ldrb	r2, [r7, #3]
 800d594:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800d596:	883b      	ldrh	r3, [r7, #0]
 800d598:	1e5a      	subs	r2, r3, #1
 800d59a:	803a      	strh	r2, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1f5      	bne.n	800d58c <UTIL_MEM_set_8+0x16>
  }
}
 800d5a0:	bf00      	nop
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bc80      	pop	{r7}
 800d5aa:	4770      	bx	lr

0800d5ac <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d023      	beq.n	800d60a <UTIL_TIMER_Create+0x5e>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d020      	beq.n	800d60a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d5ce:	4b11      	ldr	r3, [pc, #68]	; (800d614 <UTIL_TIMER_Create+0x68>)
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d2:	68b8      	ldr	r0, [r7, #8]
 800d5d4:	4798      	blx	r3
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	683a      	ldr	r2, [r7, #0]
 800d5f2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	79fa      	ldrb	r2, [r7, #7]
 800d5fe:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	e000      	b.n	800d60c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800d60a:	2301      	movs	r3, #1
  }
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	0800dd3c 	.word	0x0800dd3c

0800d618 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08a      	sub	sp, #40	; 0x28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d056      	beq.n	800d6da <UTIL_TIMER_Start+0xc2>
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 f929 	bl	800d884 <TimerExists>
 800d632:	4603      	mov	r3, r0
 800d634:	f083 0301 	eor.w	r3, r3, #1
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d04d      	beq.n	800d6da <UTIL_TIMER_Start+0xc2>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	7a5b      	ldrb	r3, [r3, #9]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d149      	bne.n	800d6da <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d646:	f3ef 8310 	mrs	r3, PRIMASK
 800d64a:	613b      	str	r3, [r7, #16]
  return(result);
 800d64c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d64e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d650:	b672      	cpsid	i
}
 800d652:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d65a:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <UTIL_TIMER_Start+0xd4>)
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	4798      	blx	r3
 800d660:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800d662:	6a3a      	ldr	r2, [r7, #32]
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	429a      	cmp	r2, r3
 800d668:	d201      	bcs.n	800d66e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a3a      	ldr	r2, [r7, #32]
 800d672:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800d686:	4b1a      	ldr	r3, [pc, #104]	; (800d6f0 <UTIL_TIMER_Start+0xd8>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d106      	bne.n	800d69c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800d68e:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <UTIL_TIMER_Start+0xd4>)
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f96b 	bl	800d970 <TimerInsertNewHeadTimer>
 800d69a:	e017      	b.n	800d6cc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d69c:	4b13      	ldr	r3, [pc, #76]	; (800d6ec <UTIL_TIMER_Start+0xd4>)
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	4798      	blx	r3
 800d6a2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	441a      	add	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	4b0e      	ldr	r3, [pc, #56]	; (800d6f0 <UTIL_TIMER_Start+0xd8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d203      	bcs.n	800d6c6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f956 	bl	800d970 <TimerInsertNewHeadTimer>
 800d6c4:	e002      	b.n	800d6cc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f922 	bl	800d910 <TimerInsertTimer>
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f383 8810 	msr	PRIMASK, r3
}
 800d6d6:	bf00      	nop
  {
 800d6d8:	e002      	b.n	800d6e0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800d6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3728      	adds	r7, #40	; 0x28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	0800dd3c 	.word	0x0800dd3c
 800d6f0:	20001d9c 	.word	0x20001d9c

0800d6f4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d05b      	beq.n	800d7be <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d706:	f3ef 8310 	mrs	r3, PRIMASK
 800d70a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d70c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d70e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d710:	b672      	cpsid	i
}
 800d712:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d714:	4b2d      	ldr	r3, [pc, #180]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d71a:	4b2c      	ldr	r3, [pc, #176]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800d726:	4b29      	ldr	r3, [pc, #164]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d041      	beq.n	800d7b2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d734:	4b25      	ldr	r3, [pc, #148]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d134      	bne.n	800d7a8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800d73e:	4b23      	ldr	r3, [pc, #140]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2200      	movs	r2, #0
 800d744:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800d746:	4b21      	ldr	r3, [pc, #132]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00a      	beq.n	800d766 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800d750:	4b1e      	ldr	r3, [pc, #120]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	4a1d      	ldr	r2, [pc, #116]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d758:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800d75a:	4b1c      	ldr	r3, [pc, #112]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 f8ac 	bl	800d8bc <TimerSetTimeout>
 800d764:	e023      	b.n	800d7ae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800d766:	4b1a      	ldr	r3, [pc, #104]	; (800d7d0 <UTIL_TIMER_Stop+0xdc>)
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	4798      	blx	r3
            TimerListHead = NULL;
 800d76c:	4b17      	ldr	r3, [pc, #92]	; (800d7cc <UTIL_TIMER_Stop+0xd8>)
 800d76e:	2200      	movs	r2, #0
 800d770:	601a      	str	r2, [r3, #0]
 800d772:	e01c      	b.n	800d7ae <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d110      	bne.n	800d79e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d006      	beq.n	800d792 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	695b      	ldr	r3, [r3, #20]
 800d788:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800d790:	e00d      	b.n	800d7ae <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	615a      	str	r2, [r3, #20]
            break;
 800d79c:	e007      	b.n	800d7ae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d1e2      	bne.n	800d774 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f383 8810 	msr	PRIMASK, r3
}
 800d7bc:	e001      	b.n	800d7c2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800d7c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3720      	adds	r7, #32
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20001d9c 	.word	0x20001d9c
 800d7d0:	0800dd3c 	.word	0x0800dd3c

0800d7d4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	73fb      	strb	r3, [r7, #15]
 800d7ec:	e014      	b.n	800d818 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d7ee:	4b0d      	ldr	r3, [pc, #52]	; (800d824 <UTIL_TIMER_SetPeriod+0x50>)
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	6838      	ldr	r0, [r7, #0]
 800d7f4:	4798      	blx	r3
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f841 	bl	800d884 <TimerExists>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7ff ff73 	bl	800d6f4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff ff02 	bl	800d618 <UTIL_TIMER_Start>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800d818:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	0800dd3c 	.word	0x0800dd3c

0800d828 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d82e:	4b06      	ldr	r3, [pc, #24]	; (800d848 <UTIL_TIMER_GetCurrentTime+0x20>)
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	4798      	blx	r3
 800d834:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800d836:	4b04      	ldr	r3, [pc, #16]	; (800d848 <UTIL_TIMER_GetCurrentTime+0x20>)
 800d838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	4798      	blx	r3
 800d83e:	4603      	mov	r3, r0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	0800dd3c 	.word	0x0800dd3c

0800d84c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d854:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	4798      	blx	r3
 800d85a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d85c:	4b08      	ldr	r3, [pc, #32]	; (800d880 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	4798      	blx	r3
 800d864:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d866:	4b06      	ldr	r3, [pc, #24]	; (800d880 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	1a8a      	subs	r2, r1, r2
 800d870:	4610      	mov	r0, r2
 800d872:	4798      	blx	r3
 800d874:	4603      	mov	r3, r0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	0800dd3c 	.word	0x0800dd3c

0800d884 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d88c:	4b0a      	ldr	r3, [pc, #40]	; (800d8b8 <TimerExists+0x34>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800d892:	e008      	b.n	800d8a6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d101      	bne.n	800d8a0 <TimerExists+0x1c>
    {
      return true;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e006      	b.n	800d8ae <TimerExists+0x2a>
    }
    cur = cur->Next;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1f3      	bne.n	800d894 <TimerExists+0x10>
  }
  return false;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bc80      	pop	{r7}
 800d8b6:	4770      	bx	lr
 800d8b8:	20001d9c 	.word	0x20001d9c

0800d8bc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d8bc:	b590      	push	{r4, r7, lr}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d8c4:	4b11      	ldr	r3, [pc, #68]	; (800d90c <TimerSetTimeout+0x50>)
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	4798      	blx	r3
 800d8ca:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681c      	ldr	r4, [r3, #0]
 800d8d6:	4b0d      	ldr	r3, [pc, #52]	; (800d90c <TimerSetTimeout+0x50>)
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	4798      	blx	r3
 800d8dc:	4602      	mov	r2, r0
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	429c      	cmp	r4, r3
 800d8e4:	d207      	bcs.n	800d8f6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <TimerSetTimeout+0x50>)
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	4798      	blx	r3
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d8f6:	4b05      	ldr	r3, [pc, #20]	; (800d90c <TimerSetTimeout+0x50>)
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	6812      	ldr	r2, [r2, #0]
 800d8fe:	4610      	mov	r0, r2
 800d900:	4798      	blx	r3
}
 800d902:	bf00      	nop
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	bd90      	pop	{r4, r7, pc}
 800d90a:	bf00      	nop
 800d90c:	0800dd3c 	.word	0x0800dd3c

0800d910 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d918:	4b14      	ldr	r3, [pc, #80]	; (800d96c <TimerInsertTimer+0x5c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d91e:	4b13      	ldr	r3, [pc, #76]	; (800d96c <TimerInsertTimer+0x5c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800d926:	e012      	b.n	800d94e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	429a      	cmp	r2, r3
 800d932:	d905      	bls.n	800d940 <TimerInsertTimer+0x30>
    {
        cur = next;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	60bb      	str	r3, [r7, #8]
 800d93e:	e006      	b.n	800d94e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	615a      	str	r2, [r3, #20]
        return;
 800d94c:	e009      	b.n	800d962 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1e8      	bne.n	800d928 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	615a      	str	r2, [r3, #20]
}
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	bc80      	pop	{r7}
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	20001d9c 	.word	0x20001d9c

0800d970 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d978:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <TimerInsertNewHeadTimer+0x38>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800d990:	4a05      	ldr	r2, [pc, #20]	; (800d9a8 <TimerInsertNewHeadTimer+0x38>)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d996:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <TimerInsertNewHeadTimer+0x38>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff ff8e 	bl	800d8bc <TimerSetTimeout>
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20001d9c 	.word	0x20001d9c

0800d9ac <__libc_init_array>:
 800d9ac:	b570      	push	{r4, r5, r6, lr}
 800d9ae:	4d0d      	ldr	r5, [pc, #52]	; (800d9e4 <__libc_init_array+0x38>)
 800d9b0:	4c0d      	ldr	r4, [pc, #52]	; (800d9e8 <__libc_init_array+0x3c>)
 800d9b2:	1b64      	subs	r4, r4, r5
 800d9b4:	10a4      	asrs	r4, r4, #2
 800d9b6:	2600      	movs	r6, #0
 800d9b8:	42a6      	cmp	r6, r4
 800d9ba:	d109      	bne.n	800d9d0 <__libc_init_array+0x24>
 800d9bc:	4d0b      	ldr	r5, [pc, #44]	; (800d9ec <__libc_init_array+0x40>)
 800d9be:	4c0c      	ldr	r4, [pc, #48]	; (800d9f0 <__libc_init_array+0x44>)
 800d9c0:	f000 f8f4 	bl	800dbac <_init>
 800d9c4:	1b64      	subs	r4, r4, r5
 800d9c6:	10a4      	asrs	r4, r4, #2
 800d9c8:	2600      	movs	r6, #0
 800d9ca:	42a6      	cmp	r6, r4
 800d9cc:	d105      	bne.n	800d9da <__libc_init_array+0x2e>
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d4:	4798      	blx	r3
 800d9d6:	3601      	adds	r6, #1
 800d9d8:	e7ee      	b.n	800d9b8 <__libc_init_array+0xc>
 800d9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9de:	4798      	blx	r3
 800d9e0:	3601      	adds	r6, #1
 800d9e2:	e7f2      	b.n	800d9ca <__libc_init_array+0x1e>
 800d9e4:	0800df30 	.word	0x0800df30
 800d9e8:	0800df30 	.word	0x0800df30
 800d9ec:	0800df30 	.word	0x0800df30
 800d9f0:	0800df34 	.word	0x0800df34

0800d9f4 <__retarget_lock_acquire_recursive>:
 800d9f4:	4770      	bx	lr

0800d9f6 <__retarget_lock_release_recursive>:
 800d9f6:	4770      	bx	lr

0800d9f8 <memcpy>:
 800d9f8:	440a      	add	r2, r1
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800da00:	d100      	bne.n	800da04 <memcpy+0xc>
 800da02:	4770      	bx	lr
 800da04:	b510      	push	{r4, lr}
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da0e:	4291      	cmp	r1, r2
 800da10:	d1f9      	bne.n	800da06 <memcpy+0xe>
 800da12:	bd10      	pop	{r4, pc}

0800da14 <memset>:
 800da14:	4402      	add	r2, r0
 800da16:	4603      	mov	r3, r0
 800da18:	4293      	cmp	r3, r2
 800da1a:	d100      	bne.n	800da1e <memset+0xa>
 800da1c:	4770      	bx	lr
 800da1e:	f803 1b01 	strb.w	r1, [r3], #1
 800da22:	e7f9      	b.n	800da18 <memset+0x4>

0800da24 <cleanup_glue>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	460c      	mov	r4, r1
 800da28:	6809      	ldr	r1, [r1, #0]
 800da2a:	4605      	mov	r5, r0
 800da2c:	b109      	cbz	r1, 800da32 <cleanup_glue+0xe>
 800da2e:	f7ff fff9 	bl	800da24 <cleanup_glue>
 800da32:	4621      	mov	r1, r4
 800da34:	4628      	mov	r0, r5
 800da36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3a:	f000 b869 	b.w	800db10 <_free_r>
	...

0800da40 <_reclaim_reent>:
 800da40:	4b2c      	ldr	r3, [pc, #176]	; (800daf4 <_reclaim_reent+0xb4>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4283      	cmp	r3, r0
 800da46:	b570      	push	{r4, r5, r6, lr}
 800da48:	4604      	mov	r4, r0
 800da4a:	d051      	beq.n	800daf0 <_reclaim_reent+0xb0>
 800da4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800da4e:	b143      	cbz	r3, 800da62 <_reclaim_reent+0x22>
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d14a      	bne.n	800daec <_reclaim_reent+0xac>
 800da56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da58:	6819      	ldr	r1, [r3, #0]
 800da5a:	b111      	cbz	r1, 800da62 <_reclaim_reent+0x22>
 800da5c:	4620      	mov	r0, r4
 800da5e:	f000 f857 	bl	800db10 <_free_r>
 800da62:	6961      	ldr	r1, [r4, #20]
 800da64:	b111      	cbz	r1, 800da6c <_reclaim_reent+0x2c>
 800da66:	4620      	mov	r0, r4
 800da68:	f000 f852 	bl	800db10 <_free_r>
 800da6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da6e:	b111      	cbz	r1, 800da76 <_reclaim_reent+0x36>
 800da70:	4620      	mov	r0, r4
 800da72:	f000 f84d 	bl	800db10 <_free_r>
 800da76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da78:	b111      	cbz	r1, 800da80 <_reclaim_reent+0x40>
 800da7a:	4620      	mov	r0, r4
 800da7c:	f000 f848 	bl	800db10 <_free_r>
 800da80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800da82:	b111      	cbz	r1, 800da8a <_reclaim_reent+0x4a>
 800da84:	4620      	mov	r0, r4
 800da86:	f000 f843 	bl	800db10 <_free_r>
 800da8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800da8c:	b111      	cbz	r1, 800da94 <_reclaim_reent+0x54>
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 f83e 	bl	800db10 <_free_r>
 800da94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800da96:	b111      	cbz	r1, 800da9e <_reclaim_reent+0x5e>
 800da98:	4620      	mov	r0, r4
 800da9a:	f000 f839 	bl	800db10 <_free_r>
 800da9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800daa0:	b111      	cbz	r1, 800daa8 <_reclaim_reent+0x68>
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 f834 	bl	800db10 <_free_r>
 800daa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daaa:	b111      	cbz	r1, 800dab2 <_reclaim_reent+0x72>
 800daac:	4620      	mov	r0, r4
 800daae:	f000 f82f 	bl	800db10 <_free_r>
 800dab2:	69a3      	ldr	r3, [r4, #24]
 800dab4:	b1e3      	cbz	r3, 800daf0 <_reclaim_reent+0xb0>
 800dab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dab8:	4620      	mov	r0, r4
 800daba:	4798      	blx	r3
 800dabc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dabe:	b1b9      	cbz	r1, 800daf0 <_reclaim_reent+0xb0>
 800dac0:	4620      	mov	r0, r4
 800dac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dac6:	f7ff bfad 	b.w	800da24 <cleanup_glue>
 800daca:	5949      	ldr	r1, [r1, r5]
 800dacc:	b941      	cbnz	r1, 800dae0 <_reclaim_reent+0xa0>
 800dace:	3504      	adds	r5, #4
 800dad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad2:	2d80      	cmp	r5, #128	; 0x80
 800dad4:	68d9      	ldr	r1, [r3, #12]
 800dad6:	d1f8      	bne.n	800daca <_reclaim_reent+0x8a>
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 f819 	bl	800db10 <_free_r>
 800dade:	e7ba      	b.n	800da56 <_reclaim_reent+0x16>
 800dae0:	680e      	ldr	r6, [r1, #0]
 800dae2:	4620      	mov	r0, r4
 800dae4:	f000 f814 	bl	800db10 <_free_r>
 800dae8:	4631      	mov	r1, r6
 800daea:	e7ef      	b.n	800dacc <_reclaim_reent+0x8c>
 800daec:	2500      	movs	r5, #0
 800daee:	e7ef      	b.n	800dad0 <_reclaim_reent+0x90>
 800daf0:	bd70      	pop	{r4, r5, r6, pc}
 800daf2:	bf00      	nop
 800daf4:	20000018 	.word	0x20000018

0800daf8 <__malloc_lock>:
 800daf8:	4801      	ldr	r0, [pc, #4]	; (800db00 <__malloc_lock+0x8>)
 800dafa:	f7ff bf7b 	b.w	800d9f4 <__retarget_lock_acquire_recursive>
 800dafe:	bf00      	nop
 800db00:	200025e0 	.word	0x200025e0

0800db04 <__malloc_unlock>:
 800db04:	4801      	ldr	r0, [pc, #4]	; (800db0c <__malloc_unlock+0x8>)
 800db06:	f7ff bf76 	b.w	800d9f6 <__retarget_lock_release_recursive>
 800db0a:	bf00      	nop
 800db0c:	200025e0 	.word	0x200025e0

0800db10 <_free_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4605      	mov	r5, r0
 800db14:	2900      	cmp	r1, #0
 800db16:	d045      	beq.n	800dba4 <_free_r+0x94>
 800db18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db1c:	1f0c      	subs	r4, r1, #4
 800db1e:	2b00      	cmp	r3, #0
 800db20:	bfb8      	it	lt
 800db22:	18e4      	addlt	r4, r4, r3
 800db24:	f7ff ffe8 	bl	800daf8 <__malloc_lock>
 800db28:	4a1f      	ldr	r2, [pc, #124]	; (800dba8 <_free_r+0x98>)
 800db2a:	6813      	ldr	r3, [r2, #0]
 800db2c:	4610      	mov	r0, r2
 800db2e:	b933      	cbnz	r3, 800db3e <_free_r+0x2e>
 800db30:	6063      	str	r3, [r4, #4]
 800db32:	6014      	str	r4, [r2, #0]
 800db34:	4628      	mov	r0, r5
 800db36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db3a:	f7ff bfe3 	b.w	800db04 <__malloc_unlock>
 800db3e:	42a3      	cmp	r3, r4
 800db40:	d90b      	bls.n	800db5a <_free_r+0x4a>
 800db42:	6821      	ldr	r1, [r4, #0]
 800db44:	1862      	adds	r2, r4, r1
 800db46:	4293      	cmp	r3, r2
 800db48:	bf04      	itt	eq
 800db4a:	681a      	ldreq	r2, [r3, #0]
 800db4c:	685b      	ldreq	r3, [r3, #4]
 800db4e:	6063      	str	r3, [r4, #4]
 800db50:	bf04      	itt	eq
 800db52:	1852      	addeq	r2, r2, r1
 800db54:	6022      	streq	r2, [r4, #0]
 800db56:	6004      	str	r4, [r0, #0]
 800db58:	e7ec      	b.n	800db34 <_free_r+0x24>
 800db5a:	461a      	mov	r2, r3
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	b10b      	cbz	r3, 800db64 <_free_r+0x54>
 800db60:	42a3      	cmp	r3, r4
 800db62:	d9fa      	bls.n	800db5a <_free_r+0x4a>
 800db64:	6811      	ldr	r1, [r2, #0]
 800db66:	1850      	adds	r0, r2, r1
 800db68:	42a0      	cmp	r0, r4
 800db6a:	d10b      	bne.n	800db84 <_free_r+0x74>
 800db6c:	6820      	ldr	r0, [r4, #0]
 800db6e:	4401      	add	r1, r0
 800db70:	1850      	adds	r0, r2, r1
 800db72:	4283      	cmp	r3, r0
 800db74:	6011      	str	r1, [r2, #0]
 800db76:	d1dd      	bne.n	800db34 <_free_r+0x24>
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	6053      	str	r3, [r2, #4]
 800db7e:	4401      	add	r1, r0
 800db80:	6011      	str	r1, [r2, #0]
 800db82:	e7d7      	b.n	800db34 <_free_r+0x24>
 800db84:	d902      	bls.n	800db8c <_free_r+0x7c>
 800db86:	230c      	movs	r3, #12
 800db88:	602b      	str	r3, [r5, #0]
 800db8a:	e7d3      	b.n	800db34 <_free_r+0x24>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	1821      	adds	r1, r4, r0
 800db90:	428b      	cmp	r3, r1
 800db92:	bf04      	itt	eq
 800db94:	6819      	ldreq	r1, [r3, #0]
 800db96:	685b      	ldreq	r3, [r3, #4]
 800db98:	6063      	str	r3, [r4, #4]
 800db9a:	bf04      	itt	eq
 800db9c:	1809      	addeq	r1, r1, r0
 800db9e:	6021      	streq	r1, [r4, #0]
 800dba0:	6054      	str	r4, [r2, #4]
 800dba2:	e7c7      	b.n	800db34 <_free_r+0x24>
 800dba4:	bd38      	pop	{r3, r4, r5, pc}
 800dba6:	bf00      	nop
 800dba8:	20001da0 	.word	0x20001da0

0800dbac <_init>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	bf00      	nop
 800dbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb2:	bc08      	pop	{r3}
 800dbb4:	469e      	mov	lr, r3
 800dbb6:	4770      	bx	lr

0800dbb8 <_fini>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	bf00      	nop
 800dbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbbe:	bc08      	pop	{r3}
 800dbc0:	469e      	mov	lr, r3
 800dbc2:	4770      	bx	lr
